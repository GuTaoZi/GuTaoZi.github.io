<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>树德书院2022级新生分班&amp;寝室公示</title>
    <url>/2022/08/10/22%E7%BA%A7%E5%88%86%E7%8F%AD%E4%B8%8E%E5%AF%9D%E5%AE%A4%E5%AE%89%E6%8E%92/</url>
    <content><![CDATA[<h1 id="分班-amp-寝室安排"><a href="#分班-amp-寝室安排" class="headerlink" title="分班&amp;寝室安排"></a>分班&amp;寝室安排</h1><h2 id="2216班"><a href="#2216班" class="headerlink" title="2216班"></a>2216班</h2><p>带班大学长：<strong>陈于思  赵旻炅  朱佑鑫</strong></p>
<p>男生寝室位于二期11栋3楼，女生寝室位于二期11栋13楼</p>
<p>(下表成员顺序不分先后)</p>
<h3 id="女生寝室"><a href="#女生寝室" class="headerlink" title="女生寝室"></a>女生寝室</h3><div class="table-container">
<table>
<thead>
<tr>
<th>寝室号</th>
<th>寝</th>
<th>室</th>
<th>成</th>
<th>员</th>
</tr>
</thead>
<tbody>
<tr>
<td>1302</td>
<td>朱星颖</td>
<td>付垚</td>
<td>贺雅楠</td>
<td>张宇欣</td>
</tr>
<tr>
<td>1303</td>
<td>于斯瑶</td>
<td>陈瑶</td>
<td>谷雨晴</td>
<td>祖诗淇</td>
</tr>
</tbody>
</table>
</div>
<h3 id="男生寝室"><a href="#男生寝室" class="headerlink" title="男生寝室"></a>男生寝室</h3><div class="table-container">
<table>
<thead>
<tr>
<th>寝室号</th>
<th>寝</th>
<th>室</th>
<th>成</th>
<th>员</th>
</tr>
</thead>
<tbody>
<tr>
<td>302</td>
<td>魏恺志</td>
<td>刘彬越</td>
<td>王益时</td>
<td>庄熙文</td>
</tr>
<tr>
<td>303</td>
<td>苑长琦</td>
<td>胡恺翔</td>
<td>陈沛安</td>
<td>赵春源</td>
</tr>
<tr>
<td>304</td>
<td>王秉旸</td>
<td>马国恒</td>
<td>陈政</td>
<td>赖海斌</td>
</tr>
<tr>
<td>305</td>
<td>谭鑫</td>
<td>张博钧</td>
<td>徐进哲</td>
<td>刘羽谦</td>
</tr>
<tr>
<td>307</td>
<td>敖恺</td>
<td>杨赛阳</td>
<td>余哲霖</td>
<td>李蔚澄</td>
</tr>
<tr>
<td>308</td>
<td>杨毅</td>
<td>张仁睿</td>
<td>梅笑寒</td>
<td>梁马浴阳</td>
</tr>
<tr>
<td>309</td>
<td>薛钧译</td>
<td>贺宇宸</td>
<td>祝林枫</td>
<td>丛辉煜</td>
</tr>
<tr>
<td>310</td>
<td>干宇昊</td>
<td>方磊</td>
<td>杨熙楠</td>
<td>何昊宸</td>
</tr>
<tr>
<td>311</td>
<td>王泓璋</td>
<td>傅昶玮</td>
<td>肖淇文</td>
<td>单俊杰</td>
</tr>
<tr>
<td>312</td>
<td>黄梓烁</td>
<td>林钤韪</td>
<td>林安森</td>
<td>郭泳铭</td>
</tr>
</tbody>
</table>
</div>
<h2 id="2217班"><a href="#2217班" class="headerlink" title="2217班"></a>2217班</h2><p>带班大学长：<strong>高斯  郭之骐  石晶晶</strong></p>
<p>男生寝室位于二期11栋3楼，女生寝室位于二期11栋13楼</p>
<p>(下表成员顺序不分先后)</p>
<h3 id="女生寝室-1"><a href="#女生寝室-1" class="headerlink" title="女生寝室"></a>女生寝室</h3><div class="table-container">
<table>
<thead>
<tr>
<th>寝室号</th>
<th>寝</th>
<th>室</th>
<th>成</th>
<th>员</th>
</tr>
</thead>
<tbody>
<tr>
<td>1304</td>
<td>孙点点</td>
<td>李文炅</td>
<td>徐湉苓</td>
<td>张恺桢</td>
</tr>
<tr>
<td>1305</td>
<td>林子奕</td>
<td>姜跃琳</td>
<td>王聪怡</td>
<td>黄楚惟</td>
</tr>
<tr>
<td>1306</td>
<td>吴蔚芷</td>
<td>王子童</td>
<td>林曈</td>
<td>徐欣</td>
</tr>
</tbody>
</table>
</div>
<h3 id="男生寝室-1"><a href="#男生寝室-1" class="headerlink" title="男生寝室"></a>男生寝室</h3><div class="table-container">
<table>
<thead>
<tr>
<th>寝室号</th>
<th>寝</th>
<th>室</th>
<th>成</th>
<th>员</th>
</tr>
</thead>
<tbody>
<tr>
<td>313</td>
<td>李先旭</td>
<td>王亦煊</td>
<td>张倍诚</td>
<td>肖正昊</td>
</tr>
<tr>
<td>314</td>
<td>黄敬文</td>
<td>张扬</td>
<td>李东博</td>
<td>陶昱霖</td>
</tr>
<tr>
<td>315</td>
<td>李凌宇</td>
<td>刘浩然</td>
<td>符国凯榆</td>
<td>张柬禾</td>
</tr>
<tr>
<td>316</td>
<td>林晖</td>
<td>林绍阳</td>
<td>洪汀渊</td>
<td>陈镇宇</td>
</tr>
<tr>
<td>317</td>
<td>申文琨</td>
<td>邓炫昊</td>
<td>张一丁</td>
<td>高啟坤</td>
</tr>
<tr>
<td>318</td>
<td>刘昕易</td>
<td>陈凯</td>
<td>洪源</td>
<td>徐焓茁</td>
</tr>
<tr>
<td>319</td>
<td>郭家麟</td>
<td>刘语玹</td>
<td>简迅</td>
<td>徐杰</td>
</tr>
<tr>
<td>320</td>
<td>何家兆</td>
<td>陈易航</td>
<td>万博扬</td>
<td>徐璇喆</td>
</tr>
<tr>
<td>321</td>
<td>黄睿轩</td>
<td>胡帅</td>
<td>吴霁阳</td>
<td>白卓奇</td>
</tr>
<tr>
<td>322</td>
<td>司浩宇</td>
<td>王明远</td>
<td>熊星宇</td>
<td>周一鸣</td>
</tr>
</tbody>
</table>
</div>
<h2 id="2218班"><a href="#2218班" class="headerlink" title="2218班"></a>2218班</h2><p>带班大学长：<strong>樊斯特  林雨诗  吴星霖</strong></p>
<p>男生寝室位于荔园4栋6楼，女生寝室位于二期11栋13楼</p>
<p>(下表成员顺序不分先后)</p>
<h3 id="女生寝室-2"><a href="#女生寝室-2" class="headerlink" title="女生寝室"></a>女生寝室</h3><div class="table-container">
<table>
<thead>
<tr>
<th>寝室号</th>
<th>寝</th>
<th>室</th>
<th>成</th>
<th>员</th>
</tr>
</thead>
<tbody>
<tr>
<td>1307</td>
<td>刘依水</td>
<td>毛郅霖</td>
<td>覃奕颖</td>
<td>张畅洋</td>
</tr>
<tr>
<td>1308</td>
<td>朱家源</td>
<td>林小央</td>
<td>王一茜</td>
<td>李雅婧</td>
</tr>
<tr>
<td>1309</td>
<td>张馨文</td>
<td>赵子宁</td>
<td>李叶欣</td>
<td>朱玉</td>
</tr>
</tbody>
</table>
</div>
<h3 id="男生寝室-2"><a href="#男生寝室-2" class="headerlink" title="男生寝室"></a>男生寝室</h3><div class="table-container">
<table>
<thead>
<tr>
<th>寝室号</th>
<th>寝</th>
<th>室</th>
<th>成</th>
<th>员</th>
</tr>
</thead>
<tbody>
<tr>
<td>601</td>
<td>王意铭</td>
<td>王扶林</td>
<td>任轩锐</td>
<td>邓子涵</td>
</tr>
<tr>
<td>602</td>
<td>肖泽昊</td>
<td>杨敬毅</td>
<td>舒飏</td>
<td>李轩宇</td>
</tr>
<tr>
<td>603</td>
<td>梁卓均</td>
<td>杜运泽</td>
<td>潘炜</td>
<td>梁瑞健</td>
</tr>
<tr>
<td>604</td>
<td>张皓佳</td>
<td>李宇轩</td>
<td>王伟夷</td>
<td>冯松宇</td>
</tr>
<tr>
<td>605</td>
<td>龚相宇</td>
<td>赵孟飞</td>
<td>许致韬</td>
<td>李济涵</td>
</tr>
<tr>
<td>606</td>
<td>展雨畅</td>
<td>吉俊昌</td>
<td>魏昊阳</td>
<td>郑竣航</td>
</tr>
<tr>
<td>607</td>
<td>周益贤</td>
<td>张育鹏</td>
<td>林宏博</td>
<td>顾博海</td>
</tr>
<tr>
<td>608</td>
<td>陈峙安</td>
<td>欧阳安男</td>
<td>徐剑儒</td>
<td>秦浩洋</td>
</tr>
<tr>
<td>609</td>
<td>潘健辉</td>
<td>邓凯轩</td>
<td>沈博闻</td>
<td>周子涵</td>
</tr>
</tbody>
</table>
</div>
<h2 id="2219班"><a href="#2219班" class="headerlink" title="2219班"></a>2219班</h2><p>带班大学长：<strong>范王卓  沙骏飞  张成杰</strong></p>
<p>男生寝室位于荔园4栋7楼，女生寝室位于二期11栋13楼</p>
<p>(下表成员顺序不分先后)</p>
<h3 id="女生寝室-3"><a href="#女生寝室-3" class="headerlink" title="女生寝室"></a>女生寝室</h3><div class="table-container">
<table>
<thead>
<tr>
<th>寝室号</th>
<th>寝</th>
<th>室</th>
<th>成</th>
<th>员</th>
</tr>
</thead>
<tbody>
<tr>
<td>1310</td>
<td>付宛昕</td>
<td>乔欣悦</td>
<td>赵珮岑</td>
<td>张夏菲</td>
</tr>
<tr>
<td>1311</td>
<td>林洋帆</td>
<td>孙沐妍</td>
<td>修照瑜</td>
<td>范新齐</td>
</tr>
<tr>
<td>1312</td>
<td>钟林然</td>
<td>黄云歆</td>
<td>韩静仪</td>
<td>王菁仪</td>
</tr>
</tbody>
</table>
</div>
<h3 id="男生寝室-3"><a href="#男生寝室-3" class="headerlink" title="男生寝室"></a>男生寝室</h3><div class="table-container">
<table>
<thead>
<tr>
<th>寝室号</th>
<th>寝</th>
<th>室</th>
<th>成</th>
<th>员</th>
</tr>
</thead>
<tbody>
<tr>
<td>711</td>
<td>郭权德</td>
<td>王者也</td>
<td>刘梓懿</td>
<td>胡子川</td>
</tr>
<tr>
<td>712</td>
<td>丁昊天</td>
<td>陆逸斯</td>
<td>宋尚恒</td>
<td>张承璧</td>
</tr>
<tr>
<td>713</td>
<td>周靖杰</td>
<td>闫闻智</td>
<td>王语潇</td>
<td>欧赛</td>
</tr>
<tr>
<td>714</td>
<td>张益嘉</td>
<td>马梽钊</td>
<td>叶宇灏</td>
<td>肖鉴珅</td>
</tr>
<tr>
<td>715</td>
<td>刘文烨</td>
<td>张珈烨</td>
<td>黄思源</td>
<td>范修豪</td>
</tr>
<tr>
<td>716</td>
<td>胡泊</td>
<td>刘思畅</td>
<td>洪声杨</td>
<td>周子恒</td>
</tr>
<tr>
<td>717</td>
<td>笃岳霖</td>
<td>李睿康</td>
<td>马博涵</td>
<td>王硕涵</td>
</tr>
<tr>
<td>718</td>
<td>刘祈东</td>
<td>陈世有</td>
<td>朱炫睿</td>
<td>尤湧棋</td>
</tr>
</tbody>
</table>
</div>
<h2 id="2220班"><a href="#2220班" class="headerlink" title="2220班"></a>2220班</h2><p>带班大学长：<strong>丁一轩  王芷馨  易翔</strong></p>
<p>男生寝室位于荔园4栋5楼，女生寝室位于二期11栋13楼</p>
<p>(下表成员顺序不分先后)</p>
<h3 id="女生寝室-4"><a href="#女生寝室-4" class="headerlink" title="女生寝室"></a>女生寝室</h3><div class="table-container">
<table>
<thead>
<tr>
<th>寝室号</th>
<th>寝</th>
<th>室</th>
<th>成</th>
<th>员</th>
</tr>
</thead>
<tbody>
<tr>
<td>1313</td>
<td>李岳阳</td>
<td>施子涵</td>
<td>张蓓</td>
<td>柳秦璇</td>
</tr>
<tr>
<td>1314</td>
<td>李连馨</td>
<td>王雯琳</td>
<td>李泽坤</td>
<td>吴亚唯</td>
</tr>
</tbody>
</table>
</div>
<h3 id="男生寝室-4"><a href="#男生寝室-4" class="headerlink" title="男生寝室"></a>男生寝室</h3><div class="table-container">
<table>
<thead>
<tr>
<th>寝室号</th>
<th>寝</th>
<th>室</th>
<th>成</th>
<th>员</th>
</tr>
</thead>
<tbody>
<tr>
<td>514</td>
<td>景晓龙</td>
<td>胡睿</td>
<td>刘春晓</td>
<td>邵研</td>
</tr>
<tr>
<td>515</td>
<td>苗桐硕</td>
<td>钟兴华</td>
<td>吴梦轩</td>
<td>于荣焰</td>
</tr>
<tr>
<td>516</td>
<td>翟文韬</td>
<td>苏奕名</td>
<td>刘琼辉</td>
<td>叶航见</td>
</tr>
<tr>
<td>517</td>
<td>刘建乐</td>
<td>刘逸凡</td>
<td>唐泽昆</td>
<td>陈思锦</td>
</tr>
<tr>
<td>518</td>
<td>王佳申</td>
<td>吴文泽</td>
<td>陈罗玥平</td>
<td>万力行</td>
</tr>
<tr>
<td>519</td>
<td>王天源</td>
<td>陈汝聪</td>
<td>奚雨桐</td>
<td>赵彦博</td>
</tr>
</tbody>
</table>
</div>
<h1 id="寝室平面结构图"><a href="#寝室平面结构图" class="headerlink" title="寝室平面结构图"></a>寝室平面结构图</h1><h2 id="二期11栋"><a href="#二期11栋" class="headerlink" title="二期11栋"></a>二期11栋</h2><p>*11栋各层编号方式相同，此处仅展示3楼结构</p>
<p><img src="https://s2.loli.net/2022/08/10/lEmTuGBveryU3DV.jpg" alt=""></p>
<h2 id="荔园4栋6楼"><a href="#荔园4栋6楼" class="headerlink" title="荔园4栋6楼"></a>荔园4栋6楼</h2><p><img src="https://s2.loli.net/2022/08/10/qCNMEpYsj4gOo98.jpg" alt=""></p>
<h2 id="荔园4栋7楼"><a href="#荔园4栋7楼" class="headerlink" title="荔园4栋7楼"></a>荔园4栋7楼</h2><p><img src="https://s2.loli.net/2022/08/10/hB6tRGmUMzfE3q8.jpg" alt="BA4FL_CFL@P6LB56Y___I0F.jpg" style="zoom:50%;" /></p>
<h2 id="荔园4栋5楼"><a href="#荔园4栋5楼" class="headerlink" title="荔园4栋5楼"></a>荔园4栋5楼</h2><p><img src="https://s2.loli.net/2022/08/10/bdOQ4S3aeZJ1WGI.jpg" alt=""></p>
]]></content>
      <categories>
        <category>学长团</category>
      </categories>
      <tags>
        <tag>学长团</tag>
      </tags>
  </entry>
  <entry>
    <title>SUSTech 培养方案指南 by 咕桃</title>
    <url>/2022/08/12/2022%E5%9F%B9%E5%85%BB%E6%96%B9%E6%A1%88%E8%A7%A3%E8%AF%BB%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p><strong>点击下载：</strong><a href="http://tao.sustech.edu.cn/UserFiles/editor/file/20220809/1660027475636002188.zip"><strong>南方科技大学2022级本科人才培养方案</strong></a></p>
<blockquote>
<p><strong>本博客适用于南方科技大学2022级新生，2023年培养方案解读施工中，请耐心等待。</strong></p>
<p>南科大会在每个年级入学前发布对应年级的培养方案，内容包含：</p>
<ul>
<li>通识课程培养方案</li>
<li>各系下设专业情况</li>
<li>所有专业在1+3/2+2进系时对于先修课程的要求</li>
<li>所有专业对于不同课程的推荐修读学期</li>
<li>所有专业在毕业时对于修读课程的要求</li>
</ul>
<p>本文意在简单讲解培养方案该怎么读，培养方案上有哪些东西没写出来，以及如何结合培养方案来进行大一的选课。如果本文能对你有所帮助，在下当不胜荣幸。</p>
<p>——咕桃</p>
</blockquote>
<h1 id="Part-Ⅰ-通识培养方案"><a href="#Part-Ⅰ-通识培养方案" class="headerlink" title="Part Ⅰ. 通识培养方案"></a>Part Ⅰ. 通识培养方案</h1><p>这是对于所有专业都适用的通识课要求，其中需要重点看(各专业培养方案不会重点提)的主要是下面几个部分</p>
<h2 id="思想政治教育模块"><a href="#思想政治教育模块" class="headerlink" title="思想政治教育模块"></a>思想政治教育模块</h2><p>一共九门课16学分，要求全部修读，其中有五门理论课程(姑且这么叫吧)和四门实践课。</p>
<p>理论课程是需要在选课系统里进行积分选课的，需要平时每周去上课。</p>
<p>实践课程则是每个学期末书院会安排实践课论文的提交，以及青马班/寒假母校行/重走长征路这一类的假期实践活动可以算入实践课时长，认证时长后才能提交论文，这个等大一上期末书院会具体讲解。</p>
<p><del>妮可在选上双一流之后，思政课形势稳中向好，期末考查形式可能会逐渐向严发展，建议尽早完成修读</del></p>
<h2 id="基础素质培养模块"><a href="#基础素质培养模块" class="headerlink" title="基础素质培养模块"></a>基础素质培养模块</h2><h3 id="体育类"><a href="#体育类" class="headerlink" title="体育类"></a>体育类</h3><p>一共六门课四学分，需要在选课系统上选择(种类非常丰富建议多选几种体验)，最后两门体育课是没有学分的。</p>
<p>不一定要每学期都选，但毕业需要读完六门体育课，建议跟大家一起大一到大三六学期学完。</p>
<h3 id="军训类"><a href="#军训类" class="headerlink" title="军训类"></a>军训类</h3><p>军训通过则大一上期末会自动加进你的已修课程，无需选课。</p>
<p>军训期间正常表现，不要太皮就能过，以及会有一次开卷军事理论考试，正常做态度不太离谱都能过。总结而言就是军训需要重训的是极个别同学。</p>
<h3 id="综合素质类"><a href="#综合素质类" class="headerlink" title="综合素质类"></a>综合素质类</h3><p>这个不用太在意，无需选课。</p>
<h3 id="美育类"><a href="#美育类" class="headerlink" title="美育类"></a>美育类</h3><p>也叫艺术类，需要在选课系统选课，在选课系统的<strong>开课院系</strong>筛选<strong>艺术中心</strong>即可，选一门两学分的就可以了。</p>
<h2 id="基础能力培养模块"><a href="#基础能力培养模块" class="headerlink" title="基础能力培养模块"></a>基础能力培养模块</h2><h3 id="计算机类"><a href="#计算机类" class="headerlink" title="计算机类"></a>计算机类</h3><p>从2022级开始，<u>CS109计算机程序设计基础</u>将代替原<u>计算机程序设计基础A</u>，而CS110~CS113提供了Java, C, Python, MATLAB四门语言的课程代替原<u>计算机程序设计基础B</u>。</p>
<p>2022级各专业对于计算机课程的先修要求也将按照CS109或其他计算机课程进行调整。</p>
<p>目前选课系统暂未显示有开设计算机导论B课程，因此入学是否有计算机分级考试<u>尚不明确</u>。</p>
<h3 id="写作类"><a href="#写作类" class="headerlink" title="写作类"></a>写作类</h3><p>需要选课系统自选，只有写作与交流一门pf课，<strong><em><u>非常非常非常</u></em></strong>建议大一修读，会教你如何调整论文格式、如何参考文献、如何作报告、如何用好电子图书馆…务必认真学！不要折磨你的队友，让他收你的论文烂摊子熬夜到三点（</p>
<p>虽然只是pf课，但绝对是非常实用的一门课程，你学的越早，折磨队友折磨的越少。</p>
<h3 id="国学类"><a href="#国学类" class="headerlink" title="国学类"></a>国学类</h3><p>需要选课系统自选，选一门两学分的足够，可以考虑在大三大四比较休闲的时候选。</p>
<h3 id="外语类"><a href="#外语类" class="headerlink" title="外语类"></a>外语类</h3><p>需要选课系统自选。可以确定今年仍然会进行英语分级考试，根据考试结果将同学分为三类以安排最合适的课程。</p>
<ul>
<li><p>A类(不到10%)：</p>
<p>仅需修读SUSTech English Ⅲ 和 English for Academic Purposes(EAP) 和至少一门CLE选修课</p>
</li>
<li><p>B类(大部分同学)：</p>
<p>需修读SUSTech English Ⅱ，SUSTech English Ⅲ 和 EAP 和至少一门CLE选修课</p>
</li>
<li><p>C类：</p>
<p>需修读SUSTech English Ⅰ，SUSTech English Ⅱ，SUSTech English Ⅲ 和 EAP</p>
</li>
</ul>
<p>语言中心(CLE)课程有必修有选修，入学分级考试决定你必修上什么，以及需不需要上选修。</p>
<p>SUSTech English一周两节四学分，EAP一周一节两学分，多学和少学各有优势：</p>
<p>多学两门SUSTech English，给分都很漂亮，可以用来提绩点，不用上选修</p>
<p>少学两门SUSTech English，可以腾出更多的时间和学分选其他课，并且提前结束语言课修读</p>
<h3 id="人文社科类"><a href="#人文社科类" class="headerlink" title="人文社科类"></a>人文社科类</h3><p>毕业要求6学分，人文2学分，社科2学分，剩余2学分任选，大一没时间/没学分可以考虑大三大四。</p>
<h3 id="自然科学基础类"><a href="#自然科学基础类" class="headerlink" title="自然科学基础类"></a>自然科学基础类</h3><p>这是毕业要求，在大四前修读完就行，但是其实很多课都是进系的先修，只有个别不要求，大一没时间可以大三大四补上。</p>
<p>以下每一行选一个就可以了(括号内从易到难)：</p>
<p>(高等微积分，高等数学，数学分析)</p>
<p>(线性代数，高等代数)</p>
<p>(大学物理，普通物理学)</p>
<p>基础物理实验</p>
<p>(大学化学，化学原理)</p>
<p>(生命科学概论，生物学原理)</p>
<h3 id="大类专业概论"><a href="#大类专业概论" class="headerlink" title="大类专业概论"></a>大类专业概论</h3><p>随便选两学分就行。</p>
<h1 id="Part-Ⅱ-各系下设专业情况"><a href="#Part-Ⅱ-各系下设专业情况" class="headerlink" title="Part Ⅱ. 各系下设专业情况"></a>Part Ⅱ. 各系下设专业情况</h1><p>这个在通识培养方案里有，可以看看有没有自己感兴趣的专业awa</p>
<p><img src="https://s2.loli.net/2022/08/11/xzEn4XWeq7MP3mY.png" alt="_M_ZC9P1PSVV80H_XV__I_X.png"></p>
<h1 id="Part-Ⅲ-进系先修要求解读"><a href="#Part-Ⅲ-进系先修要求解读" class="headerlink" title="Part Ⅲ. 进系先修要求解读"></a>Part Ⅲ. 进系先修要求解读</h1><p>每个专业培养方案前面都会简单把通识培养方案重复一遍，这里就跳过了，让我们从专业先修开始吧。</p>
<h2 id="进系模式"><a href="#进系模式" class="headerlink" title="进系模式"></a>进系模式</h2><p>南方科技大学专业选择主要有两个模式：1+3进系和2+2进系，两种选择没有本质差别，也有各自的优点。</p>
<h3 id="1-3进系"><a href="#1-3进系" class="headerlink" title="1+3进系"></a>1+3进系</h3><p>这种模式其实是后来添加的，目前暂时是主流。</p>
<ul>
<li>提前进系，选导师比较自由</li>
<li>更早进行专业课学习</li>
<li><del>进系要求先修课更少</del>(似乎从这一届开始1+3和2+2先修要求一样了)</li>
</ul>
<h3 id="2-2进系"><a href="#2-2进系" class="headerlink" title="2+2进系"></a>2+2进系</h3><ul>
<li>有更多的时间了解各个专业</li>
<li>先修课压力较小(平均每学期所需的先修课更少)</li>
<li>可以多一年了解不同专业的吐槽（</li>
</ul>
<h2 id="先修要求"><a href="#先修要求" class="headerlink" title="先修要求"></a>先修要求</h2><h3 id="简单看一眼"><a href="#简单看一眼" class="headerlink" title="简单看一眼"></a>简单看一眼</h3><p>因为作者是计算机科学与工程系-计算机科学与技术专业本科生，因此这里以2022级计算机科学与技术专业培养方案为例解读。</p>
<p><img src="https://s2.loli.net/2022/08/11/Tmjx3VKvHRLrpIn.png" alt="__U6R__@__S0B5~YPDJQMMS.png" style="zoom:50%;" /></p>
<p>这张表其实说的很清楚了，我就不再重复讲一遍，讲点培养方案没说的。</p>
<h3 id="如果你爱某个专业爱得深沉"><a href="#如果你爱某个专业爱得深沉" class="headerlink" title="如果你爱某个专业爱得深沉"></a>如果你爱某个专业爱得深沉</h3><p>别急，大一一年多跟对应专业的教授聊一聊，一定确认自己喜欢这个专业，想做相关的课题再留下来。</p>
<p>如果你已经确定，那么就一定确认进系前按照培养方案修读完了<strong>所有的先修课</strong>，大部分专业<strong>不允许</strong>不满足进系先修的同学进专业，差一门也不行。</p>
<p>一定想清楚自己进系前怎么排课，比如进系需要电路基础，就必须要第一学期学电路基础的先修：线性代数，第二学期再选电路基础</p>
<p>以及，专业先修不要求你读的课，就没有太大必要大一去选，计系这种需要笔试+面试才能进的系是会看你的先修课成绩的，所以能少选就少选(但是要比15学分高，不要为了专精几门课收到学业警示啊你个混蛋)。</p>
<h3 id="如果你还不清楚自己喜欢什么"><a href="#如果你还不清楚自己喜欢什么" class="headerlink" title="如果你还不清楚自己喜欢什么"></a>如果你还不清楚自己喜欢什么</h3><p>高数大物线代，这几乎是每个专业都会要求的课程，所以可以无脑选。</p>
<p>你可以同时<strong>参考多个专业的培养方案</strong>来安排自己的课程，例如选择<strong>计算机程序设计基础</strong>这种很多专业都有要求的课程。作者在大一结束时，由于在计系要求外多修了很多课，其实满足了十多个专业的先修要求（</p>
<p>不过需要注意的是，人类是有极限的，不要为了给自己更多的选择就每学期顶满25学分，那样的课程压力很少有人能承受住。</p>
<p>南科大为你提供了一年或两年的时间来慢慢了解自己喜欢的专业，在这段时间里可以主动联系实验室、联系教授，多聊聊你也许会发现你真正喜欢的兴趣。</p>
<h2 id="进系考查方式"><a href="#进系考查方式" class="headerlink" title="进系考查方式"></a>进系考查方式</h2><p>现在对于22级的进系考查各种解读都有，先来看看培养方案原文：</p>
<blockquote>
<ol>
<li>如本院系所有专业第一学年结束时进专业的学生总人数大于等于该院系教研系列教师（PI）总人数*2*60%，则该院系所有专业可以针对第二学年结束时申请进专业的学生执行所设置的进专业课程要求； </li>
<li>如本院系所有专业第一学年结束时进专业的学生总人数小于该院系教研系列教师（PI）总人数*2*60%，则该院系所有专业针对第二学年结束时申请进专业的学生不执行所设置的进专业课程要求； </li>
<li>如第一学年结束时申请进专业的学生人数超过该院系教研系列教师（PI）总人数的 4 倍，则该院系可以按照事先确定的规则选拔学生。确定规则时原则上考察学生的专业适应性，不以学分绩为依据（具体规则由院系制定并提前公布）。</li>
<li>针对第二学年结束时进专业的学生不执行设置要求的院系，如果第二学年结束时申请进专业的学生人数和第一学年结束时已经进专业的学生人数累计超过该院系教研系列教师（PI）总人数的 4 倍，则该院系可以按照事先确定的规则在申请进专业的学生中进行选拔学生。确定规则时原则上考察学生的专业适应性，不以学分绩为依据（具体规则由院系制定并提前公布）。</li>
</ol>
</blockquote>
<p>$\frac{申请人数}{PI人数}$这个比值是对1+3和2+2两种进系方式能否进行考察的判定标准，以下分几种情况：</p>
<ol>
<li><p>第一年&lt;1.2，第二年累计≤4</p>
<p>PI人数最充裕的情况，第二年申请进系可以不满足先修课要求。</p>
</li>
<li><p>第一年<1.2，第二年累计>4</p>
<p>1+3默默无闻，2+2人数激增，则院系可以对2+2进行选拔(但也没说要满足先修)。</p>
<p>适用于大家第一年全部潜水，都想不读进系先修第二年进系的情况(^^</p>
<p>不过如果不是上百人合谋的话，大约是不可能发生的吧(笑)</p>
</li>
<li><p>第一年≥1.2</p>
<p>2+2需要满足先修课，最正常的情况。</p>
<p>如果第二年累计&gt;4院系还是可以设置选拔的。</p>
</li>
<li><p>第一年&gt;4</p>
<p>某些大系特供的条例，1+3人数爆满是允许院系设置选拔的。</p>
<p>像这种申请人数多到不行的院系果然设置一点门槛才是对的吧喂= =</p>
</li>
</ol>
<h1 id="Part-IV-专业课安排"><a href="#Part-IV-专业课安排" class="headerlink" title="Part IV. 专业课安排"></a>Part IV. 专业课安排</h1><h2 id="专业课程安排一览"><a href="#专业课程安排一览" class="headerlink" title="专业课程安排一览"></a>专业课程安排一览</h2><p>这部分是培养方案最不讲谜语的部分，说的都很清楚，这里主要提几个问题，大家可以带着问题，结合选课系统看培养方案</p>
<ol>
<li>这门课是必修的吗？在什么时候一定要上？</li>
<li>这门课是全英文吗？有哪些老师教？</li>
<li>这门课多少学分？有没有实验课？作业和project占多少总评？</li>
<li>这门课建议什么时间上？春秋都开吗？有没有先修？先修排哪个学期？</li>
</ol>
<p>对着培养方案上的课，一口气把上面的问题全回答出来，你差不多就做好了选专业课的准备了。</p>
<h2 id="课程结构图"><a href="#课程结构图" class="headerlink" title="课程结构图"></a>课程结构图</h2><p>其实想了解一个专业上什么课，最简单的办法是翻到最后看课程结构图，简单明了，排课的时候这张图也很管用。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>介绍到这里你应该就能完全读懂培养方案了。</p>
<p>毕竟培养方案厚是厚，但是每个专业就那么几页，重复的部分挺多的，去年我无聊的时候把整本书翻了一遍（</p>
<p>比较建议选课前多翻翻，考虑一下自己的选课和意向专业之间的对应关系，规划能力还是很重要的。</p>
]]></content>
      <categories>
        <category>SUSTech</category>
      </categories>
      <tags>
        <tag>妮可指南</tag>
      </tags>
  </entry>
  <entry>
    <title>CS205 C/C++ Quiz题解析</title>
    <url>/2023/01/09/CS205_C&amp;CPP_quiz/</url>
    <content><![CDATA[<h3 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h3><h4 id="Q1"><a href="#Q1" class="headerlink" title="Q1"></a>Q1</h4><p>The source code of program is as follows:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The source code has been compiled to program <strong>hello</strong>, when you run it as follows, what <code>argc</code> will be?</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./hello I LOVE CPP</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Answer: 4</p>
<p>4个command line arguments分别是: ./hello, I, LOVE, CPP</p>
</blockquote>
<h4 id="Q2"><a href="#Q2" class="headerlink" title="Q2"></a>Q2</h4><p>The following code is the prototype/declaration of function mul.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Answer: False</p>
<p>这段代码是定义(definition)而非声明(prototype/declaration)</p>
</blockquote>
<h4 id="Q3"><a href="#Q3" class="headerlink" title="Q3"></a>Q3</h4><p>The data type of the variable <code>PI</code> is <code>double</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> PI 3.14</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>Answer: False</p>
<p>宏不是变量(variable)</p>
</blockquote>
<h4 id="Q4"><a href="#Q4" class="headerlink" title="Q4"></a>Q4</h4><p>When a function prototype is declared in the header file you create, you do NOT need to define it in a CPP file.</p>
<blockquote>
<p>Answer: False</p>
<p>头文件里的声明+CPP文件的定义才能使用函数。</p>
</blockquote>
<h4 id="Q5"><a href="#Q5" class="headerlink" title="Q5"></a>Q5</h4><p> IDE (Integrated development environment) is a powerful compiler with many userful features.</p>
<blockquote>
<p>Answer: False</p>
<p>集成开发环境可不只是编译器啊</p>
</blockquote>
<h4 id="Q6"><a href="#Q6" class="headerlink" title="Q6"></a>Q6</h4><p>If you get 75 for one of your projects, which situation should most likely be?</p>
<blockquote>
<p>Answer: Finish all tasks</p>
<p>为什么要复习这个啊=-=</p>
</blockquote>
<h3 id="Data-Types-and-Arithmetic-Operators"><a href="#Data-Types-and-Arithmetic-Operators" class="headerlink" title="Data Types and Arithmetic Operators"></a>Data Types and Arithmetic Operators</h3><h4 id="Q1-1"><a href="#Q1-1" class="headerlink" title="Q1"></a>Q1</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">signed</span> <span class="type">char</span> c1 = <span class="number">127</span>;</span><br><span class="line"><span class="type">signed</span> <span class="type">char</span> c2 = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> csum = c1 + c2;</span><br><span class="line">cout &lt;&lt; csum;</span><br></pre></td></tr></table></figure>
<p>What’s the output of the source code?</p>
<blockquote>
<p>Answer: 128</p>
<p>为了计算，先转换成了int再做加法，结果储存进int型变量避免了溢出。</p>
<p>整数运算只有int和long long两类运算，所以下面那段代码会输出-2147483648，就是先按int型计算溢出后再储存进long long。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> x = INT_MAX;</span><br><span class="line"><span class="type">int</span> y = <span class="number">1</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> p = x + y;</span><br><span class="line">cout &lt;&lt; p;</span><br><span class="line"><span class="comment">//output: -2147483648</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="Q2-1"><a href="#Q2-1" class="headerlink" title="Q2"></a>Q2</h4><p><code>sizeof()</code> is a function and can yield the size in bytes of a type.</p>
<blockquote>
<p>Answer: False</p>
<p><code>sizeof</code>是个操作符，不是函数！</p>
</blockquote>
<h4 id="Q3-1"><a href="#Q3-1" class="headerlink" title="Q3"></a>Q3</h4><p><code>size_t</code> is an unsigned integer type.</p>
<blockquote>
<p>Answer: True</p>
<p>size_t 是无符号整数类型, 32 bit or 64 bit</p>
</blockquote>
<h4 id="Q4-1"><a href="#Q4-1" class="headerlink" title="Q4"></a>Q4</h4><p>What’s the value of the variable <code>num</code>?</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> num = <span class="number">23</span> / <span class="number">4</span> * <span class="number">4</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Answer: 20</p>
<p>(int)23/4=5, (int)5*4=4.</p>
</blockquote>
<h4 id="Q5-1"><a href="#Q5-1" class="headerlink" title="Q5"></a>Q5</h4><p>What’s the value of variable <code>num</code>?</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> num = <span class="number">23</span> / <span class="number">4.</span> * <span class="number">4</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Answer: 23</p>
<p>23/(double)4.=5.75, 5.75*4=(double)23.00, (int)23.00=23</p>
</blockquote>
<h4 id="Q6-1"><a href="#Q6-1" class="headerlink" title="Q6"></a>Q6</h4><p>What’s the value of variable <code>num</code>?</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int num = 23 / 4 * 4.;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Answer: 20</p>
<p>(int)23/4=5, 5*(double)4.=(double)20.00, (int)20.00=20</p>
</blockquote>
<h4 id="Q7"><a href="#Q7" class="headerlink" title="Q7"></a>Q7</h4><p> In the following code, since the variable num is not initialized explicitly, it will be initialized to 0 automatically.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> num;</span><br><span class="line">std::cout&lt;&lt; num &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Answer: False</p>
<p>在某些平台，未初始化的变量可能拥有随机值</p>
</blockquote>
<h4 id="Q8"><a href="#Q8" class="headerlink" title="Q8"></a>Q8</h4><p>auto is a placeholder type specifier in C++11. What is the value of the variable <code>val</code> in the following code?</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> val = <span class="number">2</span> / <span class="number">3</span>;</span><br><span class="line">val = <span class="number">3.14</span> * <span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Answer: 6</p>
<p>auto=int</p>
</blockquote>
<h3 id="Branching-and-Looping-Statements"><a href="#Branching-and-Looping-Statements" class="headerlink" title="Branching and Looping Statements"></a>Branching and Looping Statements</h3><h4 id="Q1-2"><a href="#Q1-2" class="headerlink" title="Q1"></a>Q1</h4><p> What’s the output of the following source code?</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> y = <span class="number">30</span>;</span><br><span class="line">x+= (y-=<span class="number">10</span>);</span><br><span class="line">cout &lt;&lt; x;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Answer: 120</p>
<p>先执行括号里的，再执行括号外的</p>
</blockquote>
<h4 id="Q2-2"><a href="#Q2-2" class="headerlink" title="Q2"></a>Q2</h4><p>What’s the output of the following source code?</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> y = x++;</span><br><span class="line">cout &lt;&lt; y;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Answer: 100</p>
<p>自增在后，先赋值再自增</p>
</blockquote>
<h4 id="Q3-2"><a href="#Q3-2" class="headerlink" title="Q3"></a>Q3</h4><p>What’s the output of the following source code:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> y = (x = <span class="number">200</span>);</span><br><span class="line">cout &lt;&lt; y;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Answer: 200</p>
<p>先执行括号里的，再执行括号外的</p>
</blockquote>
<h4 id="Q4-2"><a href="#Q4-2" class="headerlink" title="Q4"></a>Q4</h4><p> What’s the output of the following source code?</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">2</span>, b = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (a||b++)</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Answer: 0</p>
<p>逻辑短路，自增不执行</p>
</blockquote>
<h4 id="Q5-2"><a href="#Q5-2" class="headerlink" title="Q5"></a>Q5</h4><p>What’s the output of the following source code?</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; <span class="number">100</span>; i+=<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//something</span></span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; i;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Answer: 101</p>
<p>循环结束条件i&lt;100不满足时i=101</p>
</blockquote>
<h4 id="Q6-2"><a href="#Q6-2" class="headerlink" title="Q6"></a>Q6</h4><p>What’s the output of the source code</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">&#125; <span class="keyword">while</span>( x );</span><br><span class="line">cout &lt;&lt; x;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Answer: 0</p>
<p>执行了一次就润了</p>
</blockquote>
<h4 id="Q7-1"><a href="#Q7-1" class="headerlink" title="Q7"></a>Q7</h4><p>The following source code (empty in the parentheses) can be compiled successfully.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//some lines here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Answer: False</p>
<p>for至少要有条件项</p>
</blockquote>
<h4 id="Q8-1"><a href="#Q8-1" class="headerlink" title="Q8"></a>Q8</h4><p>What is the output of the following code?</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> num = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">switch</span> (num)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;4&#x27;</span>:</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Key 4&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;5&#x27;</span>:</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Key 5&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Undefined key.&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Answer: Undefined key.</p>
<p>注意char型的’5’≠int型的5</p>
</blockquote>
<h4 id="Q9"><a href="#Q9" class="headerlink" title="Q9"></a>Q9</h4><p>How many lines will be printed?</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">size_t</span> i = <span class="number">10</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Line &quot;</span> &lt;&lt; i &lt;&lt; endl;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Answer: $\infty$</p>
<p>size_t 自减到负数之后会“溢出”到最大整数，死循环</p>
</blockquote>
<h3 id="Data-Structures"><a href="#Data-Structures" class="headerlink" title="Data Structures"></a>Data Structures</h3><h4 id="Q1-3"><a href="#Q1-3" class="headerlink" title="Q1"></a>Q1</h4><p>What’s the output of the source code?</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> idx = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> numbers[<span class="number">4</span>] = &#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>&#125;;</span><br><span class="line">idx = <span class="number">-1</span>;</span><br><span class="line">cout &lt;&lt; numbers[idx] &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Answer: Unpredictable result</p>
<p>负下标越界，编译是能过，运行时要么段错误要么非法访问其他内存</p>
</blockquote>
<h4 id="Q2-3"><a href="#Q2-3" class="headerlink" title="Q2"></a>Q2</h4><p>What’s the output of the source code?</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> idx = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> numbers[<span class="number">4</span>] = &#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>&#125;;</span><br><span class="line">idx = <span class="number">4</span>;</span><br><span class="line">cout &lt;&lt; numbers[idx] &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Answer: Unpredictable result</p>
<p>下标越界，编译是能过，运行时要么段错误要么非法访问其他内存</p>
</blockquote>
<h4 id="Q3-3"><a href="#Q3-3" class="headerlink" title="Q3"></a>Q3</h4><p>What’s the output if you compile the following source code with C++11 standard?</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">string str&#123;<span class="string">&quot;hello&quot;</span>&#125;;</span><br><span class="line">cout &lt;&lt; str[<span class="number">1</span>] &lt;&lt; endl;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Answer: e</p>
<p>str[1]是第二个元素</p>
</blockquote>
<h4 id="Q4-3"><a href="#Q4-3" class="headerlink" title="Q4"></a>Q4</h4><p>What’s the output?</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> str[<span class="number">16</span>] = &#123;<span class="string">&quot;C++&quot;</span>&#125;;</span><br><span class="line">cout &lt;&lt; <span class="built_in">strlen</span>(str) &lt;&lt; endl;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Answer: 3</p>
<p>赋值的时候末尾带了个’\0’，strlen读到’\0’就停了</p>
</blockquote>
<h4 id="Q5-3"><a href="#Q5-3" class="headerlink" title="Q5"></a>Q5</h4><p>What’s the output?</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> str1[<span class="number">16</span>] = &#123;<span class="string">&quot;C++&quot;</span>&#125;;</span><br><span class="line"><span class="type">char</span> str2[<span class="number">16</span>];</span><br><span class="line">str2 = str1;</span><br><span class="line">cout &lt;&lt; str2 &lt;&lt; endl;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Answer: Compilation error.</p>
<p>数组相当于常量指针，不能直接对其赋值</p>
</blockquote>
<h4 id="Q6-3"><a href="#Q6-3" class="headerlink" title="Q6"></a>Q6</h4><p>What’s the output?</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">string str1 = &#123;<span class="string">&quot;C++&quot;</span>&#125;;</span><br><span class="line">string str2;</span><br><span class="line">str2 = str1;</span><br><span class="line">cout &lt;&lt; str2 &lt;&lt; endl;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Answer: C++</p>
<p>但是string可以直接赋值</p>
</blockquote>
<h4 id="Q7-2"><a href="#Q7-2" class="headerlink" title="Q7"></a>Q7</h4><p>What’s the output?</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="title class_">twonumbers</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n[<span class="number">2</span>];</span><br><span class="line">    <span class="type">double</span> d;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    twonumbers tn;</span><br><span class="line">    tn.d = <span class="number">1.23</span>;</span><br><span class="line">    tn.n[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    tn.n[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    cout &lt;&lt; tn.d &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Answer: 0</p>
<p>union各成员共用一块内存，所占用的内存长度等于最长的成员的内存长度，通过n修改为0后用d访问也是0</p>
</blockquote>
<h4 id="Q8-2"><a href="#Q8-2" class="headerlink" title="Q8"></a>Q8</h4><p>The output of the following code is:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">bool</span> male;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="type">char</span> label;</span><br><span class="line">&#125;;</span><br><span class="line">std::cout &lt;&lt; <span class="built_in">sizeof</span>(<span class="keyword">struct</span> Person);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Answer: 12</p>
<p>虽然bool和char都只占用一字节，但被占用4字节的int分隔开，结构体会为了对齐而给bool和char也分配4字节，总共12字节</p>
</blockquote>
<h3 id="Pointers-and-Dynamic-Memory-Management"><a href="#Pointers-and-Dynamic-Memory-Management" class="headerlink" title="Pointers and Dynamic Memory Management"></a>Pointers and Dynamic Memory Management</h3><h4 id="Q1-4"><a href="#Q1-4" class="headerlink" title="Q1"></a>Q1</h4><p>The following code can be compiled successfuly.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> value = <span class="number">0.0</span>;</span><br><span class="line"><span class="type">double</span> *<span class="type">const</span> p = &amp;value;</span><br><span class="line">p[<span class="number">0</span>] = <span class="number">2.0</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Answer: True</p>
<p>type *const代表指针是常量，但指针所指的数据可以修改</p>
</blockquote>
<h4 id="Q2-4"><a href="#Q2-4" class="headerlink" title="Q2"></a>Q2</h4><p>The following source code is correct and cannot cause bugs.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> *pint = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="number">8</span> * <span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line"><span class="type">char</span> *pc = (<span class="type">char</span> *)pint;</span><br><span class="line">pc[<span class="number">8</span>] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">*(pc + <span class="number">8</span>) = <span class="string">&#x27;b&#x27;</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Answer: True</p>
<p>指针类型的转换，通过指针操作内存均合法，没有越界等问题</p>
</blockquote>
<h4 id="Q3-4"><a href="#Q3-4" class="headerlink" title="Q3"></a>Q3</h4><p>The following code can be compiled successfuly.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> value = <span class="number">0.0</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> *p = &amp;value;</span><br><span class="line">value = <span class="number">2.0</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Answer: True</p>
<p>const type <em>p和type const </em>p表示指针所指内容是常量，无法通过指针更改</p>
<p>但可以通过其他方式修改内容</p>
</blockquote>
<h4 id="Q4-4"><a href="#Q4-4" class="headerlink" title="Q4"></a>Q4</h4><p>The following source code is correct.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> *ptr;</span><br><span class="line">*ptr = <span class="number">3</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Answer: False</p>
<p>不能对未分配内存的指针进行赋值</p>
</blockquote>
<h4 id="Q5-4"><a href="#Q5-4" class="headerlink" title="Q5"></a>Q5</h4><p>What’s the output of the following code on 64bit OS and CPU?</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> *numbers = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">8</span>];</span><br><span class="line">cout &lt;&lt; <span class="built_in">sizeof</span>(numbers) &lt;&lt; endl;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Answer: 8</p>
<p>64位环境下，指针长度为8字节</p>
</blockquote>
<h4 id="Q6-4"><a href="#Q6-4" class="headerlink" title="Q6"></a>Q6</h4><p>What’s the output of the following code?</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> *numbers = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">8</span>];</span><br><span class="line"><span class="type">char</span> *pc = (<span class="type">char</span> *)numbers;</span><br><span class="line">*numbers = <span class="number">0x0A0B0C0D</span>;</span><br><span class="line">cout &lt;&lt; (<span class="type">int</span>)pc[<span class="number">3</span>] &lt;&lt; endl;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Answer: 10</p>
<p>第三行给number[0]赋值0x0A0B0C0D，一个int对应四个char，pc[3]代表其中第四个字节，即0x0A，转换后为10</p>
</blockquote>
<h4 id="Q7-3"><a href="#Q7-3" class="headerlink" title="Q7"></a>Q7</h4><p>What’s the output of the following code on 64bit OS and CPU?</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> numbers[<span class="number">8</span>];</span><br><span class="line">cout &lt;&lt; <span class="built_in">sizeof</span>(numbers) &lt;&lt; endl;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Answer: 32</p>
<p>对于数组，sizeof会返回其所指内存的大小</p>
</blockquote>
<h3 id="Basics-of-Functions"><a href="#Basics-of-Functions" class="headerlink" title="Basics of Functions"></a>Basics of Functions</h3><h4 id="Q1-5"><a href="#Q1-5" class="headerlink" title="Q1"></a>Q1</h4><p>What’s the output of the following code?</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">float</span> <span class="title">foo</span><span class="params">(<span class="type">float</span> *p, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p[<span class="number">0</span>] = <span class="number">1.0f</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">float</span> values[<span class="number">4</span>] = &#123;<span class="number">3.0f</span>, <span class="number">4.0f</span>, <span class="number">5.0f</span>, <span class="number">6.0f</span>&#125;;</span><br><span class="line">    <span class="built_in">foo</span>(values + <span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">    cout &lt;&lt; *values &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; *values + <span class="number">2</span> &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; *(values + <span class="number">2</span>) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; values[<span class="number">2</span>] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Answer: 3 5 1 1</p>
<p>四个数分别为 v[0], v[0]+2, v[2], v[2]，注意优先级</p>
</blockquote>
<h4 id="Q2-5"><a href="#Q2-5" class="headerlink" title="Q2"></a>Q2</h4><p>What’s the output of the following source code?</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">people</span></span><br><span class="line">&#123;</span><br><span class="line">    string name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(people &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p.name = <span class="string">&quot;No name&quot;</span>;</span><br><span class="line">    p.age = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    people p;</span><br><span class="line">    p.age = <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">init</span>(p);</span><br><span class="line">    cout &lt;&lt; p.age &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Answer: 0</p>
<p>p作为引用参数传入init，age被修改为0</p>
</blockquote>
<h4 id="Q3-5"><a href="#Q3-5" class="headerlink" title="Q3"></a>Q3</h4><p>What’s the output?</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">area</span><span class="params">(<span class="type">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x *= x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">area</span>(n);</span><br><span class="line">    std::cout &lt;&lt; n &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Answer: 100</p>
<p>n作为引用参数传入area，乘方</p>
</blockquote>
<h4 id="Q4-5"><a href="#Q4-5" class="headerlink" title="Q4"></a>Q4</h4><p>What’s the output of the following code?</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">people</span></span><br><span class="line">&#123;</span><br><span class="line">    string name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(people *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p.name = <span class="string">&quot;No name&quot;</span>;</span><br><span class="line">    p.age = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    people p;</span><br><span class="line">    p.age = <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">init</span>(p);</span><br><span class="line">    cout &lt;&lt; p.age &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Answer: Compilation error</p>
<p>init函数要求传入指针，但传入的是people结构体变量</p>
</blockquote>
<h4 id="Q5-5"><a href="#Q5-5" class="headerlink" title="Q5"></a>Q5</h4><p>What’s the output of the following code?</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">float</span> <span class="title">area</span><span class="params">(<span class="type">float</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">float</span> value = <span class="number">3.0f</span>;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">area</span>(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Answer: 9</p>
<p>3.0f*3.0f=9.0f</p>
</blockquote>
<h4 id="Q6-5"><a href="#Q6-5" class="headerlink" title="Q6"></a>Q6</h4><p> What’s the output of the following code?</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">float</span> <span class="title">area</span><span class="params">(<span class="type">float</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x = x * x;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">float</span> value = <span class="number">3.0f</span>;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">area</span>(value) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; value &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Answer: 9 9</p>
<p>通过引用修改了x，并返回了修改后的x</p>
</blockquote>
<h4 id="Q7-4"><a href="#Q7-4" class="headerlink" title="Q7"></a>Q7</h4><p>What’s the ouput of function sum()?</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> cookies[<span class="number">8</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">16</span>, <span class="number">32</span>, <span class="number">64</span>, <span class="number">128</span>&#125;;</span><br><span class="line">    <span class="type">int</span> n = <span class="built_in">sum</span>(cookies, <span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="keyword">sizeof</span> arr;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Answer: 4 or 8</p>
<p>传入参数实际上是指针，指针占用字节数可能是4或8</p>
</blockquote>
<h4 id="Q8-3"><a href="#Q8-3" class="headerlink" title="Q8"></a>Q8</h4><p>What’s the output of the following code?</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">float</span> <span class="title">area</span><span class="params">(<span class="type">float</span> *x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> *x * *x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">float</span> value = <span class="number">3.0f</span>;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">area</span>(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Answer: Compilation error</p>
<p>要求传入浮点型指针，实际传入浮点型变量</p>
</blockquote>
<h4 id="Q9-1"><a href="#Q9-1" class="headerlink" title="Q9"></a>Q9</h4><p>What’s the output of the following code?</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">people</span></span><br><span class="line">&#123;</span><br><span class="line">    string name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(people p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p.name = <span class="string">&quot;No name&quot;</span>;</span><br><span class="line">    p.age = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    people p;</span><br><span class="line">    p.age = <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">init</span>(p);</span><br><span class="line">    cout &lt;&lt; p.age &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Answer: -1</p>
<p>函数参数是结构体变量，在传入后是对变量的拷贝进行操作，不影响变量本身</p>
</blockquote>
<h4 id="Q10"><a href="#Q10" class="headerlink" title="Q10"></a>Q10</h4><p> What’s the output of the following code?</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">people</span></span><br><span class="line">&#123;</span><br><span class="line">    string name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(people *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p-&gt;name = <span class="string">&quot;No name&quot;</span>;</span><br><span class="line">    p-&gt;age = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    people p;</span><br><span class="line">    p.age = <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">init</span>(&amp;p);</span><br><span class="line">    cout &lt;&lt; p.age &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Answer: 0</p>
<p>传入参数是指针，通过指针对结构体成员变量age进行操作</p>
</blockquote>
<h3 id="Advances-in-Functions"><a href="#Advances-in-Functions" class="headerlink" title="Advances in Functions"></a>Advances in Functions</h3><h4 id="Q1-6"><a href="#Q1-6" class="headerlink" title="Q1"></a>Q1</h4><p> The following declaration correctly defines some default arguments</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">harpo</span><span class="params">(<span class="type">int</span> n = <span class="number">3</span>, <span class="type">int</span> m, <span class="type">int</span> k = <span class="number">3</span>)</span></span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Answer: False</p>
<p>所有默认参数必须集中放在最后</p>
</blockquote>
<h4 id="Q2-6"><a href="#Q2-6" class="headerlink" title="Q2"></a>Q2</h4><p>The functions and a function pointer are declared as follows. Which answers are correct?</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">float</span> <span class="title">norm</span><span class="params">(<span class="type">float</span> x, <span class="type">float</span> y)</span></span>; <span class="comment">// declaration</span></span><br><span class="line"><span class="built_in">float</span> (*norm_ptr)(<span class="type">float</span> x, <span class="type">float</span> y); <span class="comment">// norm_ptr is a function pointer</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>Answer: </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">norm_ptr = &amp;norm;</span><br><span class="line">(*norm_ptr)(<span class="number">-3.0f</span>, <span class="number">4.0f</span>);</span><br><span class="line"><span class="built_in">norm_ptr</span>(<span class="number">-3.0f</span>, <span class="number">4.0f</span>);</span><br><span class="line">norm_ptr = norm;</span><br><span class="line">(*norm_ptr)(<span class="number">-3.0f</span>, <span class="number">4.0f</span>);</span><br><span class="line"><span class="built_in">norm_ptr</span>(<span class="number">-3.0f</span>, <span class="number">4.0f</span>);</span><br></pre></td></tr></table></figure>
<p>大概意思就是函数指针和函数名在使用时可以适当混用</p>
</blockquote>
<h4 id="Q3-6"><a href="#Q3-6" class="headerlink" title="Q3"></a>Q3</h4><p>Function overloading is that multiple functions share the same function name but different signatures as the two functions below:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">float</span> <span class="title">foo</span><span class="params">(<span class="type">float</span> arg)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">(<span class="type">double</span> arg)</span></span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Answer: True</p>
<p>你说得对</p>
</blockquote>
<h4 id="Q4-6"><a href="#Q4-6" class="headerlink" title="Q4"></a>Q4</h4><p>There is a function template. The specialization is correctly implemented in the following code.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function">T <span class="title">sum</span><span class="params">(T x, T y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;The input type is &quot;</span> &lt;&lt; <span class="built_in">typeid</span>(T).<span class="built_in">name</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// Specialization for Point + Point operation</span></span><br><span class="line"><span class="keyword">template</span></span><br><span class="line">Point <span class="built_in">sum</span>&lt;Point&gt;(Point pt1, Point pt2)</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;The input type is &quot;</span> &lt;&lt; <span class="built_in">typeid</span>(pt1).<span class="built_in">name</span>() &lt;&lt; endl;</span><br><span class="line">    Point pt;</span><br><span class="line">    pt.x = pt1.x + pt2.x;</span><br><span class="line">    pt.y = pt1.y + pt2.y;</span><br><span class="line">    <span class="keyword">return</span> pt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Answer: False</p>
<p>特例化应该这么写：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="function">Point <span class="title">sum</span><span class="params">(Point pt1, Point pt2)</span></span></span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="Q5-6"><a href="#Q5-6" class="headerlink" title="Q5"></a>Q5</h4><p>The following code correctly defines a function template:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(T &amp;a, T &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T temp; </span><br><span class="line">    temp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Answer: True</p>
<p>你说得对</p>
</blockquote>
<h3 id="Basics-of-Classes"><a href="#Basics-of-Classes" class="headerlink" title="Basics of Classes"></a>Basics of Classes</h3><h4 id="Q1-7"><a href="#Q1-7" class="headerlink" title="Q1"></a>Q1</h4><p>The <strong>this</strong> pointer points to the object and can be used to invoke a member as in the following code.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> num;    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">foo</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//other members</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Answer: False</p>
<p>静态函数无法调用非静态对象的成员，逻辑上不可行</p>
</blockquote>
<h4 id="Q2-7"><a href="#Q2-7" class="headerlink" title="Q2"></a>Q2</h4><p>What’s the output of the following code?</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    string name;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Person p;</span><br><span class="line">    p.name = <span class="string">&quot;No name&quot;</span>;</span><br><span class="line">    cout &lt;&lt; p.name;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Answer: Compilation error</p>
<p>class成员在未声明为public时默认private，无法被外部直接调用</p>
</blockquote>
<h4 id="Q3-7"><a href="#Q3-7" class="headerlink" title="Q3"></a>Q3</h4><p>What’s the output of the source code?</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Hello</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> value;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> </span>&#123; <span class="keyword">return</span> i + j; &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setValue</span><span class="params">(<span class="type">int</span> v)</span> </span>&#123; value = v; &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getValue</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> value; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Hello h1, h2;</span><br><span class="line">    h1.<span class="built_in">setValue</span>(<span class="number">5</span>);</span><br><span class="line">    cout &lt;&lt; h2.<span class="built_in">getValue</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Answer: Link error</p>
<p>在对类的静态变量做操作前，需要先在类外进行定义。</p>
</blockquote>
<h4 id="Q4-7"><a href="#Q4-7" class="headerlink" title="Q4"></a>Q4</h4><p>A class is declared as follows. Please select correct answers for creating a variable.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Stock</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Stock</span>(); </span><br><span class="line">    <span class="built_in">Stock</span>(<span class="type">const</span> std::string &amp;co, <span class="type">long</span> n = <span class="number">0</span>, <span class="type">double</span> pr = <span class="number">0.0</span>);</span><br><span class="line">    ~<span class="built_in">Stock</span>(); </span><br><span class="line">    <span class="comment">//other members</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Answer: </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Stock st1;<span class="comment">//OK</span></span><br><span class="line"><span class="function">Stock <span class="title">st2</span><span class="params">(<span class="string">&quot;A&quot;</span>,<span class="number">3</span>,<span class="number">2.0f</span>)</span></span>;<span class="comment">//OK</span></span><br><span class="line">Stock st3 = <span class="built_in">Stock</span>(<span class="string">&quot;A&quot;</span>,<span class="number">3</span>,<span class="number">2.0f</span>);<span class="comment">//OK</span></span><br><span class="line">Stock st4 = (<span class="string">&quot;A&quot;</span>,,<span class="number">2.0f</span>);<span class="comment">//Error</span></span><br></pre></td></tr></table></figure>
<p>无参构造器，含参构造器，默认参数不能间隔省略</p>
</blockquote>
<h4 id="Q5-7"><a href="#Q5-7" class="headerlink" title="Q5"></a>Q5</h4><p> What’s the output of the following source code?</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Hello</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> value;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> </span>&#123; <span class="keyword">return</span> i + j; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(Hello) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Answer: 4</p>
<p>用sizeof对类进行操作时，其大小为对齐后的非静态成员数据的类型大小之和</p>
<p>如果是空类，占1字节</p>
<p>如果含有虚函数，则额外占有4字节虚函数表大小</p>
<p>与构造、析构函数等成员函数、静态变量无关</p>
</blockquote>
<h3 id="Advances-in-Classes"><a href="#Advances-in-Classes" class="headerlink" title="Advances in Classes"></a>Advances in Classes</h3><h4 id="Q1-8"><a href="#Q1-8" class="headerlink" title="Q1"></a>Q1</h4><p>Class Stonewt is declared as follows. </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Stonewt</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">//some members</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Stonewt</span>(<span class="type">double</span> lbs);</span><br><span class="line">    <span class="built_in">Stonewt</span>(<span class="type">int</span> stn, <span class="type">double</span> lbs);</span><br><span class="line">    <span class="built_in">Stonewt</span>();</span><br><span class="line">    ~<span class="built_in">Stonewt</span>();</span><br><span class="line">    <span class="function"><span class="keyword">operator</span> <span class="title">int</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">operator</span> <span class="title">double</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>Which function will be invoked by the following line of code ?</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Stonewt wt = <span class="number">120</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Answer: Stonewt(double lbs);</p>
<p>隐式转换后调用上述构造器，决定用哪个构造器发生在编译过程</p>
</blockquote>
<h4 id="Q2-8"><a href="#Q2-8" class="headerlink" title="Q2"></a>Q2</h4><p>Class Stonewt is declared as above. </p>
<p>Which function will be invoked by the following line of code ?</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">Stonewt <span class="title">wt</span><span class="params">(<span class="number">120</span>)</span></span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Answer: Stonewt(double lbs);</p>
<p><del>梅开二度</del></p>
</blockquote>
<h4 id="Q3-8"><a href="#Q3-8" class="headerlink" title="Q3"></a>Q3</h4><p>Class Stonewt is declared as above. </p>
<p>Which function will be invoked by the following line of code ?</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">wt = <span class="number">120.0</span>; <span class="comment">//wt is an object of type Stonewt</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>Answer: Stonewt(double lbs);</p>
<p><del>三连加关注，CS不迷路</del></p>
</blockquote>
<h4 id="Q4-8"><a href="#Q4-8" class="headerlink" title="Q4"></a>Q4</h4><p>Class Stonewt is declared as above. </p>
<p>Which function will be invoked by the following line of code ?</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> f = wt; <span class="comment">//wt is an object of type Stonewt</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>Answer: operator double() const;</p>
<p>隐式转换再赋值</p>
</blockquote>
<h4 id="Q5-8"><a href="#Q5-8" class="headerlink" title="Q5"></a>Q5</h4><p>We can change operators’ precedence by overloading.</p>
<blockquote>
<p>Answer: False</p>
<p>运算含义可以改，但优先级改不了</p>
</blockquote>
<h4 id="Q6-6"><a href="#Q6-6" class="headerlink" title="Q6"></a>Q6</h4><p>If we define a memeber function as follows for class Time</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Time Time::<span class="keyword">operator</span>*(<span class="type">double</span> mult) <span class="type">const</span></span><br></pre></td></tr></table></figure>
<p>then we can calculate as follows</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">a = <span class="number">3.3</span> * b;<span class="comment">//a and b are objects of type Time</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>Answer: False</p>
<p>重载的乘号，左边Time右边double，反过来不行</p>
</blockquote>
<h4 id="Q7-5"><a href="#Q7-5" class="headerlink" title="Q7"></a>Q7</h4><p>Assignment operator ‘=’ can be overloaded by a non-member function.</p>
<blockquote>
<p>Answer: False</p>
<p>赋值符是一个特例，只能作为成员函数被重载</p>
</blockquote>
<h4 id="Q8-4"><a href="#Q8-4" class="headerlink" title="Q8"></a>Q8</h4><p>If the friend function is defined as in the following source code, it is a member function in the class.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Time</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> hours;</span><br><span class="line">    <span class="type">int</span> minutes;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Time</span>();</span><br><span class="line">    <span class="built_in">Time</span>(<span class="type">int</span> h, <span class="type">int</span> m = <span class="number">0</span>);</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">AddMin</span><span class="params">(<span class="type">int</span> m)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">AddHr</span><span class="params">(<span class="type">int</span> h)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Reset</span><span class="params">(<span class="type">int</span> h = <span class="number">0</span>, <span class="type">int</span> m = <span class="number">0</span>)</span></span>;</span><br><span class="line">    Time <span class="keyword">operator</span>+(<span class="type">const</span> Time &amp;t) <span class="type">const</span>;</span><br><span class="line">    Time <span class="keyword">operator</span>-(<span class="type">const</span> Time &amp;t) <span class="type">const</span>;</span><br><span class="line">    Time <span class="keyword">operator</span>*(<span class="type">double</span> n) <span class="type">const</span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Show</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="keyword">friend</span> Time <span class="keyword">operator</span>*(<span class="type">double</span> mult, Time in);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Answer: False</p>
<p>友元函数需要在类内声明，私有公有没区别，也可以在类内定义，但友元终究不是成员</p>
</blockquote>
<h4 id="Q9-2"><a href="#Q9-2" class="headerlink" title="Q9"></a>Q9</h4><p>operator+() overloads the + operator, and it can only be used for mathematical addition.</p>
<blockquote>
<p>Answer: False</p>
<p>你想把加号重载成乘法运算符也没人拦你（</p>
</blockquote>
<h4 id="Q10-1"><a href="#Q10-1" class="headerlink" title="Q10"></a>Q10</h4><p>A conversion function is defined outside of the declaration of class Stonewt as follow.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">Stonewt::<span class="keyword">operator</span> <span class="title">double</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> pounds;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Answer: It’s correctly defined.</p>
<p>冇问题</p>
</blockquote>
<h3 id="Dynamic-Memory-Management-in-Classes"><a href="#Dynamic-Memory-Management-in-Classes" class="headerlink" title="Dynamic Memory Management in Classes"></a>Dynamic Memory Management in Classes</h3><h4 id="Q1-9"><a href="#Q1-9" class="headerlink" title="Q1"></a>Q1</h4><p>Please read the following code and choose correct answers:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> *name;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Person</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        name = <span class="keyword">new</span> <span class="type">char</span>[<span class="number">128</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Person</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Person p1;</span><br><span class="line">    Person p2;</span><br><span class="line">    p1 = p2;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Answer: </p>
<ul>
<li>The code can be compiled without error.</li>
<li>Runtime error.</li>
<li>It can cause memory double free problem.</li>
<li>It can cause memory leak.</li>
</ul>
<p>编译是能过，但是由于p1和p2的析构函数会对name做两次delete，所以会双重释放运行错误，而且p1原本申请的char[128]会没有指针指向它，所以会有内存泄漏风险</p>
</blockquote>
<h4 id="Q2-9"><a href="#Q2-9" class="headerlink" title="Q2"></a>Q2</h4><p>If you do not define a default constructor for a class explicitly, then no default constructor for that class.</p>
<blockquote>
<p>Answer: False</p>
<p>如果你没有显式定义任何一个构造器，类会隐含一个默认无参构造器</p>
</blockquote>
<h4 id="Q3-9"><a href="#Q3-9" class="headerlink" title="Q3"></a>Q3</h4><p>If assignment operator is not defined in class Person, the following code will invoke default assignment operator.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">p1 = p2 = p3; <span class="comment">//p1, p2 and p3 are objects of type Person</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>Answer: True</p>
<p>如果没有重载赋值符，则会调用默认赋值符</p>
</blockquote>
<h4 id="Q4-9"><a href="#Q4-9" class="headerlink" title="Q4"></a>Q4</h4><p>For class Person, which of the constructors is its default constructor?</p>
<blockquote>
<p>Answer: </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Person::<span class="built_in">Person</span>(<span class="type">int</span> n = <span class="number">0</span>);</span><br></pre></td></tr></table></figure>
<p>有参数，但是所有参数都有默认值，就是默认构造器</p>
</blockquote>
<h4 id="Q5-9"><a href="#Q5-9" class="headerlink" title="Q5"></a>Q5</h4><p>You can define two constructors as follows for class Person</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Person</span>()&#123;...&#125;</span><br><span class="line"><span class="built_in">Person</span>(<span class="type">int</span> m = <span class="number">0</span>) &#123;...&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Answer: False</p>
<p>那么问题来了，猜猜看Person()会调用哪个？</p>
</blockquote>
<h4 id="Q6-7"><a href="#Q6-7" class="headerlink" title="Q6"></a>Q6</h4><p>For class Person, which of the constructors is a copy constructor?</p>
<blockquote>
<p>Answer:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Person::<span class="built_in">Person</span>(<span class="type">const</span> Person &amp; p);</span><br></pre></td></tr></table></figure>
<p>将常量引用作为参数的构造器是复制构造器</p>
</blockquote>
<h3 id="Class-Inheritance"><a href="#Class-Inheritance" class="headerlink" title="Class Inheritance"></a>Class Inheritance</h3><h4 id="Q1-10"><a href="#Q1-10" class="headerlink" title="Q1"></a>Q1</h4><p> What’s the output?</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> weight;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Animal</span>(<span class="type">int</span> w = <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        weight = w;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; weight &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> : <span class="keyword">public</span> Animal</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Dog</span>(<span class="type">int</span> w = <span class="number">0</span>) : <span class="built_in">Animal</span>(w) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Dog &quot;</span>;</span><br><span class="line">        Animal::<span class="built_in">print</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">speak</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;wangwang&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Dog <span class="title">dog</span><span class="params">(<span class="number">5</span>)</span></span>;</span><br><span class="line">    Animal *p = &amp;dog;</span><br><span class="line">    p-&gt;<span class="built_in">print</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Answer: Dog 5</p>
<p>由于覆写了虚函数print()，主函数语句调用的是Dog::print()，而Dog::print()再调用了Animal::print()</p>
</blockquote>
<h4 id="Q2-10"><a href="#Q2-10" class="headerlink" title="Q2"></a>Q2</h4><p>What is the output?</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> weight;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Animal</span>(<span class="type">int</span> w = <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        weight = w;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; weight &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> : <span class="keyword">public</span> Animal</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Dog</span>(<span class="type">int</span> w = <span class="number">0</span>) : <span class="built_in">Animal</span>(w) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Dog &quot;</span>;</span><br><span class="line">        Animal::<span class="built_in">print</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">speak</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;wangwang&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Dog <span class="title">dog</span><span class="params">(<span class="number">5</span>)</span></span>;</span><br><span class="line">    Animal *p = &amp;dog;</span><br><span class="line">    p-&gt;<span class="built_in">print</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Answer: 5</p>
<p>由于p是Animal类，其成员函数均为Animal类中的定义</p>
</blockquote>
<h4 id="Q3-10"><a href="#Q3-10" class="headerlink" title="Q3"></a>Q3</h4><p>What is the output?</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> weight;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Animal</span>(<span class="type">int</span> w = <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        weight = w;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; weight &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> : <span class="keyword">public</span> Animal</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Dog</span>(<span class="type">int</span> w = <span class="number">0</span>) : <span class="built_in">Animal</span>(w) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Dog &quot;</span>;</span><br><span class="line">        Animal::<span class="built_in">print</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">speak</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;wangwang&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Dog <span class="title">dog</span><span class="params">(<span class="number">5</span>)</span></span>;</span><br><span class="line">    Animal *p = &amp;dog;</span><br><span class="line">    p-&gt;<span class="built_in">speak</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Answer: Compilation error</p>
<p>p是Animal类对象，speak()是其子类的函数，p的成员函数编译时静态绑定至Animal定义，因此p未定义speak()函数。</p>
</blockquote>
<h3 id="Class-Templates-and-std-Library"><a href="#Class-Templates-and-std-Library" class="headerlink" title="Class Templates and std Library"></a>Class Templates and std Library</h3><h4 id="Q1-11"><a href="#Q1-11" class="headerlink" title="Q1"></a>Q1</h4><p>Please choose the right answer(s) for declaring a class template</p>
<blockquote>
<p>Answer: </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>  &lt;<span class="keyword">class</span> <span class="title class_">Type</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ClassName</span>&#123;...&#125;</span><br><span class="line"><span class="keyword">template</span>  &lt;<span class="keyword">typename</span> Type&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ClassName</span>&#123;...&#125;</span><br></pre></td></tr></table></figure>
<p>本来是class的，在众人要求下添加了typename关键字，于是两个都能用</p>
</blockquote>
<h4 id="Q2-11"><a href="#Q2-11" class="headerlink" title="Q2"></a>Q2</h4><p>Matx and Matx12f are declared in the following figure. Please choose the correct statement(s).</p>
<p><img src="https://s2.loli.net/2023/01/09/yTuULq2IAljWaFz.png" alt="image.png"></p>
<blockquote>
<p>Answer: Matx is a class tempate, Matx12f is a template class.</p>
<p>不准确地来说，模板类是由类模板衍生出的类</p>
</blockquote>
<h3 id="Error-Handling"><a href="#Error-Handling" class="headerlink" title="Error Handling"></a>Error Handling</h3><h4 id="Q1-12"><a href="#Q1-12" class="headerlink" title="Q1"></a>Q1</h4><p>A try block can be followed by multiple catch blocks.</p>
<blockquote>
<p>Answer: True</p>
<p>你说得对，而且catch括号内的类型不会隐式转换，但是子类可以被父类catch</p>
</blockquote>
<h4 id="Q2-12"><a href="#Q2-12" class="headerlink" title="Q2"></a>Q2</h4><p>The following source code <strong>cannot</strong> be compiled successfully.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">double</span> <span class="title">gmean</span><span class="params">(<span class="type">double</span> a, <span class="type">double</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a &lt; <span class="number">0</span> || b &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="built_in">string</span>(<span class="string">&quot;bad arguments&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> std::<span class="built_in">sqrt</span>(a*b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">gmean</span>(<span class="number">3</span>, <span class="number">-3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Answer: True</p>
<p>没有catch的try是不完整的</p>
</blockquote>
<h4 id="Q3-11"><a href="#Q3-11" class="headerlink" title="Q3"></a>Q3</h4><p> The following code <strong>cannot</strong> be compiled successfully since ‘try’ is commented.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">double</span> <span class="title">gmean</span><span class="params">(<span class="type">double</span> a, <span class="type">double</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a &lt; <span class="number">0</span> || b &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="built_in">string</span>(<span class="string">&quot;bad arguments&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> std::<span class="built_in">sqrt</span>(a*b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//try</span></span><br><span class="line">    <span class="comment">//&#123;</span></span><br><span class="line">        <span class="built_in">gmean</span>(<span class="number">3</span>, <span class="number">-3</span>);</span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Answer: False</p>
<p>throw了可以不try-catch，不过一抛就终止运行而已</p>
</blockquote>
<h4 id="Q4-10"><a href="#Q4-10" class="headerlink" title="Q4"></a>Q4</h4><p>When an exception is thrown, the program must be terminated.</p>
<blockquote>
<p>Answer: False</p>
<p>如果抛的异常被catch住了，程序就可以继续运行catch内的内容</p>
</blockquote>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>CS102 JAVA (A) 项目设计报告 Othello</title>
    <url>/2022/08/08/CS102_%E9%A1%B9%E7%9B%AE%E8%AE%BE%E8%AE%A1%E6%8A%A5%E5%91%8A_Othello/</url>
    <content><![CDATA[<p><img src="https://s2.loli.net/2022/08/08/jOA9dFGzKCVuMs6.png" alt="恋心组赛高！" style="zoom: 50%;" /></p>
<h2 id="Part-I-团队成员"><a href="#Part-I-团队成员" class="headerlink" title="Part I. 团队成员"></a>Part I. 团队成员</h2><div class="table-container">
<table>
<thead>
<tr>
<th>姓名</th>
<th>学号</th>
<th>最终版分工</th>
<th>贡献率</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/GuTaoZi">咕桃</a></td>
<td>-</td>
<td>前端：美工，音效，联网</td>
<td>200%</td>
</tr>
<tr>
<td><a href="https://github.com/RuixiangJiang">江睿翔</a></td>
<td>-</td>
<td>后端：逻辑，存档，BOT</td>
<td>200%</td>
</tr>
</tbody>
</table>
</div>
<p>两个人本着<strong>不满意就重来</strong>的想法，在四周时间里重构了四版<del>(前三版的分工是反过来的，沟通后交换分工，一周从零搓了一版)</del>，熬了挺多的夜，最终如愿拿满，但是距离预期效果还挺远的<del>以及有一堆锅还没修</del>。</p>
<h2 id="Part-II-启动器"><a href="#Part-II-启动器" class="headerlink" title="Part II. 启动器"></a>Part II. 启动器</h2><p><img src="https://s2.loli.net/2022/08/08/FrTohZVQlHx1fmg.png" alt="VE__YQGD_4TSHD8SS4FN_Q4.png" style="zoom: 33%;" /></p>
<p>启动器界面设计模仿了龙腾猫跃的PCL2 Minecraft启动器，扁平风的设计很Win10。</p>
<p><del>因为美工GUI水平有限，</del>图片上除了两个文本框和背景其他所有的元素都是JButton（太万能了</p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>CS205 C/C++ Project04设计报告 C语言矩阵乘法</title>
    <url>/2022/11/27/CS205_%E9%A1%B9%E7%9B%AE%E8%AE%BE%E8%AE%A1%E6%8A%A5%E5%91%8A_Matrix%20Multiplication%20in%20C/</url>
    <content><![CDATA[<h2 id="Part-0-团队成员"><a href="#Part-0-团队成员" class="headerlink" title="Part 0. 团队成员"></a>Part 0. <del>团队</del>成员</h2><div class="table-container">
<table>
<thead>
<tr>
<th>姓名</th>
<th>学号</th>
<th><del>贡献率</del></th>
</tr>
</thead>
<tbody>
<tr>
<td>咕桃</td>
<td>-</td>
<td><del>100%</del></td>
</tr>
</tbody>
</table>
</div>
<h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">CS205_Project04</span><br><span class="line">│  CMakeLists.txt</span><br><span class="line">│  README.md</span><br><span class="line">│</span><br><span class="line">├─build</span><br><span class="line">│	   <span class="comment">//makefile here</span></span><br><span class="line">├─doc</span><br><span class="line">│      Report.pdf</span><br><span class="line">│</span><br><span class="line">├─inc</span><br><span class="line">│      matmul.h</span><br><span class="line">│      matrix.h</span><br><span class="line">│</span><br><span class="line">└─src</span><br><span class="line">        benchmark.c</span><br><span class="line">        matmul.c</span><br><span class="line">        matrix.c</span><br></pre></td></tr></table></figure>
<h3 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h3><p>运行本项目前，请预先安装OpenBLAS与OpenMP。您可以使用以下命令下载本项目：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git clone https://github.com/GuTaoZi/CS205_Project04.git</span><br></pre></td></tr></table></figure>
<p>下载完成后，请在<code>CMakeLists.txt</code>中调整OpenBLAS目录，您也可以根据您的系统架构调整编译选项。</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include_directories</span>(/usr/local/<span class="keyword">include</span> ./inc)</span><br><span class="line"><span class="keyword">link_libraries</span>(/usr/local/lib/libopenblas.a)</span><br></pre></td></tr></table></figure>
<p>使用以下命令编译、运行可执行文件<code>matmul</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd build</span><br><span class="line">cmake ..</span><br><span class="line">make</span><br><span class="line">./matmul</span><br></pre></td></tr></table></figure>
<h2 id="Part-1-Analysis"><a href="#Part-1-Analysis" class="headerlink" title="Part 1 - Analysis"></a>Part 1 - Analysis</h2><h3 id="题目重述-amp-主要思路"><a href="#题目重述-amp-主要思路" class="headerlink" title="题目重述&amp;主要思路"></a>题目重述&amp;主要思路</h3><p>本题目要求<strong>使用C语言</strong>实现正确而尽可能高效的矩阵乘法，使用<code>OpenMP</code>, <code>SIMD</code>等工具提升效率，并与<code>OpenBLAS</code>库中的矩阵乘法在各平台进行效率比较。</p>
<p>根据题目描述，题目要求的矩阵乘法需要支持的主要功能为：</p>
<ol>
<li>实现朴素乘法，用于检验高效矩阵乘法的正确性</li>
<li><code>OpenMP</code>, <code>SIMD</code>等工具实现提升效率的矩阵乘法</li>
<li>测试$16\times16$、$128\times128$、$1k\times1k$、$8k\times8k$、$64k\times64k$等尺寸的矩阵乘法效率</li>
<li>与<code>OpenBLAS</code>进行效率比较</li>
<li>进行<code>ARM</code>等多平台效率测试</li>
</ol>
<p>本项目完成了上述基础要求，并在其中几项进行了拓展，本次报告将侧重于矩阵乘法的优化过程，与上次报告重复处将略讲，详见下文。</p>
<h3 id="模型假设"><a href="#模型假设" class="headerlink" title="模型假设"></a>模型假设</h3><p>本项目按题设要求继承了前一项目的数据类型，在实现矩阵乘法时以效率为主，小幅降低了安全性检查的严格程度。</p>
<ul>
<li>单个元素均为4字节<code>float</code>类型，有效位数默认为6位，数据范围约$-3.4\ast 10^{-38}&lt;val&lt;3.4\ast 10^{38}$</li>
<li>参与运算的矩阵均为<strong>方阵</strong>，且阶数为<strong>8的倍数</strong></li>
<li>可接受<code>&lt;0.01</code>的单精度浮点数计算误差</li>
</ul>
<h2 id="Part-2-Code"><a href="#Part-2-Code" class="headerlink" title="Part 2 - Code"></a>Part 2 - Code</h2><h3 id="宏与结构体"><a href="#宏与结构体" class="headerlink" title="宏与结构体"></a>宏与结构体</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//matrix.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> float_equal(x, y) ((x-y)&lt;1e-3&amp;&amp;(y-x)&lt;1e-3)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Matrix_</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">size_t</span> row;</span><br><span class="line">    <span class="type">size_t</span> col;</span><br><span class="line">    <span class="type">float</span> *data;</span><br><span class="line">&#125; Matrix;</span><br></pre></td></tr></table></figure>
<p>在题设条件下，矩阵尺寸默认$row=col$(其实可以存成一个，但部分矩阵乘法函数简单修改后可支持非方阵情况)，使用<code>size_t</code>存储，满足跨平台需求。</p>
<p>使用浮点型指针指向存储数据，采用行优先方式存储，空间由创建函数动态分配，分配后可通过释放函数释放。</p>
<h3 id="创建、释放与合法性检查"><a href="#创建、释放与合法性检查" class="headerlink" title="创建、释放与合法性检查"></a>创建、释放与合法性检查</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//matrix.c</span></span><br><span class="line"><span class="function">Matrix *<span class="title">createMatFromArr</span><span class="params">(<span class="type">size_t</span> row, <span class="type">size_t</span> col,<span class="type">float</span> *src)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (row==<span class="number">0</span>||col==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Rows/cols number is 0.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(src==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr,<span class="string">&quot;Source array is NULL.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Matrix *pMatrix = <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(Matrix));</span><br><span class="line">    <span class="keyword">if</span> (pMatrix == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Failed to allocate memory for a matrix.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pMatrix-&gt;row = row;</span><br><span class="line">    pMatrix-&gt;col = col;</span><br><span class="line">    pMatrix-&gt;data = <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">float</span>) * row * col);</span><br><span class="line">    <span class="keyword">if</span> (pMatrix-&gt;data == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Failed to allocate memory for the matrix data.\n&quot;</span>);</span><br><span class="line">        <span class="built_in">free</span>(pMatrix);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memcpy</span>(pMatrix-&gt;data,src,<span class="built_in">sizeof</span>(<span class="type">float</span>)*row*col);</span><br><span class="line">    <span class="keyword">return</span> pMatrix;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以从数组创建矩阵为例，本项目该部分与前一项目的差别在于：优化了安全性检查与报错，使用fprintf的stderr报错，使其变得更加合理和规范，同时采用了memcpy()代替手动赋值。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//matrix.c</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">releaseMat</span><span class="params">(Matrix **pMatrix)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pMatrix == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr,<span class="string">&quot;Pointer to the pointer of matrix is NULL.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>((*pMatrix)==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr,<span class="string">&quot;The pointer to the matrix is NULL.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>((*pMatrix)-&gt;data==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr,<span class="string">&quot;The pointer to the matrix data is NULL.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>((*pMatrix)-&gt;data);</span><br><span class="line">    <span class="built_in">free</span>(*pMatrix);</span><br><span class="line">    *pMatrix = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>释放矩阵与此前的差别同样在与报错与安全性的优化。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//matmul.c</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">safe_check</span><span class="params">(Matrix *src1, Matrix *src2, Matrix *dst)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (src1 == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;File %s, Line %d, Function %s(): The 1st parameter is NULL.\n&quot;</span>, __FILE__, __LINE__,</span><br><span class="line">                __FUNCTION__);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (src1-&gt;data == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;%s(): The 1st parameter has no valid data.\n&quot;</span>, __FUNCTION__);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (src2 == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;File %s, Line %d, Function %s(): The 2nd parameter is NULL.\n&quot;</span>, __FILE__, __LINE__,</span><br><span class="line">                __FUNCTION__);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (src2-&gt;data == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;%s(): The 2nd parameter has no valid data.\n&quot;</span>, __FUNCTION__);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (dst == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;File %s, Line %d, Function %s(): The 3rd parameter is NULL.\n&quot;</span>, __FILE__, __LINE__,</span><br><span class="line">                __FUNCTION__);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (dst-&gt;data == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;%s(): The 3rd parameter has no valid data.\n&quot;</span>, __FUNCTION__);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (src1-&gt;row != src1-&gt;col || src1-&gt;row != src2-&gt;row || src1-&gt;col != src2-&gt;col || src1-&gt;row != dst-&gt;row || src1-&gt;col != dst-&gt;col)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;The input and the output do not match, they should have the same square size.\n&quot;</span>);</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Their sizes are (%zu,%zu), (%zu,%zu) and (%zu,%zu).\n&quot;</span>,</span><br><span class="line">                src1-&gt;row, src1-&gt;col, src2-&gt;row, src2-&gt;col, dst-&gt;row, dst-&gt;col);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在进行矩阵乘法前，本项目对三个参数矩阵都进行了安全性检查，并用更规范的形式报错和处理。此处的最后一个<code>if</code>限定了三个矩阵应均为方阵，修改条件后可解除方阵要求。</p>
<h3 id="矩阵乘法"><a href="#矩阵乘法" class="headerlink" title="矩阵乘法"></a>矩阵乘法</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//matmul.h</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">safe_check</span><span class="params">(Matrix *src1, Matrix *src2, Matrix *dst)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">matmul_plain</span><span class="params">(Matrix *src1, Matrix *src2, Matrix *dst)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">matmul_divide</span><span class="params">(Matrix *src1, Matrix *src2, Matrix *dst)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">matmul_omp</span><span class="params">(Matrix *src1, Matrix *src2, Matrix *dst)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">matmul_avx_vec8</span><span class="params">(Matrix *src1, Matrix *src2, Matrix *dst)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">matmul_avx_block8</span><span class="params">(Matrix *src1, Matrix *src2, Matrix *dst)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">matmul_thread</span><span class="params">(Matrix *src1, Matrix *src2, Matrix *dst, <span class="type">size_t</span> num_threads)</span></span>;</span><br></pre></td></tr></table></figure>
<p>项目实现了6个矩阵乘法函数，依次为：朴素乘法，4×4分块乘法，<code>OpenMP</code>优化朴素乘法，向量点乘级<code>SIMD</code>优化朴素乘法，<code>SIMD</code>优化8×8分块乘法，手动多线程算法(基于<code>pthread.h</code>)。</p>
<p>下文将逐个展开解析优化策略和原理，效率比较部分将在后文体现。</p>
<h3 id="朴素乘法"><a href="#朴素乘法" class="headerlink" title="朴素乘法"></a>朴素乘法</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">matmul_plain</span><span class="params">(Matrix *src1, Matrix *src2, Matrix *dst)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">safe_check</span>(src1, src2, dst))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">size_t</span> n = src1-&gt;row;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">size_t</span> i_n = i * n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> k = <span class="number">0</span>; k &lt; n; k++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">float</span> t = src1-&gt;data[i_n + k];</span><br><span class="line">            <span class="type">size_t</span> k_n = k * n;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                dst-&gt;data[i_n + j] += t * src2-&gt;data[k_n + j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>说是朴素，但要是为了衬托其他算法把朴素写得太朴素没什么意思，所以这个朴素版其实是小幅优化后的朴素版，继承了上一项目的乘法，时间复杂度$O(N^3)$。</p>
<p>硬件优化：通过交换循环顺序将内存访问的跳跃次数从$n^3+n^2-n$降低到$n^2$次。</p>
<p>软件优化：暂存了$i×n$和$k×n$，小幅减少了乘法的次数。</p>
<h3 id="4×4分块乘法-Tiling"><a href="#4×4分块乘法-Tiling" class="headerlink" title="4×4分块乘法(Tiling)"></a>4×4分块乘法(Tiling)</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">matmul_divide</span><span class="params">(Matrix *src1, Matrix *src2, Matrix *dst)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">safe_check</span>(src1, src2, dst))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">size_t</span> n = src1-&gt;row;</span><br><span class="line">    <span class="type">size_t</span> k, j;</span><br><span class="line">    <span class="type">float</span> *data1 = src1-&gt;data;</span><br><span class="line">    <span class="type">float</span> *data2 = <span class="built_in">transpose</span>(src2-&gt;data, n);</span><br><span class="line">    <span class="type">float</span> *data3 = dst-&gt;data;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">4</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j += <span class="number">4</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; n; k += <span class="number">4</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">size_t</span> i2 = <span class="number">0</span>; i2 &lt; <span class="number">4</span>; i2++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">size_t</span> j2 = <span class="number">0</span>; j2 &lt; <span class="number">4</span>; j2++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="type">size_t</span> k2 = <span class="number">0</span>; k2 &lt; <span class="number">4</span>; k2++)</span><br><span class="line">                        &#123;</span><br><span class="line">                            data3[(i + i2) * n + (j + j2)] += data1[(i + i2) * n + (k + k2)] * data2[(k + k2) + (j + j2) * n];</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>硬件优化：在大规模矩阵乘法时，两个元素间隔可能很远，因此CPU往往需要将两个元素都加载进<code>cache</code>，耗费大量访存时间。考虑到小矩阵的数据可以存储进<code>CPU cache</code>中，我们可以将原先的大矩阵按行和列切割成若干4×4的小块再进行运算。同时，通过转置矩阵将内存访问变得连续。</p>
<h3 id="OpenMP优化朴素乘法"><a href="#OpenMP优化朴素乘法" class="headerlink" title="OpenMP优化朴素乘法"></a>OpenMP优化朴素乘法</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">matmul_omp</span><span class="params">(Matrix *src1, Matrix *src2, Matrix *dst)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">safe_check</span>(src1, src2, dst))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">register</span> <span class="type">size_t</span> n = src1-&gt;row;</span><br><span class="line">    <span class="keyword">register</span> <span class="type">size_t</span> k, j;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> omp parallel</span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> omp for private(k, j)</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">register</span> <span class="type">size_t</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">size_t</span> i_n = i * n;</span><br><span class="line">            <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; n; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">float</span> t = src1-&gt;data[i_n + k];</span><br><span class="line">                <span class="type">size_t</span> k_n = k * n;</span><br><span class="line">                <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    dst-&gt;data[i_n + j] += t * src2-&gt;data[k_n + j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>硬件优化：将原本串行执行的多次乘法通过<code>OpenMP</code>变为多线程并行，双线程效率较单线程折半，四线程较双线程接近折半，不过在线程数增加的过程中耗时减少的幅度逐渐降低，但总体而言较朴素算法有若干倍的提升，详见下文测试部分。</p>
<h3 id="向量化SIMD优化"><a href="#向量化SIMD优化" class="headerlink" title="向量化SIMD优化"></a>向量化SIMD优化</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">matmul_avx_vec8</span><span class="params">(Matrix *src1, Matrix *src2, Matrix *dst)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">safe_check</span>(src1, src2, dst))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">size_t</span> n = src1-&gt;row;</span><br><span class="line">    <span class="type">size_t</span> k, j;</span><br><span class="line">    <span class="type">float</span> *data1 = src1-&gt;data;</span><br><span class="line">    <span class="type">float</span> *data2 = <span class="built_in">transpose</span>(src2-&gt;data, n);</span><br><span class="line">    <span class="type">float</span> *data3 = dst-&gt;data;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> omp parallel</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> omp for private(k, j)</span></span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            __m256 sx = _mm256_setzero_ps();</span><br><span class="line">            <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; n; k += <span class="number">8</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                sx = _mm256_add_ps(sx, _mm256_mul_ps(_mm256_loadu_ps(data1 + i * n + k), _mm256_loadu_ps(data2 + j * n + k)));</span><br><span class="line">            &#125;</span><br><span class="line">            sx = _mm256_add_ps(sx, _mm256_permute2f128_ps(sx, sx, <span class="number">1</span>));</span><br><span class="line">            sx = _mm256_hadd_ps(sx, sx);</span><br><span class="line">            data3[i * n + j] = _mm256_cvtss_f32(_mm256_hadd_ps(sx, sx));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由于计算对象矩阵默认阶数为8的倍数，因此可以将8个连续的元素使用<code>__m256</code>进行合并，再进行批量乘法。在使用了<code>OpenMP</code>并行优化的基础上，进行维数为8的向量乘法代替8次串行的逐元素运算，将效率再次大幅提高。</p>
<p><img src="https://s2.loli.net/2022/11/26/xqpjyZkn4iAw8R9.png" alt="向量化"></p>
<h3 id="8×8分块SIMD优化"><a href="#8×8分块SIMD优化" class="headerlink" title="8×8分块SIMD优化"></a>8×8分块SIMD优化</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">matmul_avx_block8</span><span class="params">(Matrix *src1, Matrix *src2, Matrix *dst)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">safe_check</span>(src1, src2, dst))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">register</span> <span class="type">size_t</span> n = src1-&gt;row;</span><br><span class="line">    <span class="type">float</span> *data1 = src1-&gt;data;</span><br><span class="line">    <span class="type">float</span> *data2 = src2-&gt;data;</span><br><span class="line">    <span class="type">float</span> *data3 = dst-&gt;data;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> omp parallel for</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">register</span> <span class="type">size_t</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">8</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">register</span> <span class="type">size_t</span> j = <span class="number">0</span>; j &lt; n; j += <span class="number">8</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">register</span> <span class="type">size_t</span> k = <span class="number">0</span>; k &lt; n; k += <span class="number">8</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">register</span> <span class="type">size_t</span> u = i; u &lt; i + <span class="number">8</span>; u++)</span><br><span class="line">                &#123;</span><br><span class="line">                    __m256 a_1 = _mm256_set1_ps(data1[u * n + j]);</span><br><span class="line">                    __m256 a_2 = _mm256_set1_ps(data1[u * n + j + <span class="number">1</span>]);</span><br><span class="line">                    __m256 a_3 = _mm256_set1_ps(data1[u * n + j + <span class="number">2</span>]);</span><br><span class="line">                    __m256 a_4 = _mm256_set1_ps(data1[u * n + j + <span class="number">3</span>]);</span><br><span class="line">                    __m256 a_5 = _mm256_set1_ps(data1[u * n + j + <span class="number">4</span>]);</span><br><span class="line">                    __m256 a_6 = _mm256_set1_ps(data1[u * n + j + <span class="number">5</span>]);</span><br><span class="line">                    __m256 a_7 = _mm256_set1_ps(data1[u * n + j + <span class="number">6</span>]);</span><br><span class="line">                    __m256 a_8 = _mm256_set1_ps(data1[u * n + j + <span class="number">7</span>]);</span><br><span class="line"></span><br><span class="line">                    __m256 b_1 = _mm256_loadu_ps(data2 + j * n + k);</span><br><span class="line">                    __m256 b_2 = _mm256_loadu_ps(data2 + (j + <span class="number">1</span>) * n + k);</span><br><span class="line">                    __m256 b_3 = _mm256_loadu_ps(data2 + (j + <span class="number">2</span>) * n + k);</span><br><span class="line">                    __m256 b_4 = _mm256_loadu_ps(data2 + (j + <span class="number">3</span>) * n + k);</span><br><span class="line">                    __m256 b_5 = _mm256_loadu_ps(data2 + (j + <span class="number">4</span>) * n + k);</span><br><span class="line">                    __m256 b_6 = _mm256_loadu_ps(data2 + (j + <span class="number">5</span>) * n + k);</span><br><span class="line">                    __m256 b_7 = _mm256_loadu_ps(data2 + (j + <span class="number">6</span>) * n + k);</span><br><span class="line">                    __m256 b_8 = _mm256_loadu_ps(data2 + (j + <span class="number">7</span>) * n + k);</span><br><span class="line"></span><br><span class="line">                    b_1 = _mm256_mul_ps(b_1, a_1);</span><br><span class="line">                    b_2 = _mm256_mul_ps(b_2, a_2);</span><br><span class="line">                    b_3 = _mm256_mul_ps(b_3, a_3);</span><br><span class="line">                    b_4 = _mm256_mul_ps(b_4, a_4);</span><br><span class="line">                    b_5 = _mm256_mul_ps(b_5, a_5);</span><br><span class="line">                    b_6 = _mm256_mul_ps(b_6, a_6);</span><br><span class="line">                    b_7 = _mm256_mul_ps(b_7, a_7);</span><br><span class="line">                    b_8 = _mm256_mul_ps(b_8, a_8);</span><br><span class="line"></span><br><span class="line">                    __m256 t_1 = _mm256_add_ps(b_1, b_2);</span><br><span class="line">                    __m256 t_2 = _mm256_add_ps(b_3, b_4);</span><br><span class="line">                    __m256 t_3 = _mm256_add_ps(b_5, b_6);</span><br><span class="line">                    __m256 t_4 = _mm256_add_ps(b_7, b_8);</span><br><span class="line"></span><br><span class="line">                    __m256 t_5 = _mm256_add_ps(t_1, t_2);</span><br><span class="line">                    __m256 t_6 = _mm256_add_ps(t_3, t_4);</span><br><span class="line">                    __m256 t_7 = _mm256_add_ps(t_5, t_6);</span><br><span class="line"></span><br><span class="line">                    __m256 t_c = _mm256_loadu_ps(data3 + u * n + k);</span><br><span class="line">                    __m256 t_8 = _mm256_add_ps(t_7, t_c);</span><br><span class="line"></span><br><span class="line">                    _mm256_storeu_ps(data3 + u * n + k, t_8);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2022/11/26/GlN51cUPIfbYRAj.png" alt="image.png"></p>
<p>这是上述计算过程的图像解释，我们每次将$B$中的8个元素合并载入<code>__mm256</code>，再将$A$中的单个元素广播载入<code>__mm256</code>，二者批量相乘后再累加至对应8个元素中，通过u的循环就可以得到8×8分块的值。</p>
<p>为了便于说明，我们以4×4的例子入手讲解，以下是计算<code>C[0][0..3]</code>的式子</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">C0[<span class="number">0</span>]+=A0[<span class="number">0</span>]+B0[<span class="number">0</span>]	C0[<span class="number">0</span>]+=A0[<span class="number">1</span>]+B1[<span class="number">0</span>]	C0[<span class="number">0</span>]+=A0[<span class="number">2</span>]+B2[<span class="number">0</span>]	C0[<span class="number">0</span>]+=A0[<span class="number">3</span>]+B3[<span class="number">0</span>]</span><br><span class="line">C0[<span class="number">1</span>]+=A0[<span class="number">0</span>]+B0[<span class="number">1</span>]	C0[<span class="number">1</span>]+=A0[<span class="number">1</span>]+B1[<span class="number">1</span>]	C0[<span class="number">1</span>]+=A0[<span class="number">2</span>]+B2[<span class="number">1</span>]	C0[<span class="number">1</span>]+=A0[<span class="number">3</span>]+B3[<span class="number">1</span>]</span><br><span class="line">C0[<span class="number">2</span>]+=A0[<span class="number">0</span>]+B0[<span class="number">2</span>]	C0[<span class="number">2</span>]+=A0[<span class="number">1</span>]+B1[<span class="number">2</span>]	C0[<span class="number">2</span>]+=A0[<span class="number">2</span>]+B2[<span class="number">2</span>]	C0[<span class="number">2</span>]+=A0[<span class="number">3</span>]+B3[<span class="number">2</span>]</span><br><span class="line">C0[<span class="number">3</span>]+=A0[<span class="number">0</span>]+B0[<span class="number">3</span>]	C0[<span class="number">3</span>]+=A0[<span class="number">1</span>]+B1[<span class="number">3</span>]	C0[<span class="number">3</span>]+=A0[<span class="number">2</span>]+B2[<span class="number">3</span>]	C0[<span class="number">3</span>]+=A0[<span class="number">3</span>]+B3[<span class="number">3</span>]</span><br></pre></td></tr></table></figure>
<p>对于朴素乘法，我们对上述16个式子是“行优先”执行的，但如果按“列优先”的视角重排后，我们发现A可以一次性载入用作输出的计算，对于B则逐行拆分使用。利用AVX指令集，我们将四个元素的访存与计算向量化，则能达到提高效率的目的。</p>
<p><img src="https://s2.loli.net/2022/11/27/sv3hRyKUmHkXWZS.png" alt="image.png"></p>
<h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a><pthread.h>多线程</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">PartialMatMulParams</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">size_t</span> fromColumn, toColum, n;</span><br><span class="line">    <span class="type">float</span> *a, *b, *c;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> *<span class="title">partialMatMul</span><span class="params">(<span class="type">void</span> *params)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">PartialMatMulParams</span> *p = (<span class="keyword">struct</span> PartialMatMulParams *)params;</span><br><span class="line">    <span class="type">size_t</span> n = p-&gt;n;</span><br><span class="line">    <span class="type">float</span> *a = p-&gt;a;</span><br><span class="line">    <span class="type">float</span> *b = p-&gt;b;</span><br><span class="line">    <span class="type">float</span> *c = p-&gt;c;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> omp parallel for</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = p-&gt;fromColumn; i &lt; p-&gt;toColum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">size_t</span> k = <span class="number">0</span>; k &lt; n; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                c[j * n + i] += a[j * n + k] * b[k * n + i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">matmul_thread</span><span class="params">(Matrix *src1, Matrix *src2, Matrix *dst, <span class="type">size_t</span> num_threads)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">safe_check</span>(src1, src2, dst))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">register</span> <span class="type">size_t</span> n = src1-&gt;row;</span><br><span class="line">    <span class="type">float</span> *data1 = src1-&gt;data;</span><br><span class="line">    <span class="type">float</span> *data2 = src2-&gt;data;</span><br><span class="line">    <span class="type">float</span> *data3 = dst-&gt;data;</span><br><span class="line">    <span class="type">pthread_t</span> *threads = <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">pthread_t</span>) * num_threads);</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">PartialMatMulParams</span> *params = <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="keyword">struct</span> PartialMatMulParams) * num_threads);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; num_threads; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        params[i].a = data1;</span><br><span class="line">        params[i].b = data2;</span><br><span class="line">        params[i].c = data3;</span><br><span class="line">        params[i].n = n;</span><br><span class="line"></span><br><span class="line">        params[i].fromColumn = i * (n / num_threads);</span><br><span class="line">        params[i].toColum = (i + <span class="number">1</span>) * (n / num_threads);</span><br><span class="line">        <span class="built_in">pthread_create</span>(&amp;threads[i], <span class="literal">NULL</span>, partialMatMul, &amp;params[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; num_threads; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">pthread_join</span>(threads[i], <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(threads);</span><br><span class="line">    <span class="built_in">free</span>(params);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上函数是笔者对于<code>&lt;pthread.h&gt;</code>库的实验品，在浅略阅读相关讲解与教程后所写，在实际运行测试中，虽然能正确得到结果，但以16线程运行的效率甚至低于无优化的朴素算法，且笔者对于该库的线程安全问题并不了解，因此仅作为学习过程的副产品，不参与后续效率比较。</p>
<h2 id="Part-3-Test-amp-Comparison"><a href="#Part-3-Test-amp-Comparison" class="headerlink" title="Part 3 - Test &amp; Comparison"></a>Part 3 - Test &amp; Comparison</h2><h3 id="测试说明"><a href="#测试说明" class="headerlink" title="测试说明"></a>测试说明</h3><p><code>benchmark.c</code>为本项目测试用代码，其中依次测试了矩阵乘法的各类实现的正确性与耗时。</p>
<p>矩阵尺寸由调试者输入，矩阵元素为随机生成的$[0,1]$的单精度浮点数。</p>
<p>乘法标准答案由<code>cblas.h</code>的<code>cblas_sgemm()</code>函数输出至矩阵$C$，其余函数输出至$D$并与之比较，会打印出首次误差情况。</p>
<p>考虑到使用了<code>OpenMP</code>提高效率，此处使用<code>double omp_get_wtime()</code>计算运行时间，单位为秒。</p>
<p>在运行一个函数前，程序会“预热”两次，即预先运行2次再计时。</p>
<p>下面是以<code>matmul_avx_block8()</code>为例的测试片段。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">matmul_avx_block8</span>(A, B, D);</span><br><span class="line"><span class="built_in">matmul_avx_block8</span>(A, B, D);</span><br><span class="line"><span class="built_in">memset</span>(D-&gt;data, <span class="number">0</span>, <span class="built_in">sizeof</span>(<span class="type">float</span>) * nn);</span><br><span class="line">time1 = <span class="built_in">omp_get_wtime</span>();</span><br><span class="line"><span class="built_in">matmul_avx_block8</span>(A, B, D);</span><br><span class="line">time2 = <span class="built_in">omp_get_wtime</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[AVX_block+OpenMP] %ld ms used\n&quot;</span>, (<span class="type">long</span> <span class="type">int</span>)(<span class="number">1000</span> * (time2 - time1)));</span><br><span class="line"><span class="built_in">printf</span>(<span class="built_in">equals</span>(C, D) ? <span class="string">&quot;Result Accepted.\n&quot;</span> : <span class="string">&quot;Wrong Result.\n&quot;</span>);</span><br><span class="line"><span class="built_in">memset</span>(D-&gt;data, <span class="number">0</span>, <span class="built_in">sizeof</span>(<span class="type">float</span>) * nn);</span><br></pre></td></tr></table></figure>
<h3 id="x64平台测试结果"><a href="#x64平台测试结果" class="headerlink" title="x64平台测试结果"></a>x64平台测试结果</h3><p>笔记本型号：Surface Pro7 <del>孱弱的主动散热</del>+外置风扇</p>
<p>系统：Linux version 5.10.16.3(WSL2)，64位系统，基于x64处理器</p>
<p>处理器：Intel(R) Core(TM) i7-1065G7 CPU @ 1.30GHz   1.50 GHz</p>
<p>时间单位:毫秒(ms)，<code>0</code>代表1ms内完成，<code>/</code>表示等待时间在作者的耐心之外(超过5分钟)</p>
<p><del>由于要预热，超出5分钟的函数笔者要等15分钟以上</del></p>
<h4 id="Without-addition-compilation-option"><a href="#Without-addition-compilation-option" class="headerlink" title="Without addition compilation option"></a>Without addition compilation option</h4><div class="table-container">
<table>
<thead>
<tr>
<th>阶数/函数</th>
<th>plain</th>
<th>divide</th>
<th>plain+omp</th>
<th>avx_vec8</th>
<th>avx_block8</th>
<th>OpenBLAS</th>
</tr>
</thead>
<tbody>
<tr>
<td>16</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>128</td>
<td>7</td>
<td>7</td>
<td>1</td>
<td>0</td>
<td>30</td>
<td>0</td>
</tr>
<tr>
<td>1024</td>
<td>3657</td>
<td>1366</td>
<td>792</td>
<td>194</td>
<td>257</td>
<td>7</td>
</tr>
<tr>
<td>2048</td>
<td>27677</td>
<td>11123</td>
<td>6783</td>
<td>1835</td>
<td>1496</td>
<td>43</td>
</tr>
<tr>
<td>4096</td>
<td>205834</td>
<td>116130</td>
<td>61203</td>
<td>12968</td>
<td>11397</td>
<td>395</td>
</tr>
<tr>
<td>8192</td>
<td>/</td>
<td>/</td>
<td>543397</td>
<td>124802</td>
<td>107255</td>
<td>2940</td>
</tr>
<tr>
<td>16384</td>
<td>/</td>
<td>/</td>
<td>/</td>
<td>/</td>
<td>/</td>
<td>24763</td>
</tr>
</tbody>
</table>
</div>
<h4 id="With-O2"><a href="#With-O2" class="headerlink" title="With -O2"></a>With -O2</h4><div class="table-container">
<table>
<thead>
<tr>
<th>阶数/函数</th>
<th>plain</th>
<th>divide</th>
<th>plain+omp</th>
<th>avx_vec8</th>
<th>avx_block8</th>
<th>OpenBLAS</th>
</tr>
</thead>
<tbody>
<tr>
<td>16</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>128</td>
<td>2</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>28</td>
<td>0</td>
</tr>
<tr>
<td>1024</td>
<td>515</td>
<td>165</td>
<td>110</td>
<td>32</td>
<td>52</td>
<td>6</td>
</tr>
<tr>
<td>2048</td>
<td>4746</td>
<td>1727</td>
<td>933</td>
<td>623</td>
<td>232</td>
<td>46</td>
</tr>
<tr>
<td>4096</td>
<td>34098</td>
<td>15463</td>
<td>11363</td>
<td>5395</td>
<td>1765</td>
<td>395</td>
</tr>
<tr>
<td>8192</td>
<td>270939</td>
<td>139216</td>
<td>89797</td>
<td>46394</td>
<td>14359</td>
<td>3015</td>
</tr>
<tr>
<td>16384</td>
<td>/</td>
<td>/</td>
<td>/</td>
<td>/</td>
<td>196830^</td>
<td>24433</td>
</tr>
</tbody>
</table>
</div>
<p>^: 在测试16384×16384矩阵的avx_block8函数时，即便笔者使用了外置散热手段，还是无法避免CPU长期高负荷计算过热导致的降频，因此该数据效率有明显下降。</p>
<h4 id="With-O3"><a href="#With-O3" class="headerlink" title="With -O3"></a>With -O3</h4><div class="table-container">
<table>
<thead>
<tr>
<th>阶数/函数</th>
<th>plain</th>
<th>divide</th>
<th>plain+omp</th>
<th>avx_vec8</th>
<th>avx_block8</th>
<th>OpenBLAS</th>
</tr>
</thead>
<tbody>
<tr>
<td>16</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>6</td>
<td>0</td>
</tr>
<tr>
<td>128</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>115</td>
<td>59</td>
<td>2</td>
</tr>
<tr>
<td>1024</td>
<td>134</td>
<td>131</td>
<td>47</td>
<td>112</td>
<td>89</td>
<td>7</td>
</tr>
<tr>
<td>2048</td>
<td>1648</td>
<td>975</td>
<td>357</td>
<td>607</td>
<td>299</td>
<td>48</td>
</tr>
<tr>
<td>4096</td>
<td>13601</td>
<td>7905</td>
<td>3099</td>
<td>5386</td>
<td>1837</td>
<td>388</td>
</tr>
<tr>
<td>8192</td>
<td>112437</td>
<td>74809</td>
<td>41208</td>
<td>44041</td>
<td>14188</td>
<td>3069</td>
</tr>
<tr>
<td>16384</td>
<td>/</td>
<td>/</td>
<td>/</td>
<td>/</td>
<td>188428^</td>
<td>24325</td>
</tr>
</tbody>
</table>
</div>
<p>笔者将电脑关闭冷却后，使用-O3编译，发现如下现象：</p>
<ul>
<li>对于阶数在2048以下的矩阵，自行实现的<code>SIMD</code>优化函数效率有所下降，而对于较大矩阵，自行实现的<code>SIMD</code>优化函数效率基本不变。</li>
<li>未引入手动<code>SIMD</code>优化的函数效率有较大提高，但在大规模计算时效率低于<code>SIMD</code>优化</li>
<li>又降频了，说明效率门槛从访存速度转移至算力。</li>
</ul>
<p>随后尝试了-Ofast编译，效果在误差允许范围内与-O3几乎相同。</p>
<p>经过查询</p>
<h3 id="图表比较"><a href="#图表比较" class="headerlink" title="图表比较"></a>图表比较</h3><p>下图是矩阵乘法的不同实现对于各规模矩阵的用时柱状图，单位ms，超时部分未画出。</p>
<p>为了方便观察比较，此处对时间取<code>log2</code>对数，得到右侧各图。</p>
<p>自行实现的各算法中，开启<code>-O2</code>时耗时比约为：</p>
<script type="math/tex; mode=display">T_{plain}≈1.95T_{divide}≈3.01T_{plain+omp}≈5.83T_{avx\_vec8}≈18.87T_{avx\_block8}≈89.86T_{OpenBLAS}</script><p>由上述原因，只看n=16384时，自行实现的最快算法<code>avx_block8</code>耗时也达到了OpenBLAS的8倍左右，但在其他规模下，<code>avx__block8</code>可以达到OpenBLAS的4~5倍。</p>
<p>由右侧各图可以观察到，在开启<code>-O2</code>编译后，<code>avx_block8</code>的<code>log2(time)</code>与<code>OpenBLAS</code>相差只有2左右，即达到了约1/4的效率。</p>
<p><img src="https://s2.loli.net/2022/11/27/ABndj2HIe15kpzU.png" alt="Plain"></p>
<p><img src="https://s2.loli.net/2022/11/27/RpjzcnNgLvCIUwH.png" alt="with O2"></p>
<p><img src="https://s2.loli.net/2022/11/27/Fv2xEQBUVMs5g4m.png" alt="O3"></p>
<h3 id="ARM平台测试结果"><a href="#ARM平台测试结果" class="headerlink" title="ARM平台测试结果"></a>ARM平台测试结果</h3><p>除在本机运行外，笔者在EAIDK310开发板上运行了基于<code>&lt;arm_neon.h&gt;</code>的版本。</p>
<p>开发板运行内存1GB，内置存储8GB。</p>
<p>CPU为ARM 4核 64位处理器，四核Cortex-A53，最高1.3GHz。</p>
<p>理论上，开发板可以为16k×16k的矩阵分配空间，但实际运行时，进程则被系统killed掉了，说明EAIDK310可能实际上无法支持申请这么大的空间。同时，由于更大规模的矩阵乘法运行时间过长，此处仅测试了16~4096规模的矩阵。</p>
<h4 id="Without-addition-compilation-option-1"><a href="#Without-addition-compilation-option-1" class="headerlink" title="Without addition compilation option"></a>Without addition compilation option</h4><div class="table-container">
<table>
<thead>
<tr>
<th>阶数/函数</th>
<th>plain</th>
<th>divide</th>
<th>plain+omp</th>
<th>neon_vec4</th>
<th>neon_block4</th>
<th>OpenBLAS</th>
</tr>
</thead>
<tbody>
<tr>
<td>16</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>128</td>
<td>87</td>
<td>48</td>
<td>31</td>
<td>44</td>
<td>48</td>
<td>0</td>
</tr>
<tr>
<td>1024</td>
<td>44629</td>
<td>20449</td>
<td>11230</td>
<td>4749</td>
<td>5536</td>
<td>156</td>
</tr>
<tr>
<td>2048</td>
<td>/</td>
<td>/</td>
<td>89900</td>
<td>30015</td>
<td>59238</td>
<td>1226</td>
</tr>
<tr>
<td>4096</td>
<td>/</td>
<td>/</td>
<td>/</td>
<td>/</td>
<td>/</td>
<td>9659</td>
</tr>
</tbody>
</table>
</div>
<h4 id="With-O2-1"><a href="#With-O2-1" class="headerlink" title="With -O2"></a>With -O2</h4><div class="table-container">
<table>
<thead>
<tr>
<th>阶数/函数</th>
<th>plain</th>
<th>divide</th>
<th>plain+omp</th>
<th>neon_vec4</th>
<th>neon_block4</th>
<th>OpenBLAS</th>
</tr>
</thead>
<tbody>
<tr>
<td>16</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>2</td>
<td>0</td>
</tr>
<tr>
<td>128</td>
<td>20</td>
<td>9</td>
<td>5</td>
<td>76</td>
<td>11</td>
<td>0</td>
</tr>
<tr>
<td>1024</td>
<td>10283</td>
<td>3930</td>
<td>2611</td>
<td>1196</td>
<td>1473</td>
<td>167</td>
</tr>
<tr>
<td>2048</td>
<td>82239</td>
<td>32929</td>
<td>20859</td>
<td>9483</td>
<td>30989</td>
<td>1228</td>
</tr>
<tr>
<td>4096</td>
<td>/</td>
<td>/</td>
<td>169994</td>
<td>75110</td>
<td>/</td>
<td>9670</td>
</tr>
</tbody>
</table>
</div>
<h4 id="With-O3-1"><a href="#With-O3-1" class="headerlink" title="With -O3"></a>With -O3</h4><div class="table-container">
<table>
<thead>
<tr>
<th>阶数/函数</th>
<th>plain</th>
<th>divide</th>
<th>plain+omp</th>
<th>neon_vec4</th>
<th>neon_block4</th>
<th>OpenBLAS</th>
</tr>
</thead>
<tbody>
<tr>
<td>16</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>3</td>
<td>0</td>
</tr>
<tr>
<td>128</td>
<td>6</td>
<td>2</td>
<td>1</td>
<td>75</td>
<td>12</td>
<td>0</td>
</tr>
<tr>
<td>1024</td>
<td>3021</td>
<td>1781</td>
<td>893</td>
<td>1221</td>
<td>1098</td>
<td>159</td>
</tr>
<tr>
<td>2048</td>
<td>24062</td>
<td>16943</td>
<td>7828</td>
<td>9495</td>
<td>34779</td>
<td>1223</td>
</tr>
<tr>
<td>4096</td>
<td>/</td>
<td>136914</td>
<td>82110</td>
<td>74115</td>
<td>/</td>
<td>10050</td>
</tr>
</tbody>
</table>
</div>
<p>让人比较郁闷的是NEON仅有4个一组绑定的float，而没有<code>__mm256</code>的代替品，因此笔者将分块步长从8变成4，牺牲了效率，分块效率变得不如向量化效率，可能也有开发板算力弱于电脑的原因。上述三种编译下的耗时比例关系与上文类似，故此不做赘述。</p>
<h3 id="跨平台的比较"><a href="#跨平台的比较" class="headerlink" title="跨平台的比较"></a>跨平台的比较</h3><p>本项目分别在x64和ARM架构的平台进行了测试，从结果可以大致算出x64平台的效率大约是ARM平台的16倍，在下图中表现为：相同算法下左柱(ARM)比相邻的右柱(x64)高出大约4。</p>
<p>随着矩阵阶数的按2倍乘，各算法耗时也大致呈8倍增长，符合$O(N^3)$算法的特征，由此可见，OpenBLAS底层似乎也采用的是$O(N^3)$的算法，但对许多细节进行了展开和优化来降低常数。</p>
<p><img src="https://s2.loli.net/2022/11/27/2mTCa3kMiZybIA8.png" alt="compare.png"></p>
<h2 id="Part-4-Difficulties-amp-Solutions"><a href="#Part-4-Difficulties-amp-Solutions" class="headerlink" title="Part 4 - Difficulties &amp; Solutions"></a>Part 4 - Difficulties &amp; Solutions</h2><h4 id="Difficulty-I-误差处理"><a href="#Difficulty-I-误差处理" class="headerlink" title="Difficulty I. 误差处理"></a>Difficulty I. 误差处理</h4><p>笔者在测试时发现，对于规模在2048以上的矩阵乘法，很容易产生<code>0.001</code>的误差，(通常是OpenBLAS与自己实现的不同，而自己实现的几个往往成对相同)。下图是某个凌晨一点钟，没开风扇降频跑16k规模矩阵时得到的结果。</p>
<p><img src="https://s2.loli.net/2022/11/27/c2mNhHgYivPzoEk.png" alt="image-20221127014002130.png" style="zoom: 50%;" /></p>
<h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h4><p>经同学提醒，可以将误差设置为数据的1‰而非0.001，这样的误差要求对于进行了很多次加、乘法得到的结果也都是可以接受的。</p>
<p>不过为了比较时的效率，<code>benchmark.c</code>依然采用旧版比较，适当放宽误差到<code>0.01</code>时可以验证乘法的正确性，既然保证了正确性，精确到哪一位才算正确似乎也没有那么重要了。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> float_equal(x, y) ((x - y) &lt; 1e-3 &amp;&amp; (y - x) &lt; 1e-3) <span class="comment">//old</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mx(x, y) ((x) &gt; (y) ? (x) : (y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> float_equal2(x, y) (x &gt; y ? (x - y &lt; mx(x, 1) * 1e-3) : (y - x &lt; mx(y, 1) * 1e-3)) <span class="comment">// new</span></span></span><br></pre></td></tr></table></figure>
<h4 id="Difficulty-II-Strassen"><a href="#Difficulty-II-Strassen" class="headerlink" title="Difficulty II. Strassen"></a>Difficulty II. Strassen</h4><p>与同学讨论的过程中，笔者了解到$O(N^{lg7})≈O(N^{2.81})$复杂度的<code>Strassen</code>算法，并且尝试自己写了一下，通过了正确性测试，但效率非常悲观，仅比朴素略快一筹。</p>
<h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h4><p>随后笔者分析了原因：<code>Strassen</code>算法将矩阵运算中的8次子矩阵乘法与4次子矩阵加法，分别变为了7次和18次，即以额外的14次加法为代价减少一次乘法，在阶数很高时才能体现差距，且笔者在实现Strassen时并未使用<code>SIMD</code>进行加速，导致加法运算并未得到很好的优化，而分治的截取、合并等操作导致内存访问的跳跃数较高，虽然从软件层面降低了复杂度，但在硬件层面增大了操作复杂性。</p>
<p>另外，该算法的优化幅度为$O(N^{0.19})$，而当$N=16384$时，也只有理论上限6.32倍的提升，矩阵规模越小优化越不明显。加上访问不连续、矩阵分块等操作带来的额外复杂度，总体呈现负优化。也许加上合适的<code>SIMD</code>优化能提高其效率。</p>
<h4 id="Difficulty-III-Segmentation-Fault"><a href="#Difficulty-III-Segmentation-Fault" class="headerlink" title="Difficulty III. Segmentation Fault"></a>Difficulty III. Segmentation Fault</h4><p><code>SIMD</code>优化过程中屡次出现段错误，笔者试图使用<code>memalign</code>函数在创建矩阵时将<code>data</code>对齐，粒度设置为32，以便后续的load等操作，但发现写入数据时会导致段错误。</p>
<h4 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h4><p>查询<code>memalign</code>的用法后发现并无异常，但就是无法对申请的内存进行正常读写，于是笔者推测可能是申请的空间过大，无法通过该函数申请到一块连续、对齐的内存用于存储数据，导致并未将data指向一段合法内存，因此读写时会段错误。考虑到申请如此大块的内存的确不太现实，笔者选择在载入时牺牲一定效率，换用<code>loadu_ps</code>来对未对齐的数据进行载入，效率还算不错，借此实现了本项目最快的函数，对齐后也许还能更快。</p>
<h4 id="Difficulty-IV-64k×64k"><a href="#Difficulty-IV-64k×64k" class="headerlink" title="Difficulty IV. 64k×64k"></a>Difficulty IV. 64k×64k</h4><p>一个float四字节，$64k×64k=2^{32}=4,294,967,296$个元素，也就是对于仅一个64k阶矩阵，就要为<code>data</code>指针分配$2^{32}×4/1024^3=16GB$内存，实在是有点难为渣机了。而对于运行内存1GB，内置存储8GB的EAIDK310而言，条件会更加苛刻。</p>
<h4 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h4><p>办法总比问题多，但效果不一定好。对于如此巨大的矩阵，我们可以将其写入文件，在访问某块元素时再读取载入进行运算，运算后写回文件。笔者不得不承认这是一个办法，但对于能存下的矩阵，运算耗时也已经到了难以等待的程度，如果在每次读写元素时再加上文件操作时间，恐怕要等到天荒地老、海枯石烂了，因此虽然能这样解决，但并没有必要。</p>
<h2 id="Part-5-Summary-amp-Blooper"><a href="#Part-5-Summary-amp-Blooper" class="headerlink" title="Part 5 - Summary &amp; Blooper"></a>Part 5 - Summary &amp; Blooper</h2><p>首先，感谢您能读到这里，该部分是对项目开发过程的总结与花絮的分享。</p>
<p>本项目在尝试了若干种优化方法后，结合<code>OpenMP</code>、<code>SIMD</code>和分块等方法对矩阵乘法进行了不同程度的优化，将耗时门槛从访存转移到了计算，效率达到了<code>OpenBLAS</code>的1/4左右。</p>
<p>由于笔者的电脑只有一块<code>Intel Iris Plus Graphics</code>核显，且本次项目的大致重心在于如何最大限度利用CPU进行矩阵乘法的运算，笔者几乎用尽解数才写出了本项目最快的函数，然而与<code>OpenBLAS</code>依然相差甚远，大约可以理解于老师当年与完备的库相比时感受到的“绝望”的感觉了。不过想想那个项目无论从开发周期还是开发团队都远超这个用时二十余小时的单人项目，内心倒也释然许多。</p>
<p><img src="https://s2.loli.net/2022/11/27/iXV5fbZHFLzBm71.png" alt="image-20221127012543083.png" style="zoom: 25%;" /></p>
<p>11.27凌晨一点，笔者在测试16k矩阵乘法时，CPU八核顶着高温降频运转，为了等待自己最快的一个函数的运行结果，守在电脑前近二十分钟(预热两次真的很慢)，得到了下面的结果：</p>
<p><img src="https://s2.loli.net/2022/11/27/c2mNhHgYivPzoEk.png" alt="image-20221127014002130.png" style="zoom: 50%;" /></p>
<p>本来已经完全不抱希望了，但就在快要没耐心的时候程序给出了答案，虽然有一点误差，但当时还是挺感动的。然而第二天在加上外置风扇、酒精喷雾等外置散热的帮助下，效率得到了很大的提升，令人感慨好硬件的重要性。</p>
<p>本次项目兼具技术性和挑战性，还是非常有趣的，<del>也让人深刻意识到自己和行业标准的差距</del>，此后这门课仅剩一次project，且做且珍惜啦。</p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>CS205 C/C++ 期末复习</title>
    <url>/2023/01/10/CS205_C&amp;CPP_final/</url>
    <content><![CDATA[<h3 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h3><p><strong>编译与运行</strong></p>
<p>g++ hello.cpp —std=c++11 -o hello</p>
<p>./hello</p>
<p><strong>优点</strong></p>
<p>大部分基础计算机系统的开发语言：Linux, MySQL, OpenCV, TensorFlow后端，PyTorch……</p>
<p>高效率：高强度优化编译器，直接访问内存，高效计算，AI算法实现</p>
<p><strong>函数的声明与定义</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//prototype/declaration (*.h; *.hpp)</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>;</span><br><span class="line"><span class="comment">//definition (*.c; *.cpp)</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>编译与链接</strong></p>
<p><img src="https://s2.loli.net/2023/01/09/2CXFo9DnY3ltHcA.png" alt="_4N280_VDA_DNQD57N2KQO3.png"></p>
<p><strong>编译错误，链接错误，运行错误</strong></p>
<p>语法错误，找不到.o文件中所指的内容，运行时发生的异常</p>
<p><strong>预处理器和宏</strong></p>
<p>预处理器会处理#开头的指令</p>
<p>预处理指令：define, undef, include, if, ifdef, ifndef, else, elif, endif, line, error, pragma</p>
<p><strong>输入输出</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::ostream cout;</span><br><span class="line">std::istream cin;</span><br><span class="line">printf, scanf</span><br></pre></td></tr></table></figure>
<p><strong>命令行参数</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;...&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span>&#123;...&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span>&#123;...&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">g++ hello.cpp -o hello</span><br></pre></td></tr></table></figure>
<p>这个命令有三个命令行参数(g++不算在内)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">./a.out arg1 arg2 arg3</span><br><span class="line"><span class="number">0</span>: ./a.out</span><br><span class="line"><span class="number">1</span>: arg1</span><br><span class="line"><span class="number">2</span>: arg2</span><br><span class="line"><span class="number">3</span>: arg3</span><br></pre></td></tr></table></figure>
<p>上面这个例子就有四个命令行参数</p>
<h3 id="Data-Types-and-Arithmetic-Operators"><a href="#Data-Types-and-Arithmetic-Operators" class="headerlink" title="Data Types and Arithmetic Operators"></a>Data Types and Arithmetic Operators</h3><p><strong>变量初始化</strong></p>
<p>未初始化的变量可能会拥有随机值，因平台而异</p>
<p><strong>溢出</strong></p>
<p>数字过大导致溢出至符号位，正变负</p>
<p><img src="https://s2.loli.net/2023/01/09/TU3ZivgrGMYXQKP.png" alt="D8S8MWQQ73_T~BS_CS___5S.png" style="zoom: 67%;" /></p>
<p><strong>整数类型</strong></p>
<p><code>sizeof</code>操作符可以返回数据类型的位宽，单位字节(byte)</p>
<p><code>char</code>是8-bit integer类型</p>
<p><code>bool</code>是8-bit integer类型</p>
<p><code>typedef</code>创建类型</p>
<p><code>size_t</code>是unsigned integer类型，是<code>sizeof</code>的结果类型，32-bit或64-bit</p>
<p><strong>浮点类型</strong></p>
<p><code>float</code>：单精度浮点类型，32-bit</p>
<p><img src="https://s2.loli.net/2023/01/09/vnVwCapglWHYui2.png" alt="G~CML_WB__YGOO__V1XH0_Y.png"></p>
<p><code>double</code>：双精度浮点型，64-bit</p>
<p><code>long double</code>：扩展精度浮点型，如果支持则128-bit，否则64-bit</p>
<p>运算速度：double&lt;float&lt;integers</p>
<p><code>float</code>变量用<code>==</code>比较可能带来意料外的结果</p>
<p><code>±inf</code>： Exponent=11111111, fraction=0</p>
<p><code>nan</code>： Exponent=11111111, fraction!=0</p>
<p><strong>常数</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">95</span> <span class="comment">// decimal </span></span><br><span class="line"><span class="number">0137</span><span class="comment">// octal </span></span><br><span class="line"><span class="number">0x5F</span> <span class="comment">// hexadecimal </span></span><br><span class="line"></span><br><span class="line"><span class="number">95</span> <span class="comment">// int </span></span><br><span class="line"><span class="number">95u</span> <span class="comment">// unsigned int </span></span><br><span class="line"><span class="number">95l</span> <span class="comment">// long </span></span><br><span class="line"><span class="number">95ul</span> <span class="comment">// unsigned long </span></span><br><span class="line"><span class="number">95lu</span> <span class="comment">// unsigned long </span></span><br><span class="line"></span><br><span class="line"><span class="number">6.02e23</span>L <span class="comment">// long double </span></span><br><span class="line"><span class="number">6.02e23</span>f <span class="comment">// float </span></span><br><span class="line"><span class="number">6.02e23</span> <span class="comment">// double</span></span><br></pre></td></tr></table></figure>
<p><code>const</code>：类型修饰符</p>
<p><code>auto</code>：类型占位符，由初始化赋值决定其类型，确定后不再改变</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> c; <span class="comment">//valid in C, error in C++</span></span><br></pre></td></tr></table></figure>
<p><strong>运算符优先级</strong></p>
<p>ysq：考试考这个就没意思了</p>
<p><strong>类型转换</strong></p>
<p>有显式有隐式，隐式转换可能导致编译通过，产生意料之外的结果，尽可能用显式转换</p>
<p><strong>数据损失</strong></p>
<p><code>long double-&gt;double-&gt;float-&gt;long-&gt;int-&gt;short-&gt;char</code></p>
<p><strong>运算</strong></p>
<p>当除号左右都是整数类型时，进行整型除法(下取整)，有一边是浮点型就按浮点型运算</p>
<p>操作数不属于<code>int, long, float, double</code>四者之一时，先无损转换至这四者再运算</p>
<h3 id="Branching-and-Looping-Statements"><a href="#Branching-and-Looping-Statements" class="headerlink" title="Branching and Looping Statements"></a>Branching and Looping Statements</h3><p><strong>就近配对</strong></p>
<p>if-else在模糊语义下是就近配对</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span>)</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;w&quot;</span>;</span><br><span class="line"><span class="comment">//output: w</span></span><br></pre></td></tr></table></figure>
<p><strong>三目运算符</strong></p>
<p><code>sign=a&lt;0?-1:1</code></p>
<p><strong>条件</strong></p>
<p><code>bool, chat, int, float</code>都可以直接塞进if()，如果可以隐式转换为<code>bool</code>就行，指针也行(用来判断是否为NULL)</p>
<p><strong>关系语句</strong></p>
<p>大于，小于，等于，不等于</p>
<p><strong>逻辑表达式</strong></p>
<p>优先级：!&gt;&amp;&amp;&gt;||</p>
<p><strong>循环</strong></p>
<p>while, do-while, for; break, continue</p>
<p>for(;;)是可以的，但for()是不可以的</p>
<p>goto: 依托答辩，降低可读性</p>
<p><strong>选择支</strong></p>
<p>switch，别忘了break！</p>
<h3 id="Data-Structures"><a href="#Data-Structures" class="headerlink" title="Data Structures"></a>Data Structures</h3><p><strong>数组</strong></p>
<p>C99及以后，数组可以根据变量开长度</p>
<p>数组在C/C++中并不是对象，而可以当作“地址”</p>
<p>数组之间不支持直接赋值，可视作常量指针：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="type">int</span> b[<span class="number">4</span>];</span><br><span class="line">b=a;<span class="comment">//error!</span></span><br></pre></td></tr></table></figure>
<p>未知后n-1维尺寸的n维数组不能作为函数参数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">int</span> mat[][])</span></span>;<span class="comment">//error!</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">int</span> mat[][<span class="number">3</span>])</span></span>;<span class="comment">//ok</span></span><br></pre></td></tr></table></figure>
<p>常量数组可以作为函数参数使用，避免修改数组内容</p>
<p><strong>字符串</strong></p>
<p>长度为n的char数组，最好只存n-1个字符，最后一个存<code>&#39;\0&#39;</code></p>
<p>若char数组中间出现了<code>&#39;\0&#39;</code>，则strlen只会统计其前的字符数，但sizeof会忠诚地记录下所有字符，包括<code>&#39;\0&#39;</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">char</span> *<span class="title">strcpy</span><span class="params">( <span class="type">char</span>* dest, <span class="type">const</span> <span class="type">char</span>* src )</span></span>;</span><br><span class="line"><span class="function"><span class="type">char</span> *<span class="title">strncpy</span><span class="params">(<span class="type">char</span> *dest, <span class="type">const</span> <span class="type">char</span> *src, <span class="type">size_t</span> count)</span></span>;</span><br><span class="line"><span class="function"><span class="type">char</span> *<span class="title">strcat</span><span class="params">( <span class="type">char</span> *dest, <span class="type">const</span> <span class="type">char</span> *src )</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">strcmp</span><span class="params">( <span class="type">const</span> <span class="type">char</span> *lhs, <span class="type">const</span> <span class="type">char</span> *rhs )</span></span>;</span><br></pre></td></tr></table></figure>
<p>string class相对而言不那么容易导致问题</p>
<p><strong>结构体<code>struct</code></strong></p>
<p>成员变量的序列，内存安排在连续的内存序列中，变量顺序可能导致结构体大小变化，为了对齐会按照最大的成员为单位申请内存</p>
<p><img src="https://s2.loli.net/2023/01/09/dOaAPIQuVFe1sKi.png" alt="UN~`HI@_K~34BZDL12_GOJ7.png" style="zoom:50%;" /></p>
<p>C语言中，为结构体生成对象需要<code>struct name var</code>，使用typedef可以省点力。而C++中则可以<code>name var</code></p>
<p><strong>联合体<code>union</code></strong></p>
<p>类似于结构体，但成员共享内存。</p>
<p>由<a href="https://github.com/NeumoNeumo">@NeumoNeumo</a>提供的<code>union</code>的使用场景：</p>
<ol>
<li><p>在 linux 0.11 的 kernel/sched.c 中，Linus 大大将进程的描述符及其用户栈放在同一页中，于是可以使用位运算很方便地由栈定位进程的描述符，反之亦然。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">task_union</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> <span class="title">task</span>;</span></span><br><span class="line">	<span class="type">char</span> <span class="built_in">stack</span>[PAGE_SIZE];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Small String Optimization 短字符串优化(可以参考下面大致理解，但实际并非如此)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">string</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">size_t</span> capacity;</span><br><span class="line">  <span class="keyword">union</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">struct</span> </span><br><span class="line">    &#123;</span><br><span class="line">      <span class="type">char</span> *ptr;</span><br><span class="line">      <span class="type">size_t</span> size;</span><br><span class="line">    &#125; heapbuf;</span><br><span class="line">    <span class="type">char</span> stackbuf[<span class="built_in">sizeof</span>(heapbuf)];</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>题外话：SSO是个不错的机制，不过也会导致一些诸如<a href="https://github.com/Yaossg">@Yaossg</a>的<a href="https://yaossg.com/blog/sso/">SSO?SOS!</a>中描述的问题。</p>
</li>
</ol>
<p><strong>枚举类<code>enum</code></strong></p>
<p>const的代替品，成员是整数，但不能参与表达式的运算，不过可以赋值给整型变量</p>
<p>默认从0开始，定义时可以指定对应的整数</p>
<p><strong>typedef</strong></p>
<p>用于代替复杂类型名称，对C结构体特攻，也可以结合预处理语句根据编译选项将不同类型对接给指定类型名</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> defined(_LP64) </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> <span class="type">wchar_t</span>; </span><br><span class="line"><span class="meta">#<span class="keyword">else</span> </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">wchar_t</span>; </span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<h3 id="Pointers-and-Dynamic-Memory-Management"><a href="#Pointers-and-Dynamic-Memory-Management" class="headerlink" title="Pointers and Dynamic Memory Management"></a>Pointers and Dynamic Memory Management</h3><p><strong>指针</strong></p>
<p>32-bit/64-bit整数，用<code>type *</code>定义，用<code>&amp;</code>取址，用<code>*</code>取值</p>
<p><code>p-&gt;member</code>等价于<code>(*p).member</code></p>
<p><strong>常量与指针</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> another = <span class="number">2</span>;</span><br><span class="line"><span class="comment">// 不能通过p1修改值</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> *p1 = &amp;num;</span><br><span class="line"><span class="comment">// int const * p1 = &amp;num</span></span><br><span class="line">*p1 = <span class="number">3</span>; <span class="comment">// error</span></span><br><span class="line">num = <span class="number">3</span>; <span class="comment">// okay</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不能修改p2的指向</span></span><br><span class="line"><span class="type">int</span> *<span class="type">const</span> p2 = &amp;num;</span><br><span class="line">*p2 = <span class="number">3</span>;       <span class="comment">// okay</span></span><br><span class="line">p2 = &amp;another; <span class="comment">// error</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 都不能修改</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> *<span class="type">const</span> p3 = &amp;num;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不能将常指针赋值给指针变量</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> *p2=p;<span class="comment">//syntax error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>指针与数组</strong></p>
<p>数组是常指针，用sizeof可以得到数组所有元素的内存大小和，用sizeof只能得到指针变量的大小：4/8</p>
<p>指针也可以用中括号访问对应内存</p>
<p>指针的运算是按对应元素的下标进行的，p+1代表下一个元素，跳跃字节数是对应类型的字节数</p>
<p>小心越界</p>
<p><strong>申请内存: C style</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> len;</span><br><span class="line"><span class="type">int</span> *p=(<span class="type">int</span> *)<span class="built_in">malloc</span>(len*<span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line"><span class="comment">//void *malloc(size_t size)</span></span><br><span class="line"><span class="comment">//申请size字节的未初始化内存</span></span><br></pre></td></tr></table></figure>
<p>如果为一个int型指针malloc(1)，只分配了1字节，系统则会授予4字节的访问权限，导致可能的越界，非常危险。</p>
<p><strong>内存释放: C style</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span>* p = (<span class="type">int</span> *) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125; <span class="comment">//memory leak</span></span><br></pre></td></tr></table></figure>
<p>函数结束时只有临时指针变量p被释放，申请的那块内存却没有free，导致内存泄漏，应该在return前加个free(p)</p>
<p><strong>申请内存: C++ style</strong></p>
<p>new 和 new[]</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//allocate an int, default initializer (do nothing)</span></span><br><span class="line"><span class="type">int</span> * p1 = <span class="keyword">new</span> <span class="type">int</span>; </span><br><span class="line"><span class="comment">//allocate an int, initialized to 0</span></span><br><span class="line"><span class="type">int</span> * p2 = <span class="keyword">new</span> <span class="built_in">int</span>();</span><br><span class="line"><span class="comment">//allocate an int, initialized to 5</span></span><br><span class="line"><span class="type">int</span> * p3 = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">5</span>); </span><br><span class="line"><span class="comment">//allocate an int, initialized to 0</span></span><br><span class="line"><span class="type">int</span> * p4 = <span class="keyword">new</span> <span class="type">int</span>&#123;&#125;;<span class="comment">//C++11 </span></span><br><span class="line"><span class="comment">//allocate an int, initialized to 5</span></span><br><span class="line"><span class="type">int</span> * p5 = <span class="keyword">new</span> <span class="type">int</span> &#123;<span class="number">5</span>&#125;;<span class="comment">//C++11</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//allocate a Student object, default initializer</span></span><br><span class="line">Student * ps1 = <span class="keyword">new</span> Student;</span><br><span class="line"><span class="comment">//allocate a Student object, initialize the members</span></span><br><span class="line">Student * ps2 = <span class="keyword">new</span> Student &#123;<span class="string">&quot;Yu&quot;</span>, <span class="number">2020</span>, <span class="number">1</span>&#125;; <span class="comment">//C++11</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//allocate 16 int, default initializer (do nothing) </span></span><br><span class="line"><span class="type">int</span> * pa1 = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">16</span>];</span><br><span class="line"><span class="comment">//allocate 16 int, zero initialized </span></span><br><span class="line"><span class="type">int</span> * pa2 = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">16</span>]();</span><br><span class="line"><span class="comment">//allocate 16 int, zero initialized </span></span><br><span class="line"><span class="type">int</span> * pa3 = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">16</span>]&#123;&#125;; <span class="comment">//C++11</span></span><br><span class="line"><span class="comment">//allocate 16 int, the first 3 element are initialized to 1,2,3, the rest 0</span></span><br><span class="line"><span class="type">int</span> * pa4 = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">16</span>]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;; <span class="comment">//C++11</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//allocate memory for 16 Student objects, default initializer</span></span><br><span class="line">Student * psa1 = <span class="keyword">new</span> Student[<span class="number">16</span>];</span><br><span class="line"><span class="comment">//allocate memory for 16 Student objects, the first two are explicitly initialized</span></span><br><span class="line">Student * psa2 = <span class="keyword">new</span> Student[<span class="number">16</span>]&#123;&#123;<span class="string">&quot;Li&quot;</span>, <span class="number">2000</span>,<span class="number">1</span>&#125;, &#123;<span class="string">&quot;Yu&quot;</span>, <span class="number">2001</span>,<span class="number">1</span>&#125;&#125;; <span class="comment">//C++11</span></span><br></pre></td></tr></table></figure>
<p><strong>释放内存: C++ style</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//deallocate memory</span></span><br><span class="line"><span class="keyword">delete</span> p1;</span><br><span class="line"><span class="comment">//deallocate memory</span></span><br><span class="line"><span class="keyword">delete</span> ps1;</span><br><span class="line"></span><br><span class="line"><span class="comment">//deallocate the memory of the array</span></span><br><span class="line"><span class="keyword">delete</span> pa1;</span><br><span class="line"><span class="comment">//deallocate the memory of the array</span></span><br><span class="line"><span class="keyword">delete</span> []pa2;</span><br><span class="line"></span><br><span class="line"><span class="comment">//deallocate the memory of the array, and call the destructor of the first element</span></span><br><span class="line"><span class="keyword">delete</span> psa1;</span><br><span class="line"><span class="comment">//deallocate the memory of the array, and call the destructors of all the elements</span></span><br><span class="line"><span class="keyword">delete</span> []psa2;</span><br></pre></td></tr></table></figure>
<h3 id="Basics-of-Functions"><a href="#Basics-of-Functions" class="headerlink" title="Basics of Functions"></a>Basics of Functions</h3><p>函数的声明、定义在跨文件之间的顺序</p>
<p>调用函数是有代价的：调用栈存储返回值地址，存储寄存器变量，存储临时变量</p>
<p><strong>参数</strong></p>
<p>值传递，指针的值传递，引用传递(C++)</p>
<p><strong>引用(C++)</strong></p>
<p>引用必须在声明时初始化，相比指针更安全</p>
<p>传递引用会导致对函数参数的修改会影响到被传入的变量，为防止其修改，可将传入参数用const修饰</p>
<p><strong>内联</strong></p>
<p>编译时，编译器会试图将内联函数展开，增加编译用时但减少运行用时</p>
<p>在极短情况下，宏是个不错的选择</p>
<h3 id="Advances-in-Functions"><a href="#Advances-in-Functions" class="headerlink" title="Advances in Functions"></a>Advances in Functions</h3><p><strong>默认参数(C++)</strong></p>
<p>默认参数只能集中放在最后几个参数位</p>
<p><strong>函数的重载(C++)</strong></p>
<p>同名，不同参数类型/个数，不同返回类型</p>
<p><strong>函数模板</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">sum</span><span class="params">(T x, T y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ...;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//显式实例化</span></span><br><span class="line"><span class="keyword">template</span> <span class="type">double</span> <span class="built_in">sum</span>&lt;<span class="type">double</span>&gt;(<span class="type">double</span>, <span class="type">double</span>);</span><br><span class="line"><span class="comment">//隐式实例化</span></span><br><span class="line"><span class="type">int</span> p1=<span class="built_in">sum</span>&lt;<span class="type">int</span>&gt;(<span class="number">1.0f</span>,<span class="number">2.0f</span>);</span><br><span class="line"><span class="type">float</span> p2=<span class="built_in">sum</span>(<span class="number">1.0f</span>,<span class="number">2.0f</span>);</span><br><span class="line"><span class="comment">//特例化</span></span><br><span class="line"><span class="keyword">template</span> &lt;&gt;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">sum</span><span class="params">(<span class="type">double</span> x, <span class="type">double</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>函数指针</strong></p>
<p>可以和函数名混用，加<code>*</code>加<code>&amp;</code>无所谓，可以当作参数传入函数：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">qsort</span><span class="params">( <span class="type">void</span> *ptr, <span class="type">size_t</span> count, <span class="type">size_t</span> size, <span class="type">int</span> (*comp)(<span class="type">const</span> <span class="type">void</span> *, <span class="type">const</span> <span class="type">void</span> *) )</span></span>;</span><br></pre></td></tr></table></figure>
<p>需要给定函数的返回类型和参数列表、参数类型</p>
<p><strong>函数引用</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">float</span> <span class="title">norm_l1</span><span class="params">(<span class="type">float</span> x, <span class="type">float</span> y)</span></span>; <span class="comment">//declaration</span></span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">norm_l2</span><span class="params">(<span class="type">float</span> x, <span class="type">float</span> y)</span></span>; <span class="comment">//declaration</span></span><br><span class="line"><span class="built_in">float</span> (&amp;norm_ref)(<span class="type">float</span> x, <span class="type">float</span> y) = norm_l1; <span class="comment">//norm_ref is a function reference</span></span><br></pre></td></tr></table></figure>
<p>存在意义不明</p>
<p><strong>递归函数</strong></p>
<p>适用树形遍历等场景，短小精悍</p>
<p>占用栈内存，慢，难实现/debug</p>
<h3 id="Speedup-Your-Program"><a href="#Speedup-Your-Program" class="headerlink" title="Speedup Your Program"></a>Speedup Your Program</h3><p>ARM is a family of reduced instruction set computing (RISC) architectures for computer processors.</p>
<p>ARM是一个用于计算机处理器的精简指令集计算（RISC）架构系列。</p>
<p>ARM is the most widely used instruction set architecture (ISA) and the ISA produced in the largest quantity.</p>
<p>ARM是使用最广泛的指令集架构（ISA），也是生产数量最多的ISA。</p>
<p>Simple is beautiful.</p>
<p><strong>SIMD: Single instruction, multiple data</strong></p>
<p>将多个数据合并为一个变量，同时进行运算</p>
<p><strong>OpenMP</strong></p>
<p>循环展开进行多线程并行，但展开也需要耗时，每层都展开可能反而会慢</p>
<p>一般而言，若外层循环次数远小于内层，则#pragma放内层，否则放外层</p>
<h3 id="Basics-of-Classes"><a href="#Basics-of-Classes" class="headerlink" title="Basics of Classes"></a>Basics of Classes</h3><p><strong>访问权限指定</strong></p>
<p>private, public, protected, default</p>
<p><strong>成员函数</strong></p>
<p>可以在类内外定义，加inline相当于就在类内，甚至可以跨文件</p>
<p><strong>构造函数</strong></p>
<p>创建对象时：</p>
<p>结构体：申请内存</p>
<p>类：申请内存，调用构造器</p>
<p>构造器名字和类名一样，无返回值</p>
<p><strong>析构函数</strong></p>
<p>销毁对象时调用，用<code>~</code>加类名表示，无参数无返回值</p>
<p>delete[]时会调用对象数组中每个对象的析构函数，delete则只会调用第一个对象的析构函数</p>
<p><strong>this指针</strong></p>
<p>指向调用当前函数的对象</p>
<p><strong>常量成员</strong></p>
<p>常量成员变量和常变量一样，不能修改</p>
<p>const放在函数参数列表后修饰成员函数，保证该函数不会修改成员变量</p>
<p><strong>静态成员</strong></p>
<p>静态成员与实例不绑定，所有实例共享</p>
<h3 id="Advances-in-Classes"><a href="#Advances-in-Classes" class="headerlink" title="Advances in Classes"></a>Advances in Classes</h3><p><strong>重载操作符</strong></p>
<p>通过成员函数重载：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//类内</span></span><br><span class="line">return_type <span class="keyword">operator</span>+(<span class="type">const</span> operand2_type &amp;t) <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//return something of return_type</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//类外</span></span><br><span class="line">return_type operand1_type::<span class="keyword">operator</span>+(<span class="type">const</span> operand2_type &amp;t) <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//return something of return_type</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样重载的符号左右顺序不能反，<code>a+b</code>相当于<code>a.operator+(b)</code></p>
<p><strong>友元函数</strong></p>
<p>部分操作符可以通过友元函数重载，但赋值操作符<code>=</code>不行</p>
<p>友元函数需要在类中声明，可以在类内外定义，可以访问类的成员(含私有)，但说到底也只是友元，不是成员。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//类内定义</span></span><br><span class="line"><span class="keyword">friend</span> return_type <span class="keyword">operator</span>+(<span class="type">const</span> operand1_type&amp;a, <span class="type">const</span> operand2_type &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//return something of return_type</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//类内声明+类外定义，不需要加operand1_type::</span></span><br><span class="line"><span class="keyword">friend</span> return_type <span class="keyword">operator</span>+(<span class="type">const</span> operand1_type&amp;a, <span class="type">const</span> operand2_type &amp;b);</span><br><span class="line"></span><br><span class="line">return_type <span class="keyword">operator</span>+(<span class="type">const</span> operand1_type&amp;a, <span class="type">const</span> operand2_type &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//return something of return_type</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>标准输入输出流重载</strong></p>
<p>由于重载的是std命名空间中的输入输出流操作符，所以是std::而不是MyTime::</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">friend</span> std::ostream &amp; <span class="keyword">operator</span>&lt;&lt;(std::ostream &amp; os, <span class="type">const</span> MyTime &amp; t)</span><br><span class="line">&#123;</span><br><span class="line">    std::string str = std::<span class="built_in">to_string</span>(t.hours) + <span class="string">&quot; hours and &quot;</span> + std::<span class="built_in">to_string</span>(t.minutes) + <span class="string">&quot; minutes.&quot;</span>;</span><br><span class="line">    os &lt;&lt; str;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>类型转换</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//隐式转换</span></span><br><span class="line"><span class="function"><span class="keyword">operator</span> <span class="title">int</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>-&gt;hours * <span class="number">60</span> + <span class="keyword">this</span>-&gt;minutes;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//显式转换</span></span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="keyword">operator</span> <span class="title">float</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">float</span>(<span class="keyword">this</span>-&gt;hours * <span class="number">60</span> + <span class="keyword">this</span>-&gt;minutes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也可通过转换构造器完成</p>
<p><strong>重载赋值操作符</strong></p>
<p>只能通过成员函数重载</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">class_type &amp; <span class="keyword">operator</span>=(rhs_type &amp;rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//对this进行修改</span></span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>重载自增自减操作符</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// prefix increment</span></span><br><span class="line">MyTime&amp; <span class="keyword">operator</span>++()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;minutes++;</span><br><span class="line">    <span class="keyword">this</span>-&gt;hours += <span class="keyword">this</span>-&gt;minutes / <span class="number">60</span>;</span><br><span class="line">    <span class="keyword">this</span>-&gt;minutes = <span class="keyword">this</span>-&gt;minutes % <span class="number">60</span>;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// postfix increment</span></span><br><span class="line">MyTime <span class="keyword">operator</span>++(<span class="type">int</span>)</span><br><span class="line">&#123;</span><br><span class="line">    MyTime old = *<span class="keyword">this</span>; <span class="comment">// keep the old value</span></span><br><span class="line">    <span class="keyword">operator</span>++(); <span class="comment">// prefix increment</span></span><br><span class="line">    <span class="keyword">return</span> old; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>可重载操作符列表</strong></p>
<p><img src="https://s2.loli.net/2023/01/09/GaWTF7jNyBOclK6.png" alt="TFSB_@~S__OR_C7M_GU0M6G.png" style="zoom:50%;" /></p>
<p>重载操作符不会更改其优先级！</p>
<h3 id="Dynamic-Memory-Management-in-Classes"><a href="#Dynamic-Memory-Management-in-Classes" class="headerlink" title="Dynamic Memory Management in Classes"></a>Dynamic Memory Management in Classes</h3><p><strong>默认构造函数</strong></p>
<p>没定义任何构造器时会有个默认的，啥也不干</p>
<p>定义构造器后默认的构造器会消失，因此可能会没有默认构造器</p>
<p>所有参数都有默认值的构造器就是默认构造器，只能有一个</p>
<p><strong>默认析构函数</strong></p>
<p>没定义析构函数时会有个默认的，啥也不干</p>
<p><strong>默认复制函数</strong></p>
<p>只有一个参数，或者其他参数都有默认值</p>
<p>默认复制所有非静态的数据成员</p>
<p><strong>复制赋值操作符</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">class_type &amp; class_type::<span class="keyword">operator</span>=(class_type &amp;rhs)&#123;...&#125;</span><br></pre></td></tr></table></figure>
<p>参数和返回值以及当前类是同一类型</p>
<p>默认复制所有非静态的数据成员</p>
<p><strong>硬拷贝 vs. 软拷贝</strong></p>
<p>硬拷贝把所有内容，以及指向的内容全部单独复制过来</p>
<p>软拷贝对于指针只会复制指针的值，使得多个对象的指针成员指向同一块内存</p>
<p><strong>共享指针</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">std::shared_ptr&lt;MyTime&gt; <span class="title">mt1</span><span class="params">(<span class="keyword">new</span> MyTime(<span class="number">10</span>))</span></span>;</span><br><span class="line">std::shared_ptr&lt;MyTime&gt; mt2 = mt1;</span><br><span class="line"><span class="keyword">auto</span> mt1 = std::<span class="built_in">make_shared</span>&lt;MyTime&gt;(<span class="number">1</span>, <span class="number">70</span>);</span><br></pre></td></tr></table></figure>
<p>能保证对象在没有指针指向它的时候能删掉</p>
<p><strong>独有指针</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">std::unique_ptr&lt;MyTime&gt; <span class="title">mt1</span><span class="params">(<span class="keyword">new</span> MyTime(<span class="number">10</span>))</span></span>;</span><br><span class="line">std::unique_ptr&lt;MyTime&gt; mt2 = std::<span class="built_in">make_unique</span>&lt;MyTime&gt;(<span class="number">80</span>); <span class="comment">//c++17</span></span><br><span class="line">std::unique_ptr&lt;MyTime&gt; mt3 = std::<span class="built_in">move</span>(mt1);</span><br></pre></td></tr></table></figure>
<p>一个独有指针能阻止其他指针指向它的对象，但可以通过move转移给别的指针</p>
<h3 id="Class-Inheritance"><a href="#Class-Inheritance" class="headerlink" title="Class Inheritance"></a>Class Inheritance</h3><p><strong>基类 vs. 派生类</strong></p>
<p>派生类从基类继承属性与函数，C++支持多基类继承和多层继承</p>
<p><strong>派生类的构造函数</strong></p>
<p>实例化一个派生类对象时，分配内存，派生类构造器被调用，必须首先调用基类构造器(会默认调用无参构造器，一般通过初始化列表将基类信息传给基类构造器)，然后再执行派生类构造器的其他内容，初始化派生类独占成员。</p>
<p><strong>派生类的析构函数</strong></p>
<p>与构造函数相反，首先调用派生类的析构函数，然后调用基类的析构函数</p>
<p><strong>访问控制</strong></p>
<p>protected：类似private，成员、友元和派生类可以访问</p>
<p>protected inheritance：基类中的public和protected成员在派生类中成为protected，只能被各级派生类访问</p>
<p>private inheritance：基类中的public和protected成员在派生类中成为private，只能被一级派生类访问</p>
<p><strong>虚函数</strong></p>
<p>如果使用语句<code>base *p=derived_object</code>，且派生类和基类拥有相同函数头的函数，则会绑定基类函数。</p>
<p>但如果基类函数设置为virtual，则会使这个函数在基类和所有派生类中均虚拟，动态绑定到派生类函数</p>
<p><strong>虚析构器</strong></p>
<p>如果基类构造器未设置为virtual，则上述例子<code>delete p</code>时只会调用基类析构函数，不会调用派生类析构函数！</p>
<p><strong>动态内存分配</strong></p>
<p>如果基类使用了动态内存分配，并且重载了复制操作符和赋值操作符：</p>
<ol>
<li>如果派生类没有动态内存分配，就无所谓</li>
<li>如果派生类有动态内存分配，则应该重定义复制操作符和赋值操作符</li>
</ol>
<h3 id="Class-Templates-and-std-Library"><a href="#Class-Templates-and-std-Library" class="headerlink" title="Class Templates and std Library"></a>Class Templates and std Library</h3><p><strong>类模板</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">class_name</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//members and friends</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Explicitly instantiate </span></span><br><span class="line"><span class="keyword">template</span> <span class="keyword">class</span> <span class="title class_">class_name</span>&lt;<span class="type">int</span>&gt;;</span><br><span class="line"><span class="comment">//Implicitly instantiate</span></span><br><span class="line">class_name&lt;&gt;</span><br></pre></td></tr></table></figure>
<p><strong>非类型参数</strong></p>
<p>参数可以有：类型模板参数，模板模板参数，非类型模板参数(整数、浮点、指针、左值引用…)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="type">size_t</span> rows, <span class="type">size_t</span> cols&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mat</span></span><br><span class="line">&#123;</span><br><span class="line">    T data[rows][cols];</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Mat</span>()&#123;&#125;</span><br><span class="line">    <span class="function">T <span class="title">getElement</span><span class="params">(<span class="type">size_t</span> r, <span class="type">size_t</span> c)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">setElement</span><span class="params">(<span class="type">size_t</span> r, <span class="type">size_t</span> c, T value)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>特例化</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">class_name</span>&lt;<span class="type">int</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//members and friends</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>std类</strong></p>
<p>一些基于模板类的，封装好的容器</p>
<h3 id="Error-Handling"><a href="#Error-Handling" class="headerlink" title="Error Handling"></a>Error Handling</h3><p>stdin,stdout,stderr</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">fprintf</span>(stdout,<span class="string">&quot;info&quot;</span>,...);<span class="comment">//C</span></span><br><span class="line">std::cerr&lt;&lt;<span class="string">&quot;info&quot;</span>;<span class="comment">//C++</span></span><br></pre></td></tr></table></figure>
<p><strong>重定向</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./a.out &lt;1.in  &gt;1.out 2&gt;1.err</span><br><span class="line">2&gt;&amp;1相当于将错误输出流重定向到标准输出流</span><br></pre></td></tr></table></figure>
<p><strong>assert</strong></p>
<p>如果条件句为true则不做处理，否则输出诊断信息并调用abort()中止程序。</p>
<p><strong>异常</strong></p>
<p>throw了可以不catch，只不过抛到main里还不捉就会中止运行。</p>
<p>一个try可以被多个catch跟着，但不能没有，如果没有被catch就会继续抛到调用函数的函数</p>
<p>catch(…)可以捉住所有异常</p>
<p>catch(const Base &amp;base)可以捉住子类异常</p>
<p>noexcept关键字保证函数不会抛任何异常</p>
<p>nothrow在new的时候会使用一个不抛异常的申请函数</p>
<h3 id="Nested-Classes-and-RTTI"><a href="#Nested-Classes-and-RTTI" class="headerlink" title="Nested Classes and RTTI"></a>Nested Classes and RTTI</h3><p><strong>友元类</strong></p>
<p>友元类可以在任何权限域声明，可以访问所有成员</p>
<p>一个类成员函数可以声明为他类友元函数，不过要注意声明顺序问题</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Sniper</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> bullets;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Sniper</span>(<span class="type">int</span> bullets = <span class="number">0</span>): <span class="built_in">bullets</span>(bullets)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="type">bool</span> <span class="title">Supplier::provide</span><span class="params">(Sniper &amp;)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>嵌套类</strong></p>
<p>也有三个scope，private， protected， public</p>
<p><strong>RTTI</strong></p>
<p>dynamic_cast：多态类型间转换</p>
<p>typeid：鉴别两个类是否相同</p>
<p>type_info：typeid操作符返回一个该类型引用，可以用重载比较符比较是否为同类</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">derived_object=<span class="built_in">dynamic_cast</span>&lt;Base&gt;(&amp;base_object);</span><br></pre></td></tr></table></figure>
<p>const_cast：常数转换</p>
<p>static_cast：只有能隐式转换的时候才有效，不然返回错误</p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>CS205 C/C++ Project05设计报告 矩阵类</title>
    <url>/2023/01/02/CS205_%E9%A1%B9%E7%9B%AE%E8%AE%BE%E8%AE%A1%E6%8A%A5%E5%91%8A_Matrix_Class/</url>
    <content><![CDATA[<h2 id="Part-0-团队成员"><a href="#Part-0-团队成员" class="headerlink" title="Part 0. 团队成员"></a>Part 0. <del>团队</del>成员</h2><div class="table-container">
<table>
<thead>
<tr>
<th>姓名</th>
<th>学号</th>
<th><del>贡献率</del></th>
</tr>
</thead>
<tbody>
<tr>
<td>咕桃</td>
<td>-</td>
<td><del>100%</del></td>
</tr>
</tbody>
</table>
</div>
<h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">E:\CPP\PROJECT05</span><br><span class="line">│  CMakeLists.txt</span><br><span class="line">│  README.md</span><br><span class="line">│</span><br><span class="line">├─build</span><br><span class="line">│      <span class="comment">//makefile here</span></span><br><span class="line">│</span><br><span class="line">├─doc</span><br><span class="line">│      Report.pdf</span><br><span class="line">│</span><br><span class="line">└─src</span><br><span class="line">        benchmark.cpp</span><br><span class="line">        data.hpp</span><br><span class="line">        matrix.hpp</span><br></pre></td></tr></table></figure>
<p>*编译时添加选项 -DSAFE 可以调用严格版函数实现。</p>
<h2 id="Part-1-Analysis"><a href="#Part-1-Analysis" class="headerlink" title="Part 1 - Analysis"></a>Part 1 - Analysis</h2><h3 id="题目重述-amp-主要思路"><a href="#题目重述-amp-主要思路" class="headerlink" title="题目重述&amp;主要思路"></a>题目重述&amp;主要思路</h3><p>本题目要求使用C++语言实现一个具有一定功能的矩阵类。</p>
<p>根据题目描述，题目要求的矩阵乘法需要支持的主要功能为：</p>
<ol>
<li>支持多通道存储数据</li>
<li>支持多种数据类型</li>
<li>赋值时避免深拷贝(Hard Copy)，安全管理内存</li>
<li>重载基本运算符</li>
<li>不使用深拷贝实现ROI</li>
</ol>
<p>本项目除完成上述基础要求外，支持以下内容：</p>
<ol>
<li><strong>支持任意合理重载运算符的数据类型</strong></li>
<li><strong>跨数据类型运算、转换、赋值</strong>(提供转换函数接口)</li>
<li><strong>异常处理机制</strong>(另提供严格版函数)</li>
<li><strong>子矩阵/掩膜提取两类ROI实现</strong></li>
<li><strong>逐元素一元/二元自定义运算</strong>(提供运算函数接口)</li>
<li><strong>默认重载软拷贝(Shallow Copy)，提供硬拷贝函数</strong></li>
<li><strong>更多易用重载运算符</strong></li>
<li><strong><del>用户友好的足量注释</del></strong></li>
</ol>
<h3 id="模型假设"><a href="#模型假设" class="headerlink" title="模型假设"></a>模型假设</h3><p>项目要求矩阵类需要适用于不同数据类型，因此本项目主体使用类模板完成，笔者考虑该库所可能使用的数据范围作为本项目支持的数据规模，如下：</p>
<ul>
<li>可适用的矩阵尺寸因元素类型而异，因此未设置<code>rows</code>和<code>cols</code>上限(不抛出<code>bad alloc exception</code>即可)。</li>
<li>通道数上限<code>MAX_CHANNEL</code>通过宏默认设置为4(适用于ARGB存储图像)，有更大需求修改宏即可</li>
<li>矩阵元素的数据兼容基本数据类型，适用于满足前置条件的自定义类型：<ul>
<li>无参数构造器，重载<code>=</code>，<code>==(!=)</code></li>
<li>与其他类型的隐式转换/显式的转换函数</li>
<li>与不同类型进行运算的结果类型推导</li>
</ul>
</li>
<li>多通道矩阵连续访问同一通道不同元素次数&gt;同一元素不同通道值次数，因此选择对通道进行稀疏存储，即同一通道内行优先存储。</li>
</ul>
<h2 id="Part-2-Code"><a href="#Part-2-Code" class="headerlink" title="Part 2 - Code"></a>Part 2 - Code</h2><p>本项目实现了严格版和普通版两版实现，安全性均可保证，但严格版的异常抛出信息更为具体，便于调试，此处展示严格版实现。</p>
<h3 id="矩阵数据类"><a href="#矩阵数据类" class="headerlink" title="矩阵数据类"></a>矩阵数据类</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//data.hpp</span></span><br><span class="line"><span class="comment">//data class</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Tp&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">data</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Tp *value;</span><br><span class="line">    <span class="type">size_t</span> length;</span><br><span class="line">    <span class="type">size_t</span> *ref_count;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>本项目根据尽可能避免Hard Copy的要求，参考课上所述的形式将矩阵内数据以私有成员的形式安全封装为类模板，在以<code>Tp *</code>指针<code>value</code>存储数据头外，附加存储了<code>size_t</code>类型的数据长度<code>length</code>，以及<code>size_t *</code>类型的“数据复用次数”统计变量<code>ref_count</code>，表示该数据可被多少个对象调用，便于析构矩阵时安全地释放内存。</p>
<h3 id="矩阵类"><a href="#矩阵类" class="headerlink" title="矩阵类"></a>矩阵类</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//matrix.hpp</span></span><br><span class="line"><span class="comment">//matrix class</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_CHANNEL (4)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_CHANNEL (4)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Tp&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">matrix</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">typedef</span> matrix&lt;<span class="type">bool</span>&gt; mask;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="type">char</span> channel_number;</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> rows;</span><br><span class="line">    <span class="type">size_t</span> cols;</span><br><span class="line">    <span class="comment">//number of channels should be [1,MAX_CHANNEL]</span></span><br><span class="line">    channel_number channels;</span><br><span class="line">    <span class="comment">//padding of relative position</span></span><br><span class="line">    <span class="type">size_t</span> channel_pad;</span><br><span class="line">    <span class="type">size_t</span> step;</span><br><span class="line">    <span class="type">size_t</span> shift;</span><br><span class="line">    data&lt;Tp&gt; *dat;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>本项目的矩阵类实现为类模板，以私有成员的形式存储了包括行数、列数、通道数、内部数据的基本信息，其中行列数使用<code>size_t</code>存储，通道数限定在<code>[1, MAX_CHANNEL]</code>间，使用<code>char(channel_number)</code>存储，最大通道数默认为4，数据使用<code>data</code>类以行优先、通道稀疏存储，下图是一个<code>5*5</code>的RGB三通道矩阵在类中的存储方式：</p>
<p><img src="https://s2.loli.net/2022/12/18/21tVGCweI3EmWMk.png" alt="P0~QOP3BOMINV6PH_J@9YEU.png" style="zoom:50%;" /></p>
<p>根据题目对<code>Non-Hard-Copy ROI</code>的要求，为了复用同一<code>dat</code>，矩阵类多存了三个<code>size_t</code>类型变量：<code>shift</code>，<code>step</code>，<code>channel_pad</code>。</p>
<ul>
<li><code>shift</code>：存储当前矩阵相对<code>dat-&gt;value</code>的数据起始位置</li>
<li><code>step</code>：存储该数据原本的列数</li>
<li><code>channel_pad</code>：跳转到下一通道该元素所需加的数，即单个通道的尺寸</li>
</ul>
<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><h4 id="data"><a href="#data" class="headerlink" title="data"></a>data</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//data.hpp</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Tp&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">data</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//! constructor using the given source data</span></span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">data</span><span class="params">(Tp *dat, <span class="type">size_t</span> length)</span></span>;</span><br><span class="line">    <span class="comment">//! constructor that malloc new memory of the given length</span></span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">data</span><span class="params">(<span class="type">size_t</span> length)</span></span>;</span><br><span class="line">    <span class="comment">//! soft copy constructor</span></span><br><span class="line">    <span class="built_in">data</span>(<span class="type">const</span> data &amp;p);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于<code>data</code>类，项目支持源数据指针+数据长和仅传入数据长两种构造器以及软拷贝构造器(直接传递<code>value</code>指针)，此处展示<strong>仅传入数据长的构造器</strong>。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//! constructor that malloc new memory of the given length</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Tp&gt;</span><br><span class="line">data&lt;Tp&gt;::<span class="built_in">data</span>(<span class="type">size_t</span> length):<span class="built_in">length</span>(length)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        value = <span class="keyword">new</span> Tp[length];</span><br><span class="line">        ref_count = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">1</span>]&#123;<span class="number">1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">catch</span> (std::bad_alloc &amp;e)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cerr &lt;&lt; <span class="string">&quot;Bad Alloc Exception: Failed to allocate memory of the given length &quot;</span> &lt;&lt; length &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        <span class="keyword">throw</span> std::<span class="built_in">bad_alloc</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>仅传入数据长的构造器要求<code>Tp</code>类型需要有无参构造器，在为<code>value</code>申请空间时能捕获异常，通过错误流输出报错信息。</p>
<h4 id="matrix"><a href="#matrix" class="headerlink" title="matrix"></a>matrix</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//matrix.hpp</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Tp&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">matrix</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//! constructor that sets matrix elements to given source data</span></span><br><span class="line">    <span class="built_in">matrix</span>(<span class="type">size_t</span> rows, <span class="type">size_t</span> cols, Tp *src, channel_number channels = <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//! constructor that sets each matrix element to specified value</span></span><br><span class="line">    <span class="built_in">matrix</span>(<span class="type">size_t</span> rows, <span class="type">size_t</span> cols, <span class="type">const</span> Tp &amp;value, channel_number channels = <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//! submatrix constructor(ROI)</span></span><br><span class="line">    <span class="built_in">matrix</span>(matrix &amp;src, <span class="type">size_t</span> row1, <span class="type">size_t</span> col1, <span class="type">size_t</span> row2, <span class="type">size_t</span> col2);</span><br><span class="line">    <span class="comment">//! copy constructor (soft copy)</span></span><br><span class="line">    <span class="built_in">matrix</span>(<span class="type">const</span> matrix &amp;p);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>matrix</code>严格意义上的构造器有4个，分别是尺寸+数据源、尺寸+单个值、子矩阵、软拷贝构造器，此处展示<strong>尺寸+数据源构造器</strong>和<strong>软拷贝构造器</strong>，子矩阵构造器会在ROI部分详讲。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//! constructor that sets matrix elements to given source data</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Tp&gt;</span><br><span class="line">matrix&lt;Tp&gt;::<span class="built_in">matrix</span>(<span class="type">size_t</span> rows, <span class="type">size_t</span> cols, Tp *src, channel_number channels):<span class="built_in">rows</span>(rows), <span class="built_in">cols</span>(cols), <span class="built_in">channels</span>(channels)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (rows * cols == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> std::<span class="built_in">invalid_argument</span>(<span class="string">&quot;Invalid Argument Exception: row number and column number should be positive.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (channels &gt; MAX_CHANNEL || channels &lt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> std::<span class="built_in">invalid_argument</span>(<span class="string">&quot;Invalid Argument Exception: channel number should be in [1,MAX_CHANNEL].\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>-&gt;shift = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>-&gt;step = cols;</span><br><span class="line">    <span class="keyword">this</span>-&gt;channel_pad = rows * cols;</span><br><span class="line">    <span class="keyword">this</span>-&gt;dat = <span class="keyword">new</span> <span class="built_in">data</span>&lt;Tp&gt;(src, <span class="built_in">size</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在生成与其他矩阵不存在包含关系的新矩阵时，将<code>shift</code>置零，<code>step</code>设为<code>cols</code>，<code>channel_pad</code>设为<code>rows*cols</code>，使用数据源创建<code>data</code>即可，过程中对矩阵的尺寸也做了检查和异常处理。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//! copy constructor (soft copy)</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Tp&gt;</span><br><span class="line">matrix&lt;Tp&gt;::<span class="built_in">matrix</span>(<span class="type">const</span> matrix &amp;p)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (p.<span class="built_in">get_dat</span>() == <span class="literal">nullptr</span> || p.<span class="built_in">get_dat</span>() == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> std::<span class="built_in">invalid_argument</span>(<span class="string">&quot;Null Pointer Exception: The data of source matrix is null.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    rows = p.<span class="built_in">get_rows</span>();</span><br><span class="line">    cols = p.<span class="built_in">get_cols</span>();</span><br><span class="line">    channels = p.<span class="built_in">get_channels</span>();</span><br><span class="line">    step = p.<span class="built_in">get_step</span>();</span><br><span class="line">    shift = p.<span class="built_in">get_shift</span>();</span><br><span class="line">    dat = p.<span class="built_in">get_dat</span>();</span><br><span class="line">    dat-&gt;<span class="built_in">inc_ref_count</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>软拷贝构造器，直接传递成员即可，同时将被引用的数据的<code>ref_count</code>自增。使用getter是因为原计划再包一个template，支持不同模板类之间的拷贝(不同模板类之间私有成员互不可见)，但转换过程是硬拷贝的，因此未在此函数实现跨类复制。</p>
<h3 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//! increase refcount</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Tp&gt;</span><br><span class="line"><span class="type">void</span> data&lt;Tp&gt;::<span class="built_in">inc_ref_count</span>()</span><br><span class="line">&#123;</span><br><span class="line">    (*ref_count)++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//! decrease refcount</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Tp&gt;</span><br><span class="line"><span class="type">void</span> data&lt;Tp&gt;::<span class="built_in">dec_ref_count</span>()</span><br><span class="line">&#123;</span><br><span class="line">    (*ref_count)--;</span><br><span class="line">    <span class="keyword">if</span> (!(*ref_count))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;~<span class="built_in">data</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为避免硬拷贝，同一块数据可能同时被若干个矩阵中的<code>data *</code>指向。在创建/复制矩阵时，若使用了已经存在的data，则调用<code>inc_ref_count</code>，在删除矩阵时，不能直接释放数据，而是调用<code>dec_ref_count</code>，待<code>ref_count</code>归零，即这块数据没有被任何地方调用时才能释放。</p>
<p>这里的<code>ref_count</code>也使用指针的原因是当data被引用时，加入一个新的引用对象调用的<code>inc_ref_count</code>需要作用于所有指向<code>value</code>这块内存的data上，即便数据头有所不同。</p>
<h3 id="类型转换函数"><a href="#类型转换函数" class="headerlink" title="类型转换函数"></a>类型转换函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2&gt;</span></span><br><span class="line"><span class="function">T1 <span class="title">default_convert</span><span class="params">(T2 src)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (T1) src;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//customized type conversion</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Tp&gt;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> target_type&gt;</span><br><span class="line">matrix&lt;target_type&gt; matrix&lt;Tp&gt;::<span class="built_in">convert_to</span>(<span class="built_in">target_type</span> (*convert_function)(Tp src)) <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        target_type *NewArr = <span class="keyword">new</span> target_type[<span class="built_in">size</span>()]&#123;&#125;;</span><br><span class="line">        <span class="type">size_t</span> it = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (matrix::channel_number ch = <span class="number">1</span>; ch &lt;= channels; ch++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">size_t</span> r = <span class="number">1</span>; r &lt;= rows; r++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">size_t</span> c = <span class="number">1</span>; c &lt;= cols; c++)</span><br><span class="line">                &#123;</span><br><span class="line">                    NewArr[it++] = <span class="built_in">convert_function</span>(<span class="built_in">at</span>(r, c, ch));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">matrix</span>&lt;target_type&gt;(rows, cols, NewArr, channels);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">catch</span> (std::bad_alloc &amp;e)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cerr &lt;&lt; <span class="string">&quot;Bad Alloc Exception: Failed to allocate memory of the given length &quot;</span> &lt;&lt; <span class="built_in">size</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        <span class="keyword">throw</span> std::<span class="built_in">bad_alloc</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此处展示类型转换函数的实现，此函数可根据传入的<strong>转换函数指针</strong><code>convert_function</code>将<code>matrix&lt;Tp&gt;</code>转换为<code>matrix&lt;target_type&gt;</code>，过程由于产生了类型转换而无法避免硬拷贝。</p>
<p>在类模板声明中，函数参数的默认值为显式转换函数<code>default_convert</code>，因此只要使用支持显式转换的基础类型(int, float…)，或是用户所给的类型间重载了显式转换，则可以不用传参数直接使用转换函数。</p>
<p>当然，如果用户希望使用自己的转换方式，例如手写<code>int round(float)</code>、<code>double ln(int)</code>等，也可以将自己的转换传入提供的参数接口即可：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">my_round</span><span class="params">(<span class="type">float</span> x)</span></span>;</span><br><span class="line"><span class="function">matrix&lt;<span class="type">float</span>&gt; <span class="title">mat</span><span class="params">(<span class="number">4</span>,<span class="number">4</span>,src,<span class="number">3</span>)</span></span>;</span><br><span class="line">mat=mat.<span class="built_in">convert_to</span>(myround);</span><br><span class="line"><span class="comment">//这里右值是matrix&lt;int&gt;，左值是matrix&lt;float&gt;，赋值过程隐式调用了convert_to&lt;float&gt;(default_convert)</span></span><br></pre></td></tr></table></figure>
<p>实际上用这个接口就能实现<strong>任意逐元素一元运算操作</strong>，上面提的两个例子就是逐元素四舍五入和逐元素取对数，一切交给用户的想象力！</p>
<h3 id="重载赋值符"><a href="#重载赋值符" class="headerlink" title="重载赋值符"></a>重载赋值符</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//! override same type assign operator(soft copy)</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Tp&gt;</span><br><span class="line">matrix&lt;Tp&gt; &amp;matrix&lt;Tp&gt;::<span class="keyword">operator</span>=(<span class="type">const</span> matrix&lt;Tp&gt; &amp;p)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == &amp;p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">return</span> (*<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p.dat == <span class="literal">nullptr</span> || p.dat == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> std::<span class="built_in">invalid_argument</span>(<span class="string">&quot;Null Pointer Exception: The data of source matrix is null.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    rows = p.rows;</span><br><span class="line">    cols = p.cols;</span><br><span class="line">    channels = p.channels;</span><br><span class="line">    step = p.step;</span><br><span class="line">    shift = p.shift;</span><br><span class="line">    channel_pad = p.channel_pad;</span><br><span class="line">    <span class="keyword">if</span> (dat != p.dat)</span><br><span class="line">    &#123;</span><br><span class="line">        dat-&gt;<span class="built_in">dec_ref_count</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    dat = p.dat;</span><br><span class="line">    dat-&gt;<span class="built_in">inc_ref_count</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先是同类型的赋值，彼此可以访问私有成员，在检查右值合法性后，将左值数据的引用数自减，将右值逐成员复制即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//! override implicit type transform assign operator(convert &amp; hard copy)</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Tp&gt;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> rhs&gt;</span><br><span class="line">matrix&lt;Tp&gt; &amp;matrix&lt;Tp&gt;::<span class="keyword">operator</span>=(<span class="type">const</span> matrix&lt;rhs&gt; &amp;p)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (p.<span class="built_in">get_dat</span>() == <span class="literal">nullptr</span> || p.<span class="built_in">get_dat</span>() == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> std::<span class="built_in">invalid_argument</span>(<span class="string">&quot;Null Pointer Exception: The data of source matrix is null.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    dat-&gt;<span class="built_in">dec_ref_count</span>();</span><br><span class="line">    (*<span class="keyword">this</span>) = p.<span class="keyword">template</span> <span class="built_in">convert_to</span>&lt;Tp&gt;();<span class="comment">//调用默认转换器</span></span><br><span class="line">    <span class="keyword">return</span> (*<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其次是跨类型的赋值，彼此的私有成员不可见，因此使用getter，在检查右值合法性后，将左值数据的引用数自减，将右值逐成员复制即可。</p>
<p>由于等式左右类型不同，函数会调用默认转换器，如果用户此时定义好了显式类型转换，赋值时就会<strong>隐式调用显式转换</strong>来达成赋值的目的。左右类型一定是不同的，因此左值的数据需要释放，引用数自减，根据转换后的右值新建一块数据。</p>
<h3 id="ROI"><a href="#ROI" class="headerlink" title="ROI"></a>ROI</h3><p>本部分在参观<code>OpenCV::mat</code>后实现，借鉴了课程所述的方式实现了<code>ROI</code>。</p>
<p>由于时间和技术力有限，笔者在参观<code>OpenCV::mat</code>的多边形、圆形ROI后并未能成功复现仅传入<code>vector&lt;point&gt;</code>即可根据凸包生成<code>ROI</code>的高超函数，但此处实现了基础的<strong>矩形ROI</strong>和<strong>掩膜ROI</strong>两种形式，后者的可拓展性很强，只要配合一个能根据<code>vector&lt;point&gt;</code>输出某个元素是否在凸包内的函数即可实现任意形状的ROI的效果。</p>
<h4 id="矩形ROI"><a href="#矩形ROI" class="headerlink" title="矩形ROI"></a>矩形ROI</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//! submatrix constructor(ROI)</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Tp&gt;</span><br><span class="line">matrix&lt;Tp&gt;::<span class="built_in">matrix</span>(matrix &amp;src, <span class="type">size_t</span> row1, <span class="type">size_t</span> col1, <span class="type">size_t</span> row2, <span class="type">size_t</span> col2)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (row1 &gt; row2 || col1 &gt; col2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> std::<span class="built_in">out_of_range</span>(<span class="string">&quot;Out Of Range Exception: row2 and col2 should be greater than row1 and col1.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (row2 &gt; src.rows || col2 &gt; src.cols)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> std::<span class="built_in">out_of_range</span>(<span class="string">&quot;Out Of Range Exception: row2 and col2 exceed the size of source matrix.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (row1 * col1 == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> std::<span class="built_in">out_of_range</span>(<span class="string">&quot;Invalid Argument Exception: row number and column number should be positive.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (src.<span class="built_in">get_dat</span>() == <span class="literal">nullptr</span> || src.<span class="built_in">get_dat</span>() == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> std::<span class="built_in">invalid_argument</span>(<span class="string">&quot;Null Pointer Exception: The data of source matrix is null.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    rows = row2 - row1 + <span class="number">1</span>;</span><br><span class="line">    cols = col2 - col1 + <span class="number">1</span>;</span><br><span class="line">    channels = src.channels;</span><br><span class="line">    step = src.step;</span><br><span class="line">    channel_pad = src.channel_pad;</span><br><span class="line">    shift = (row1 - <span class="number">1</span>) * step + col1 - <span class="number">1</span>;</span><br><span class="line">    dat = src.get_dat;</span><br><span class="line">    dat-&gt;<span class="built_in">inc_ref_count</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现原理说起来也很简单，构造时推导出<code>shift</code>，<code>step</code>以及<code>channel_pad</code>并存储，在取出矩阵元素时再加上行数、列数、通道数总共六个参数即可算出<code>mat[i][j][channel]</code>在一维数组<code>value[]</code>中的位置，此处用<strong>重载括号</strong>的方式实现：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//! get element reference from matrix</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Tp&gt;</span><br><span class="line">Tp &amp;matrix&lt;Tp&gt;::<span class="built_in">operator</span>()(<span class="type">size_t</span> row, <span class="type">size_t</span> col, channel_number channel) <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (row &gt; rows || col &gt; cols || channel &gt; channels)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> std::<span class="built_in">out_of_range</span>(</span><br><span class="line">                <span class="string">&quot;Out Of Range Exception: arguments should be in the range of source matrix.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (*dat)[shift + (channel - <span class="number">1</span>) * channel_pad + (row - <span class="number">1</span>) * step + col - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2022/12/18/21tVGCweI3EmWMk.png" alt="P0~QOP3BOMINV6PH_J@9YEU.png" style="zoom:50%;" /></p>
<p>上图所示的例子是从<code>5*5</code>三通道矩阵中取出一个<code>2*2</code>三通道ROI，图中的38对应的是ROI的<strong>第二通道第二行第二列</strong>的元素，经计算<code>roi(2,2,2)==dat[37]=38</code>，取出即可。</p>
<p>重载括号的传回值为引用类型，用户可以直接访问和修改矩阵元素。为了防止用户犯傻和便于部分声明为const的函数，项目还提供了只读版：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//! get element from matrix (read only)</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Tp&gt;</span><br><span class="line">Tp matrix&lt;Tp&gt;::<span class="built_in">at</span>(<span class="type">size_t</span> row, <span class="type">size_t</span> col, channel_number channel) <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (row &gt; rows || col &gt; cols || channel &gt; channels)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> std::<span class="built_in">out_of_range</span>(</span><br><span class="line">                <span class="string">&quot;Out Of Range Exception: arguments should be in the range of source matrix.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (*dat)[shift + (channel - <span class="number">1</span>) * channel_pad + (row - <span class="number">1</span>) * step + col - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="掩膜ROI"><a href="#掩膜ROI" class="headerlink" title="掩膜ROI"></a>掩膜ROI</h4><p>不知道读者有没有注意到matrix类中的<code>typedef matrix&lt;bool&gt; mask</code>，重命名了零一矩阵，实际上<code>OpenCV::mat</code>中也有类似的实现，即将零一矩阵作为<strong>掩膜</strong>，其中为1的部分即为ROI。</p>
<p>这里笔者模仿OpenCV实现了<code>copy_to</code>函数，根据当前矩阵和掩膜填充目标矩阵。出于对原数据的负责态度，此处未使用软拷贝(因为这样会修改原数据导致引用该数据的所有矩阵内容变化，而我们只是希望取出一块我们感兴趣的数据进行操作而已)。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//! ROI using mask(matrix&lt;bool&gt;)</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Tp&gt;</span><br><span class="line"><span class="type">bool</span> matrix&lt;Tp&gt;::<span class="built_in">copy_to</span>(matrix&lt;Tp&gt; &amp;dst, <span class="type">const</span> matrix::mask &amp;mask)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        dst.~<span class="built_in">matrix</span>();</span><br><span class="line">        Tp *NewArr = <span class="keyword">new</span> Tp[<span class="built_in">size</span>()]&#123;&#125;;</span><br><span class="line">        <span class="type">size_t</span> it = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (channel_number ch = <span class="number">1</span>; ch &lt;= channels; ch++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">size_t</span> r = <span class="number">1</span>; r &lt;= rows; r++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">size_t</span> c = <span class="number">1</span>; c &lt;= cols; c++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">mask</span>(r, c, ch))</span><br><span class="line">                    &#123;</span><br><span class="line">                        NewArr[it] = <span class="built_in">at</span>(r, c, ch);</span><br><span class="line">                    &#125;</span><br><span class="line">                    it++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dst = <span class="built_in">matrix</span>&lt;Tp&gt;(rows, cols, NewArr, channels);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">catch</span> (std::bad_alloc &amp;e)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cerr &lt;&lt; <span class="string">&quot;Bad Alloc Exception: Failed to allocate memory of the given length &quot;</span> &lt;&lt; <span class="built_in">size</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        <span class="keyword">throw</span> std::<span class="built_in">bad_alloc</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>所以只要知道如何根据需求生成零一矩阵，就能通过调用copy_to函数取出ROI了。</p>
<p><img src="https://s2.loli.net/2022/12/18/pyFZHVbaCPJK5rO.png" alt="IZ_G_@H1C5F_44_`1M46_F0.png" style="zoom:50%;" /></p>
<h4 id="通道提取"><a href="#通道提取" class="headerlink" title="通道提取"></a>通道提取</h4><p>掩膜也是多通道的，所以只想要某个通道的内容可以遮住其他通道，但是有时候我们真的只关心其中的某个通道，比如透明度，本项目为此实现了<code>Channel Of Interest</code>效果的函数：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//! split out a single channel</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Tp&gt;</span><br><span class="line">matrix&lt;Tp&gt; matrix&lt;Tp&gt;::<span class="built_in">split_channel</span>(matrix::channel_number channel_id)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (channel_id &gt; channels || channel_id &lt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> std::<span class="built_in">out_of_range</span>(</span><br><span class="line">                <span class="string">&quot;Out Of Range Exception: channel id should be within the channel number of source matrix.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">matrix&lt;Tp&gt; <span class="title">New</span><span class="params">(*<span class="keyword">this</span>)</span></span>;</span><br><span class="line">    New.channels = <span class="number">1</span>;</span><br><span class="line">    New.shift += channel_pad * (channel_id - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> New;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这里，我们通过将<code>shift</code>后推若干个<code>channel_pad</code>，让数据头起点到达目标通道，再将通道数置一，即剥离出了对应通道，然后我们就可以对多个通道间进行各种各样的运算和变换了。</p>
<p>考虑到剥离通道后通常需要进行不影响原数据的操作，因此此处选择使用硬拷贝取出数据。若希望对原数据进行操作就更简单了，直接对原矩阵的<code>shift</code>后推，<code>channels</code>置一即可，不过在操作后需要调整回原值。如果真的要为软拷贝做到这么复杂，为什么不用重载的括号，指定行列通道后直接进行操作呢？</p>
<h3 id="重载-与比较"><a href="#重载-与比较" class="headerlink" title="重载==与比较"></a>重载==与比较</h3><p>项目重载了<code>==</code>，用于严格地比较两个矩阵的各元素是否相同，实现非常简单：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//! override equation(strict equal)</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Tp&gt;</span><br><span class="line"><span class="type">bool</span> matrix&lt;Tp&gt;::<span class="keyword">operator</span>==(<span class="type">const</span> matrix &amp;p) <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == &amp;p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (rows != p.<span class="built_in">get_rows</span>() || cols != p.<span class="built_in">get_cols</span>() || channels != p.<span class="built_in">get_channels</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (channel_number ch = <span class="number">1</span>; ch &lt;= channels; ch++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> r = <span class="number">1</span>; r &lt;= rows; r++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">size_t</span> c = <span class="number">1</span>; c &lt;= cols; c++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">at</span>(r, c, ch) != p.<span class="built_in">at</span>(r, c, ch))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但众所周知，数据类型的比较向来不那么简单。例如，对于基础数据类型<code>float</code>，直接使用<code>==</code>经常会因为误差而错判相等。但是用户又不想或是不能为此将一整个类型的<code>==</code>重载为更弱的比较条件，此时就要用到<code>equals</code>函数了：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//! equal with customized compare function</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Tp&gt;</span><br><span class="line"><span class="type">bool</span> matrix&lt;Tp&gt;::<span class="built_in">equals</span>(<span class="type">const</span> matrix&lt;Tp&gt; &amp;p, <span class="built_in">bool</span> (*equal)(Tp, Tp)) <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == &amp;p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (rows != p.<span class="built_in">get_rows</span>() || cols != p.<span class="built_in">get_cols</span>() || channels != p.<span class="built_in">get_channels</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (channel_number ch = <span class="number">1</span>; ch &lt;= channels; ch++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> r = <span class="number">1</span>; r &lt;= rows; r++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">size_t</span> c = <span class="number">1</span>; c &lt;= cols; c++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!<span class="built_in">equal</span>(<span class="built_in">at</span>(r, c, ch), p.<span class="built_in">at</span>(r, c, ch)))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>本项目的<code>equals</code>函数支持用户自行传入函数，例如<code>float</code>的例子就可以：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">float_eq</span><span class="params">(<span class="type">float</span> x, <span class="type">float</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x-y&lt;<span class="number">1e-3</span>)&amp;&amp;(y-x&lt;<span class="number">1e-3</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">matrix&lt;<span class="type">float</span>&gt; <span class="title">mat1</span><span class="params">(<span class="number">3</span>,<span class="number">3</span>,<span class="number">1.0001f</span>)</span></span>;</span><br><span class="line"><span class="function">matrix&lt;<span class="type">float</span>&gt; <span class="title">mat2</span><span class="params">(<span class="number">3</span>,<span class="number">3</span>,<span class="number">1.0f</span>)</span></span>;</span><br><span class="line"><span class="type">bool</span> eq=mat1.<span class="built_in">equals</span>(mat2,float_eq);</span><br></pre></td></tr></table></figure>
<p>可拓展性很强：哪怕用户传入的函数说0和1是相等的，<code>equals</code>也会忠诚地认为0和1是相等的！</p>
<h3 id="重载加减乘"><a href="#重载加减乘" class="headerlink" title="重载加减乘"></a>重载加减乘</h3><p>如果说实现稳健的运算是Project03的亮点，高效率是Project04的亮点，那本项目的亮点则在于：类模板让跨类型成为可能，因此本项目中重载的运算均支持不同类型矩阵的运算，此处仅展示朴素乘法。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1&gt;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T2&gt;</span><br><span class="line">matrix&lt;<span class="keyword">decltype</span>(<span class="built_in">T1</span>() * <span class="built_in">T2</span>())&gt; matrix&lt;T1&gt;::<span class="keyword">operator</span>*(matrix&lt;T2&gt; &amp;p)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (cols != p.<span class="built_in">get_rows</span>() )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> std::<span class="built_in">invalid_argument</span>(</span><br><span class="line">                <span class="string">&quot;Invalid Argument Exception: The col number of left matrix should equal the row number of right matrix.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(channels != p.<span class="built_in">get_channels</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> std::<span class="built_in">invalid_argument</span>(</span><br><span class="line">                <span class="string">&quot;Invalid Argument Exception: The channel number of two matrix should be the same.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">typedef</span> <span class="title">decltype</span><span class="params">(T1() * T2())</span> result_type</span>;</span><br><span class="line">        <span class="keyword">auto</span> *NewArr = <span class="keyword">new</span> result_type[rows * p.<span class="built_in">get_cols</span>() * channels]&#123;&#125;;</span><br><span class="line">        <span class="function">matrix&lt;result_type&gt; <span class="title">New</span><span class="params">(rows, p.get_cols(), NewArr, channels)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> ch = <span class="number">1</span>; ch &lt;= channels; ch++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">1</span>; i &lt;= rows; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">size_t</span> k = <span class="number">1</span>; k &lt;= cols; k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">1</span>; j &lt;= p.<span class="built_in">get_cols</span>(); j++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">New</span>(i, j, ch) = New.<span class="built_in">at</span>(i, j, ch) + <span class="built_in">at</span>(i, k, ch) * p.<span class="built_in">at</span>(k, j, ch);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> New;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">catch</span> (std::bad_alloc &amp;e)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cerr &lt;&lt; <span class="string">&quot;Bad Alloc Exception: Failed to allocate memory of the given length &quot;</span> &lt;&lt; <span class="built_in">size</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        <span class="keyword">throw</span> std::<span class="built_in">bad_alloc</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此处在赋值时调用了隐式类型转换，若用户提供的类型已重载好类型转换则可以直接使用。</p>
<p><code>decltype</code>是C++ 11加入的特性之一，可以根据表达式推导数据类型，有如此方便的自动类型推导，完成跨类型运算也算是信手拈来，不过需要注意的是用户提供的类型需要是可以推导的。</p>
<p>其实这里有想过要不要特例化<code>int*int</code>、<code>float*float</code>、<code>double*double</code>等，使用OpenBLAS进行运算，但思索了一下似乎有点跑题，而且需要用户安装OpenBLAS，徒然提升了使用门槛，就未作实现。</p>
<h3 id="想自己动手？没问题！"><a href="#想自己动手？没问题！" class="headerlink" title="想自己动手？没问题！"></a>想自己动手？没问题！</h3><p>本项目延续了一贯的高拓展性，实现了自定义一元/二元运算的框架，用户传入函数指针即可，而且二元运算也支持跨类型运算，即支持传入形如<code>T3 foo(T1, T2)</code>的函数指针。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//customized element-wise calculation</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Tp&gt;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> result_type&gt;</span><br><span class="line">matrix&lt;result_type&gt; matrix&lt;Tp&gt;::<span class="built_in">unary_calc</span>(<span class="built_in">result_type</span> (*unary_function)(Tp)) <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        result_type *NewArr = <span class="keyword">new</span> result_type[<span class="built_in">size</span>()]&#123;&#125;;</span><br><span class="line">        <span class="type">size_t</span> it = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (matrix::channel_number ch = <span class="number">1</span>; ch &lt;= channels; ch++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">size_t</span> r = <span class="number">1</span>; r &lt;= rows; r++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">size_t</span> c = <span class="number">1</span>; c &lt;= cols; c++)</span><br><span class="line">                &#123;</span><br><span class="line">                    NewArr[it++] = <span class="built_in">unary_function</span>(<span class="built_in">at</span>(r, c, ch));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">matrix</span>&lt;result_type&gt;(rows, cols, NewArr, channels);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">catch</span> (std::bad_alloc &amp;e)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cerr &lt;&lt; <span class="string">&quot;Bad Alloc Exception: Failed to allocate memory of the given length &quot;</span> &lt;&lt; <span class="built_in">size</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        <span class="keyword">throw</span> std::<span class="built_in">bad_alloc</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Tp&gt;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> result_type, <span class="keyword">typename</span> T2&gt;</span><br><span class="line">matrix&lt;result_type&gt; matrix&lt;Tp&gt;::<span class="built_in">binary_calc</span>(<span class="type">const</span> matrix&lt;T2&gt; &amp;p, <span class="built_in">result_type</span> (*binary_function)(Tp, T2)) <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(cols!=p.<span class="built_in">get_cols</span>()||rows!=p.<span class="built_in">get_rows</span>()||channels!=p.<span class="built_in">get_channels</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> std::<span class="built_in">invalid_argument</span>(</span><br><span class="line">                <span class="string">&quot;Invalid Argument Exception: The size and channel number of two matrix should be the same.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        result_type *NewArr = <span class="keyword">new</span> result_type[<span class="built_in">size</span>()]&#123;&#125;;</span><br><span class="line">        <span class="type">size_t</span> it = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (matrix::channel_number ch = <span class="number">1</span>; ch &lt;= channels; ch++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">size_t</span> r = <span class="number">1</span>; r &lt;= rows; r++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">size_t</span> c = <span class="number">1</span>; c &lt;= cols; c++)</span><br><span class="line">                &#123;</span><br><span class="line">                    NewArr[it++] = <span class="built_in">binary_function</span>(<span class="built_in">at</span>(r, c, ch), p.<span class="built_in">at</span>(r, c, ch));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">matrix</span>&lt;result_type&gt;(rows, cols, NewArr, channels);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">catch</span> (std::bad_alloc &amp;e)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cerr &lt;&lt; <span class="string">&quot;Bad Alloc Exception: Failed to allocate memory of the given length &quot;</span> &lt;&lt; <span class="built_in">size</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        <span class="keyword">throw</span> std::<span class="built_in">bad_alloc</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h3><p>没有太多技术含量，包含了开发过程中为了方便而实现的中间产物等。</p>
<ul>
<li>data和matrix的硬拷贝：copy_to以及clone，总归是有用到它们的一天（</li>
<li>data的重构中括号，==以及equals</li>
<li>矩阵的getters，因为不同模板类间私有成员不可见</li>
<li>矩阵的单个元素赋值set以及区域赋值fill，都可以轻易通过重载后的括号手动实现</li>
<li>矩阵输出流<code>&lt;&lt;</code>的重载</li>
<li>矩阵的转置</li>
</ul>
<h2 id="Part-3-Result-amp-Verification"><a href="#Part-3-Result-amp-Verification" class="headerlink" title="Part 3 - Result &amp; Verification"></a>Part 3 - Result &amp; Verification</h2><p>本项目的测试用程序为<code>./src/benchmark.cpp</code>，以下测试结果均由矩阵计算器验证正确。</p>
<p>由于本项目并未使用跨平台时存在差异的内容，各组测试在开发板上运行结果一致，此处不做重复展示。</p>
<h3 id="Testcase-1-创建矩阵，跨类型的乘法"><a href="#Testcase-1-创建矩阵，跨类型的乘法" class="headerlink" title="Testcase #1 创建矩阵，跨类型的乘法"></a>Testcase #1 创建矩阵，跨类型的乘法</h3><p>三个通道的<code>4*4</code>整型矩阵<code>i_4_4_3</code>和三通道的<code>4*1 char</code>向量相乘</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> *i_4_4_3 = <span class="keyword">new</span> <span class="type">int</span>[]</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>,</span><br><span class="line">                <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>,</span><br><span class="line">                <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>,</span><br><span class="line"></span><br><span class="line">                <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>,</span><br><span class="line">                <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>,</span><br><span class="line">                <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>,</span><br><span class="line">                <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>,</span><br><span class="line"></span><br><span class="line">                <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>,</span><br><span class="line">                <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>,</span><br><span class="line">                <span class="number">36</span>, <span class="number">37</span>, <span class="number">38</span>, <span class="number">39</span>,</span><br><span class="line">                <span class="number">40</span>, <span class="number">41</span>, <span class="number">42</span>, <span class="number">43</span>,</span><br><span class="line">                <span class="number">44</span>, <span class="number">45</span>, <span class="number">46</span>, <span class="number">47</span></span><br><span class="line">        &#125;;</span><br><span class="line"><span class="type">char</span> *uc_4_1_3 = <span class="keyword">new</span> <span class="type">char</span>[]</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="number">48</span>, <span class="number">49</span>, <span class="number">48</span>, <span class="number">49</span>,</span><br><span class="line">                <span class="number">49</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">48</span>,</span><br><span class="line">                <span class="number">48</span>, <span class="number">48</span>, <span class="number">48</span>, <span class="number">48</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">matrix&lt;<span class="type">int</span>&gt; <span class="title">i443</span><span class="params">(<span class="number">4</span>, <span class="number">4</span>, i_4_4_3, <span class="number">3</span>)</span></span>;</span><br><span class="line">    <span class="function">matrix&lt;<span class="type">char</span>&gt; <span class="title">uc413</span><span class="params">(<span class="number">4</span>, <span class="number">1</span>, uc_4_1_3, <span class="number">3</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; i443 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; uc413 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; i443 * uc413 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2022/12/18/Fwjtcd83zkGHAgR.png" alt="image.png" style="zoom:50%;" /></p>
<h3 id="Testcase-2-矩形ROI，软拷贝与内存管理"><a href="#Testcase-2-矩形ROI，软拷贝与内存管理" class="headerlink" title="Testcase #2 矩形ROI，软拷贝与内存管理"></a>Testcase #2 矩形ROI，软拷贝与内存管理</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">float</span> *f = <span class="keyword">new</span> <span class="type">float</span>[]</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>,</span><br><span class="line">                <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>,</span><br><span class="line">                <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>,</span><br><span class="line">                <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>,</span><br><span class="line">                <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span></span><br><span class="line">        &#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">matrix&lt;<span class="type">float</span>&gt; <span class="title">f55</span><span class="params">(<span class="number">5</span>, <span class="number">5</span>, f)</span></span>;</span><br><span class="line">    <span class="function">matrix&lt;<span class="type">float</span>&gt; <span class="title">sub</span><span class="params">(f55,<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">4</span>)</span></span>;</span><br><span class="line">    <span class="comment">//submatrix</span></span><br><span class="line">    cout&lt;&lt;<span class="built_in">sub</span>(<span class="number">2</span>,<span class="number">2</span>)&lt;&lt;endl;</span><br><span class="line">    <span class="comment">//modify the data shared by two matrices</span></span><br><span class="line">    <span class="built_in">f55</span>(<span class="number">3</span>,<span class="number">3</span>)=<span class="number">1.2</span>;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">sub</span>(<span class="number">2</span>,<span class="number">2</span>)&lt;&lt;endl;</span><br><span class="line">    <span class="comment">//delete the paraent matrix</span></span><br><span class="line">    f55.~<span class="built_in">matrix</span>();</span><br><span class="line">    cout&lt;&lt;<span class="built_in">sub</span>(<span class="number">2</span>,<span class="number">2</span>)&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2022/12/18/j4zUN8Z2ESCveI5.png" alt="image.png" style="zoom:50%;" /></p>
<p>可以看到两个矩阵的确共用一块数据，并且在析构其中一个之后不影响另一个访问这块数据。</p>
<p>且经过在析构函数中输出ref_count检查，确认该项目不会存在内存的多次释放或是内存泄漏问题。</p>
<h3 id="Testcase-3-掩膜ROI"><a href="#Testcase-3-掩膜ROI" class="headerlink" title="Testcase #3 掩膜ROI"></a>Testcase #3 掩膜ROI</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">float</span> *f = <span class="keyword">new</span> <span class="type">float</span>[]</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>,</span><br><span class="line">                <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>,</span><br><span class="line">                <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>,</span><br><span class="line">                <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>,</span><br><span class="line">                <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span></span><br><span class="line">        &#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">matrix&lt;<span class="type">float</span>&gt; <span class="title">f55</span><span class="params">(<span class="number">5</span>, <span class="number">5</span>, f)</span></span>;</span><br><span class="line">    <span class="function">matrix&lt;<span class="type">bool</span>&gt; <span class="title">b55</span><span class="params">(<span class="number">5</span>,<span class="number">5</span>,<span class="literal">true</span>)</span></span>;</span><br><span class="line">    b55.<span class="built_in">fill</span>(<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">4</span>, <span class="literal">false</span>);</span><br><span class="line">    <span class="function">matrix&lt;<span class="type">float</span>&gt; <span class="title">sub</span><span class="params">(<span class="number">5</span>,<span class="number">5</span>,<span class="number">6.6f</span>)</span></span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;before:\n&quot;</span>&lt;&lt;sub&lt;&lt;endl;</span><br><span class="line">    f55.<span class="built_in">copy_to</span>(sub,b55);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;after:\n&quot;</span>&lt;&lt;sub&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2022/12/18/pSGhUAc7Fy2IlZ5.png" alt="image.png" style="zoom:50%;" /></p>
<h3 id="Testcase-4-通道拆分与自定义运算"><a href="#Testcase-4-通道拆分与自定义运算" class="headerlink" title="Testcase #4 通道拆分与自定义运算"></a>Testcase #4 通道拆分与自定义运算</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> *i_4_4_3 = <span class="keyword">new</span> <span class="type">int</span>[]</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>,</span><br><span class="line">                <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>,</span><br><span class="line">                <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>,</span><br><span class="line"></span><br><span class="line">                <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>,</span><br><span class="line">                <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>,</span><br><span class="line">                <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>,</span><br><span class="line">                <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>,</span><br><span class="line"></span><br><span class="line">                <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>,</span><br><span class="line">                <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>,</span><br><span class="line">                <span class="number">36</span>, <span class="number">37</span>, <span class="number">38</span>, <span class="number">39</span>,</span><br><span class="line">                <span class="number">40</span>, <span class="number">41</span>, <span class="number">42</span>, <span class="number">43</span>,</span><br><span class="line">                <span class="number">44</span>, <span class="number">45</span>, <span class="number">46</span>, <span class="number">47</span></span><br><span class="line">        &#125;;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">HALF</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> p/<span class="number">2.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">DOUBLE</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> p*<span class="number">2.0f</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    matrix&lt;<span class="type">int</span>&gt;<span class="built_in">main</span>(<span class="number">4</span>,<span class="number">4</span>,i_4_4_3,<span class="number">3</span>);</span><br><span class="line">    matrix&lt;<span class="type">float</span>&gt;double_red=main.<span class="built_in">split_channel</span>(<span class="number">1</span>).<span class="built_in">unary_calc</span>(DOUBLE);</span><br><span class="line">    matrix&lt;<span class="type">int</span>&gt;green=main.<span class="built_in">split_channel</span>(<span class="number">2</span>);</span><br><span class="line">    matrix&lt;<span class="type">double</span>&gt;half_blue=main.<span class="built_in">split_channel</span>(<span class="number">3</span>).<span class="built_in">unary_calc</span>(HALF);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;double_red\n&quot;</span>&lt;&lt;double_red&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;green\n&quot;</span>&lt;&lt;green&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;half_blue\n&quot;</span>&lt;&lt;half_blue&lt;&lt;endl;</span><br><span class="line">    matrix&lt;<span class="type">double</span>&gt;sum=double_red+green+half_blue;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;sum\n&quot;</span>&lt;&lt;sum&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2022/12/18/ktnxOPo5Tqcymaf.png" alt="image.png" style="zoom:50%;" /></p>
<p>三种类型存储，红色加倍，绿色不变，蓝色减半，三者相加。</p>
<h3 id="Testcase-5-自定义二元运算生成矩阵"><a href="#Testcase-5-自定义二元运算生成矩阵" class="headerlink" title="Testcase #5 自定义二元运算生成矩阵"></a>Testcase #5 自定义二元运算生成矩阵</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> *i_4_4_3 = <span class="keyword">new</span> <span class="type">int</span>[]</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>,</span><br><span class="line">                <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>,</span><br><span class="line">                <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>,</span><br><span class="line"></span><br><span class="line">                <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>,</span><br><span class="line">                <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>,</span><br><span class="line">                <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>,</span><br><span class="line">                <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>,</span><br><span class="line"></span><br><span class="line">                <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>,</span><br><span class="line">                <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>,</span><br><span class="line">                <span class="number">36</span>, <span class="number">37</span>, <span class="number">38</span>, <span class="number">39</span>,</span><br><span class="line">                <span class="number">40</span>, <span class="number">41</span>, <span class="number">42</span>, <span class="number">43</span>,</span><br><span class="line">                <span class="number">44</span>, <span class="number">45</span>, <span class="number">46</span>, <span class="number">47</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">greater_than</span><span class="params">(<span class="type">int</span> x, <span class="type">float</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((<span class="type">float</span>) x) &gt; y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">float</span> *f=<span class="keyword">new</span> <span class="type">float</span>[<span class="number">48</span>]&#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">48</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        f[i]=i%<span class="number">2</span>?<span class="number">48.0</span>:<span class="number">-1.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">matrix&lt;<span class="type">int</span>&gt; <span class="title">X</span><span class="params">(<span class="number">4</span>, <span class="number">4</span>, i_4_4_3, <span class="number">3</span>)</span></span>;</span><br><span class="line">    <span class="function">matrix&lt;<span class="type">float</span>&gt; <span class="title">Y</span><span class="params">(<span class="number">4</span>, <span class="number">4</span>, f,<span class="number">3</span>)</span></span>;</span><br><span class="line">    matrix&lt;<span class="type">bool</span>&gt; R=X.<span class="built_in">binary_calc</span>(Y, greater_than);</span><br><span class="line">    cout&lt;&lt;R&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2022/12/18/K3TdByV8M9bIJ4k.png" alt="image.png" style="zoom:50%;" /></p>
<p>有两列Y&gt;=X，其他X&gt;Y</p>
<h3 id="Testcase-Bonus-🎁"><a href="#Testcase-Bonus-🎁" class="headerlink" title="Testcase Bonus: 🎁"></a>Testcase Bonus: 🎁</h3><p>不知道从谁那里学来的方法(？)测试时去除了输出流的逗号和制表符:)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">string *explore = <span class="keyword">new</span> string[]</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="string">&quot;Th&quot;</span>, <span class="string">&quot;mor&quot;</span>, <span class="string">&quot;earn &quot;</span>, <span class="string">&quot;t C&quot;</span>, <span class="string">&quot;th&quot;</span>, <span class="string">&quot;re ig&quot;</span>, <span class="string">&quot;t I f&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Th&quot;</span>, <span class="string">&quot; you v&quot;</span>, <span class="string">&quot;muc&quot;</span>, <span class="string">&quot;for &quot;</span>, <span class="string">&quot;r dedic&quot;</span>, <span class="string">&quot;eachin&quot;</span>, <span class="string">&quot;is cou&quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">string *perseverance = <span class="keyword">new</span> string[]</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="string">&quot;e &quot;</span>, <span class="string">&quot;e I l&quot;</span>, <span class="string">&quot;abou&quot;</span>, <span class="string">&quot;++, &quot;</span>, <span class="string">&quot;e mo&quot;</span>, <span class="string">&quot;noran&quot;</span>, <span class="string">&quot;eel&quot;</span>,</span><br><span class="line">                <span class="string">&quot;ank&quot;</span>, <span class="string">&quot;ery &quot;</span>, <span class="string">&quot;h &quot;</span>, <span class="string">&quot;you&quot;</span>, <span class="string">&quot;ation in t&quot;</span>, <span class="string">&quot;g th&quot;</span>, <span class="string">&quot;rse&quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CS_205 (CS + _205)</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">matrix&lt;string&gt; <span class="title">CS</span><span class="params">(<span class="number">2</span>, <span class="number">7</span>, explore)</span></span>;</span><br><span class="line">    matrix&lt;string&gt; _205(<span class="number">2</span>, <span class="number">7</span>, perseverance);</span><br><span class="line">    cout &lt;&lt; CS_205;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2022/12/18/oDMiHWk8xXLcfJG.png" alt="image.png"></p>
<h2 id="Part-4-Difficulties-amp-Solutions"><a href="#Part-4-Difficulties-amp-Solutions" class="headerlink" title="Part 4 - Difficulties &amp; Solutions"></a>Part 4 - Difficulties &amp; Solutions</h2><h3 id="Difficulty-I-内存管理"><a href="#Difficulty-I-内存管理" class="headerlink" title="Difficulty I 内存管理"></a>Difficulty I 内存管理</h3><p>题目要求避免硬拷贝，而且要做好内存管理，避免内存泄漏和多重删除。</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>本项目根据上课所述，使用了<code>ref_count</code>，<code>Step</code>等措施辅助内存管理，实现了上述目标，但根据实际应用场景，仍然实现了部分常用的硬拷贝函数，以避免对原数据进行修改导致多个矩阵的数据受到牵连。</p>
<h3 id="Difficulty-II-可拓展性"><a href="#Difficulty-II-可拓展性" class="headerlink" title="Difficulty II 可拓展性"></a>Difficulty II 可拓展性</h3><p>既然用了类模板，那么各种各样的跨类别、重载等问题就会如潮水一样涌来。</p>
<h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><p>实际上我很清楚要完全做到这个库让人使用舒适，肯定是十分困难的事，因为用户可能的调用方法太多，有些难以用概括性(拓展性强)的写法容纳，所以只能尽可能地为用户提供自由度了，深切感谢<code>decltype</code>这一C++ 11的新特性，简直救人于水火之中。</p>
<p>比如项目中的跨类别赋值、运算、自定义比较与运算，都是经过反复调试和思考可能的调用方式后打补丁而成的。</p>
<h3 id="Difficulty-III-OpenCV-mat"><a href="#Difficulty-III-OpenCV-mat" class="headerlink" title="Difficulty III OpenCV::mat?"></a>Difficulty III OpenCV::mat?</h3><p>前人的脚步已经走出太远，光是理解<code>mat.h</code>头文件的一部分就非常消耗时间和精力，而当实现ROI时，那种用户只需要给好参数，库会帮你解决一切的全能和自己写出来的完全是天壤之别。</p>
<h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h3><p>这貌似不是一个短期内看上去可以解决的问题，要实现那样的效果，还缺少包括但不限于图论、几何等的前置知识，只能日后慢慢勤以补拙了，这次的可扩展性倒是让自己还算满意，非常自由。</p>
<p>希望以后也能加入到这样的一个项目里，为高楼大厦做一点微小的工作吧。</p>
<h2 id="Part-5-Summary"><a href="#Part-5-Summary" class="headerlink" title="Part 5 - Summary"></a>Part 5 - Summary</h2><p>感谢您能读到这里。</p>
<p>关于本次项目的总结，言简意赅来讲就是把类模板<strong>弄明白了又弄糊涂了</strong>。</p>
<p>学了一学期C/C++，和上于老师的数据库一样，真的是越学越不会了(悲)，真的很喜欢这种上课风格。</p>
<p>一学期5个单人Projects，确实比大一感觉要繁忙许多，和朋友调侃的时候也总会提起自己这学期似乎一直“泡在Project里”。查了很多，翻了很多，熬了很多，但其实，学得还不够多。</p>
<p>在做Project的时候经常性地会把自己的项目和其他人的作比较，再进行完善，有时候会觉得好像没有必要做到这一步，但看到程序正常运行的时候还是会非常欣慰的，希望这样的感觉能稍微浸润到生活的其他方面吧。</p>
<p>最后的最后，诚挚感谢于老师、廖老师以及助教等为课程开展付出努力的人们！辛苦了！</p>
<p><img src="https://s2.loli.net/2022/12/18/oDMiHWk8xXLcfJG.png" alt="image.png"></p>
<h1 id="完结撒花-○´∀-ﾉ🌺"><a href="#完结撒花-○´∀-ﾉ🌺" class="headerlink" title="完结撒花 (○´∀`)ﾉ🌺"></a>完结撒花 (○´∀`)ﾉ🌺</h1>]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>CS205 C/C++ Project02设计报告 简易计算器</title>
    <url>/2022/11/05/CS205_%E9%A1%B9%E7%9B%AE%E8%AE%BE%E8%AE%A1%E6%8A%A5%E5%91%8A_Simple_Calculator/</url>
    <content><![CDATA[<h2 id="Part-0-团队成员"><a href="#Part-0-团队成员" class="headerlink" title="Part 0. 团队成员"></a>Part 0. <del>团队</del>成员</h2><div class="table-container">
<table>
<thead>
<tr>
<th>姓名</th>
<th>学号</th>
<th><del>贡献率</del></th>
</tr>
</thead>
<tbody>
<tr>
<td>咕桃</td>
<td>-</td>
<td><del>100%</del></td>
</tr>
</tbody>
</table>
</div>
<h2 id="Part-1-Analysis"><a href="#Part-1-Analysis" class="headerlink" title="Part 1 - Analysis"></a>Part 1 - Analysis</h2><h3 id="题目重述-amp-主要思路"><a href="#题目重述-amp-主要思路" class="headerlink" title="题目重述&amp;主要思路"></a>题目重述&amp;主要思路</h3><p>本题目要求实现一个带有变量存储功能，支持基本运算和部分函数的计算器。</p>
<p>根据题目描述，本题的主要要求为：</p>
<ol>
<li>带括号的复合算式的计算</li>
<li>可以设置并代入用户自定义变量</li>
<li>部分数学常用函数</li>
<li>高精度</li>
<li>使用Cmake管理项目</li>
</ol>
<p>本项目使用了Project1中实现的<code>BigNum</code>高精度浮点数结构体进行数据的存储和运算，除完成上述全部基础要求外，本项目支持以下内容：</p>
<ol>
<li>交互式输入输出</li>
<li>sqrt(), exp(), ln(), sin(), cos() 五种常用函数（可轻易扩展更多）</li>
<li>支持多种形式的输入数据</li>
<li>INF/NaN结果反馈</li>
<li>设定运算结果精度</li>
<li>查看/编辑变量列表</li>
<li>用户友好的帮助菜单</li>
</ol>
<h3 id="模型假设"><a href="#模型假设" class="headerlink" title="模型假设"></a>模型假设</h3><p>由于题目所给信息较少，笔者对输入的数据范围等进行了假设，并根据假设设计程序。</p>
<p>以下是本程序适配的数据范围：</p>
<p>对于一个科学计数法浮点数，格式记为$A.BeC$</p>
<p>整数部分$A$与小数部分$B$位数之和记为$len$，$1\leq n \leq 10^{4}$，即存储一万位有效数字</p>
<p>10的幂指数$C$记为$exp$，$-10^{18}\leq exp \leq 10^{18}$，即存储上限为$10^{10^{18}}$量级</p>
<h3 id="二元运算"><a href="#二元运算" class="headerlink" title="二元运算"></a>二元运算</h3><p>本项目沿用了用高精度浮点数的存储方式，为了良好的扩展性采用了重载运算符的写法，较函数写法更为简洁，且基本运算的实现也和传统方式有所不同。</p>
<p><strong>加法/减法</strong></p>
<p>此种存储数据的好处在于可以将末尾0全部存储在$exp$变量中而非占用数组长度，但在进行加减法时需要进行对齐，对齐的思路为：</p>
<p>结果沿用两数中较小的$exp$，通过<strong>补0</strong>的方式对齐两数，避免了展开全部末尾0再运算带来的不必要时间和空间浪费，并在加减法完成后即时回收末尾0至$exp$中，最大地减少了空间开销。</p>
<p>加减法的具体逻辑较为常见，仅作简述：</p>
<ol>
<li>较短数补0对齐</li>
<li>从低位起逐位加/减，并用carry/borrow标签模拟进位/借位</li>
<li>回收末尾0，规范化结果</li>
</ol>
<p><strong>乘法</strong></p>
<p>沿用此前实现的$O(n^2)$高精度乘法，不作赘述。</p>
<p><strong>除法</strong></p>
<p>由于除法在绝大多数情况下会出现“除不尽”的无限循环小数的情况，本项目对输出结果进行了精度预设，当结果总长度达到200时停止运算（该参数可以通过<code>big_num.h</code>中的<code>DIVIDE_PRECISION</code>常量进行更改）。</p>
<p>以下是除法的具体逻辑，对于除法运算$A/B=C$：</p>
<ol>
<li>将$A$和$B$调整至$B\leq A&lt;10*B$</li>
</ol>
<p>​        由于特殊的数据存储方式，10的次方间的除法可以直接通过$exp$降次为<code>long long</code>类型的加减法，作差后存储于结果。</p>
<ol>
<li>迭代计算后续位数</li>
</ol>
<p>​        重复执行以下操作：从$A$中减去若干次$B$并计数，直到$A&lt;B$，得到$floor(A/B)$，将其存入结果中，将$A$扩增10倍，再次从中减去若干次$B$…理论而言，如此循环可以得到任意多位数的结果。</p>
<ol>
<li>将结果倒序</li>
</ol>
<p>​        由于除法计算时，是从高位到低位产生结果，因此在结束运算后需要根据位数进行结果的倒序。</p>
<p><strong>整数幂</strong></p>
<p>实现了乘法和除法，就少不了快速幂。</p>
<p>快速幂的思路如下，对于乘方运算$A^B$：</p>
<p>将$B$用二进制表示，从低到高第i位为1代表$B$做拆解为2的次幂和之后有$2^{i-1}$的一项，该项在总运算中是一个因子：$A^{2^{i-1}}$，因此可以通过不断将底数$A$做平方，在$B$的二进制对应位为1时将此时的$A^{2^{i-1}}$乘进结果中，将乘法由$n$级别降为$logn$级别。</p>
<p>然而本项目中高精度数据十进制下就有$1e4$位，转成二进制将会更加痛苦，且丧失了原有的空间复杂度优势。考虑到我们每次计算时，暂时并<strong>不关心除了最低位以外的数</strong>，此处采用了将<strong>个位数和1做按位与</strong>的操作：若一个大整数$exp=0$且最低位为奇数，说明其<strong>二进制表达下最低位为1</strong>，单次判断操作时空复杂度都是<strong>O(1)</strong>。</p>
<p><strong>小数幂</strong></p>
<p>经过若干次不同的尝试，小数幂最终使用Math库中的<code>pow</code>，以下是大致的尝试过程：</p>
<ul>
<li><p><strong>思路一</strong>：完全手动重构</p>
<ol>
<li><p>先实现$e^x$和$ln(x)$！</p>
<p>在不使用小数幂的前提下，实现这两个函数听上去有点天方夜谭，但<strong>只能用整数幂</strong>意味着可以使用泰勒级数近似计算这两个函数，所需要的运算恰好是目前已经是实现的加、减、乘、除、整数幂。</p>
<p>以下是两个函数的展开结果：</p>
<p>$e^x=\sum_{i=0}^{\infty} \frac{x^i}{i!}=1+\frac{x}{1!}+\frac{x^2}{2!}+ \frac{x^3}{3!}+…$</p>
<p>$ln(x+1)=\sum_{i=1}^{\infty}(-1)^{i-1}\frac{x^i}{i}=x-\frac{x^2}{2}+\frac{x^3}{3}-\frac{x^4}{4}+…$</p>
<p>上机跑了一下，发现计算<code>ln(1.5)</code>还算快速和精确，但计算<code>ln(2)</code>时非常慢，并且计算出的<code>ln(3)</code>大出天际，经验证发现，使用麦克劳林级数计算，越远离0结果越不精确，且在<code>ln(2)</code>之后增量不收敛，因此会得出错误的结果。</p>
</li>
<li><p>调整收敛式</p>
<p>$t=\frac{x-1}{x+1},ln(x)=ln(1+t)-ln(1-t)=2\sum_{i=0}^{\infty}\frac{t^{2i+1}}{2i+1}$</p>
<p>通过引入$t$间接计算，将ln中的数字控制在了0~2之间，一定程度上提高了精确度，但此时程序为了计算函数，运行的时间已经不可忽略：乘法是$O(n^2)$，整数幂和除法都要多次调用乘法，为了结果的精度，级数的项数也需要设置在较高的水平。</p>
</li>
<li><p>曲折地实现小数幂</p>
<p>既然不能直接算小数幂，我们可以将问题归纳为现有运算可以解决的形式：$A^B=e^{B*ln(A)}$</p>
<p>即先对底数$A$求对数，与指数$B$相乘后再求自然指数。理论而言，由此可以只通过级数运算得到任意小数幂。</p>
</li>
<li><p>实际情况</p>
<p>太慢，牺牲精度了还是太慢。在实现运算后，我尝试着运行了<code>2^0.5</code>，并经过多番痛截精度后，程序很忠诚地在15s左右给出了答案，经比对，精确到小数点后10位。</p>
<p>原来的算法对于越大的数，计算起来的耗时是高次幂多项式增长的，因此程序<strong>几乎无法</strong>对大数进行小数幂运算。</p>
<p>经过慎重考虑，我认为对于题设所需的计算器而言，具有一定精度而<strong>非常高效</strong>的Math库内置<code>pow</code>应该更加适合，因此有了以下的思路二。</p>
</li>
</ol>
</li>
<li><p><strong>思路二</strong>：使用Math库内置<code>pow</code></p>
<ol>
<li><p>double？</p>
<p>库函数预设的参数类型为<code>double</code>类，虽然不是无限精度，但$[-1.7E308,1.7E308]$和小数点后15位的精度对于题设的绝大多数情况而言还是较为充足的，均衡时间和空间成本不失为一个优解。</p>
<p>然而使用库函数需要将<code>BigNum</code>类转化为<code>double</code>类，利用库函数得出<code>double</code>类结果后仍要转化回<code>BigNum</code>以便后续的高精度计算。此处就涉及到两种类型的转换：</p>
<ol>
<li><p>BigNum→double</p>
<p>这种情况，对于超出double范围的大数而言并不可行，但$[-1.7E308,1.7E308]$范围内，将BigNum中逐位存储的数取出，再根据exp改变double的小数点位置即可，此时小数点后的精度会有一定损失。</p>
</li>
<li><p>double→BigNum</p>
<p>本项目由于先前实现了良好的string转BigNum构造器，此处利用stringstream将double直接转为string型，再利用构造器即可无精度损失地将double转换为BigNum类。</p>
</li>
</ol>
</li>
<li><p>效果？</p>
<p>经验证，调用Math库函数进行运算后，运算时间又回到了肉眼可以忽略的量级，精度达到小数点后15位，说明优于原先完全重构的实现方法。</p>
</li>
<li><p>后续</p>
<p>由此，吸取了上述颠沛流离过程的经验，本项目在后续引入函数的过程中，涉及到手动实现函数的时间/空间不可接受的情况时，采用了Math库的内置函数，更加简洁高效，也避免了使用自己造出来的方轮子带来的不便。</p>
</li>
</ol>
</li>
</ul>
<h3 id="后缀表达式"><a href="#后缀表达式" class="headerlink" title="后缀表达式"></a>后缀表达式</h3><p>又称逆波兰表达式，通过引入栈和队列改变操作数和操作符的顺序，得到后缀表达式辅助运算，常用于多种优先级的运算符同时存在的算式的求值，由于该算法普及性较好，<del>老师想必也看了几十篇类似的讲解了</del>，此处仅作简单的阐述：</p>
<ol>
<li><p>确定符号优先级</p>
<p>此处，参与运算需要区分先后顺序的有：括号，5种二元算符，函数。</p>
<p>运算优先级如下：括号&gt;函数&gt;乘方&gt;乘除&gt;加减</p>
</li>
<li><p>中缀表达式→后缀表达式</p>
<p>根据符号，将一整行字符串split成若干子串，从左到右读入中缀表达式：</p>
<ul>
<li>读入数字，直接加入队列</li>
<li>读入操作符<ul>
<li>当前操作符为<code>(</code>，直接入栈</li>
<li>当前操作符为<code>)</code>，持续出栈至队列中，直到将一个<code>(</code>出栈后停止</li>
<li>当前操作符优先级高于栈顶，直接入栈</li>
<li>当前操作符优先级不高于栈顶，持续出栈至队列中，直到当前操作符优先级高于栈顶后再入栈</li>
</ul>
</li>
</ul>
<p>中缀表达式读入完毕后，若栈非空，则依次出栈加入队列中。</p>
</li>
<li><p>计算后缀表达式</p>
<p>从后缀表达式队列中依次取出元素：</p>
<ul>
<li>读入数字，直接入栈</li>
<li>读入操作符，取出栈顶两个元素进行二元运算(两个元素需要倒序)，运算结果再次入栈</li>
<li>读入函数，取出栈顶单个元素代入运算，结果再次入栈</li>
</ul>
<p>后缀表达式运算完毕后，将栈中唯一元素出栈，即所求结果</p>
</li>
</ol>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>本项目使用STL::map简洁地实现了变量功能，读入命令后利用正则表达式匹配等式格式，检查合法后将左式作为变量名以字符串形式存储，右式依然是支持多种输入格式的高精度数字。</p>
<p>对于有一定精度要求的$\pi$和$e$，程序也预先将其内置在变量表中。</p>
<p>查看当前变量列表时，活用<code>auto</code>型迭代器遍历map；编辑变量时，对map删除再建立映射即可。</p>
<p>参与运算时，变量在中缀转后缀的过程中会被自动替换为其<code>BigNum</code>类键值参与运算，对于变量名相互包含的情况，本项目会取匹配的最长的变量名进行运算。</p>
<h2 id="Part-2-Code"><a href="#Part-2-Code" class="headerlink" title="Part 2 - Code"></a>Part 2 - Code</h2><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CPP\PROJ02</span><br><span class="line">│  better_calc</span><br><span class="line">│  CMakeLists.txt</span><br><span class="line">│  report.pdf</span><br><span class="line">│</span><br><span class="line">├─inc</span><br><span class="line">│      big_num.h</span><br><span class="line">│      functions.h</span><br><span class="line">│      varia.h</span><br><span class="line">│</span><br><span class="line">└─src</span><br><span class="line">        func.cpp</span><br><span class="line">        main.cpp</span><br><span class="line">        operators.cpp</span><br><span class="line">        RPN.cpp</span><br><span class="line">        utils.cpp</span><br><span class="line">        variables.cpp</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/GuTaoZi/CS205_Project02/blob/master/src/main.cpp"><code>main.cpp</code></a>为运行主函数，可执行文件为：<code>./better_calc</code>，为实现交互式输入输出，本项目未使用命令行输入。</p>
<p><a href="https://github.com/GuTaoZi/CS205_Project02/blob/master/src/big_num.h"><code>big_num.h</code></a>为高精度浮点数头文件，其操作符重载实现位于<a href="https://github.com/GuTaoZi/CS205_Project02/blob/master/src/operators.cpp"><code>operators.cpp</code></a>，过程中使用的函数实现位于<a href="https://github.com/GuTaoZi/CS205_Project02/blob/master/src/utils.cpp"><code>utils.cpp</code></a>，逆波兰表达式的处理和求值位于<a href="https://github.com/GuTaoZi/CS205_Project02/blob/master/src/RPN.cpp"><code>RPN.cpp</code></a>。</p>
<p><a href="https://github.com/GuTaoZi/CS205_Project02/blob/master/src/functions.h"><code>functions.h</code></a>为数学函数头文件，其实现位于<a href="https://github.com/GuTaoZi/CS205_Project02/blob/master/src/func.cpp"><code>func.cpp</code></a>。</p>
<p><a href="https://github.com/GuTaoZi/CS205_Project02/blob/master/src/varia.h"><code>varia.h</code></a>为变量头文件，其实现和常用函数位于<a href="https://github.com/GuTaoZi/CS205_Project02/blob/master/src/variables.cpp"><code>variables.cpp</code></a>。</p>
<h3 id="二元运算的重载"><a href="#二元运算的重载" class="headerlink" title="二元运算的重载"></a>二元运算的重载</h3><p>本节实现于<a href="https://github.com/GuTaoZi/CS205_Project02/blob/master/src/operators.cpp">operators.cpp</a>，实现了加减乘除乘方五种二元运算的重载。</p>
<h4 id="减法"><a href="#减法" class="headerlink" title="减法"></a>减法</h4><p>加法与之类似，因此只放减法。</p>
<p>Step1. 通过讨论a,b的符号，将问题简化为a&gt;b&gt;0时的情况。</p>
<p>Step2. 排除其一为INF/NaN的情况，防止其影响计算</p>
<p>Step3. 对位数较少者进行补0</p>
<p>Step4. 逐位相减，模拟借位</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">BigNum <span class="keyword">operator</span>-(BigNum a, BigNum b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.type == NaN || b.type == NaN)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a.type == NaN ? a : b;</span><br><span class="line">    &#125;</span><br><span class="line">    a = <span class="built_in">standardize_exp</span>(a);</span><br><span class="line">    b = <span class="built_in">standardize_exp</span>(b);</span><br><span class="line">    BigNum c = <span class="built_in">BigNum</span>();</span><br><span class="line">    <span class="keyword">if</span> (a.sign)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (b.sign)</span><br><span class="line">        &#123;</span><br><span class="line">            c.sign = b &lt; a;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            b.sign = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">return</span> a + b;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (b.sign)</span><br><span class="line">        &#123;</span><br><span class="line">            b.sign = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">return</span> a + b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            a.sign = <span class="literal">true</span>;</span><br><span class="line">            b.sign = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">return</span> b - a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a &lt; b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> -(b - a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a == b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a.type == INF || b.type == INF)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> a.type == INF ? a : b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">BigNum</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a.type == INF)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (b.type == INF)</span><br><span class="line">        &#123;</span><br><span class="line">            b.sign = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">return</span> b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (a.exp &gt;= b.exp)<span class="comment">//a后补0</span></span><br><span class="line">        &#123;</span><br><span class="line">            c.sign = <span class="literal">true</span>;</span><br><span class="line">            c.exp = b.exp;</span><br><span class="line">            c.len = a.len + a.exp - b.exp;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= a.len; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                c.val[i + a.exp - b.exp] = a.val[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> borrow = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= c.len; i++)<span class="comment">//给a补0</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (c.val[i] &lt; borrow + b.val[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    c.val[i] = c.val[i] + <span class="number">10</span> - borrow - b.val[i];</span><br><span class="line">                    borrow = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    c.val[i] -= borrow + b.val[i];</span><br><span class="line">                    borrow = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            c = <span class="built_in">standardize_exp</span>(c);</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span><span class="comment">//b后补0</span></span><br><span class="line">        &#123;</span><br><span class="line">            c.sign = <span class="literal">true</span>;</span><br><span class="line">            c.exp = a.exp;</span><br><span class="line">            c.len = a.len+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= c.len; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                c.val[i] = a.val[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> borrow = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= b.len+<span class="number">1</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (c.val[i + b.exp - a.exp] &lt; borrow + b.val[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    c.val[i + b.exp - a.exp] = c.val[i + b.exp - a.exp] + <span class="number">10</span> - borrow - b.val[i];</span><br><span class="line">                    borrow = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    c.val[i + b.exp - a.exp] -= borrow + b.val[i];</span><br><span class="line">                    borrow = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            c = <span class="built_in">standardize_exp</span>(c);</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="除法"><a href="#除法" class="headerlink" title="除法"></a>除法</h4><p>Step1. 预处理INF/NaN的情况</p>
<p>Step2. exp作差，调整至b&lt;a&lt;10b</p>
<p>Step3. 在达到预设精度前不断扩增a得到更低位</p>
<p>Step4. 翻转数组，得到结果</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">BigNum <span class="keyword">operator</span>/(BigNum a, BigNum b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">is_zero</span>(b))</span><br><span class="line">    &#123;</span><br><span class="line">        BigNum err = <span class="built_in">BigNum</span>();</span><br><span class="line">        err.sign = !(a.sign <span class="keyword">xor</span> b.sign);</span><br><span class="line">        err.type = <span class="built_in">is_zero</span>(a) ? NaN : INF;</span><br><span class="line">        <span class="keyword">return</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    BigNum c = <span class="built_in">BigNum</span>();</span><br><span class="line">    c.sign = !(a.sign <span class="keyword">xor</span> b.sign);</span><br><span class="line">    a.sign = b.sign = <span class="literal">true</span>;</span><br><span class="line">    c.exp = a.exp - b.exp;</span><br><span class="line">    c.len = <span class="number">0</span>;</span><br><span class="line">    a.exp = <span class="number">0</span>;</span><br><span class="line">    b.exp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (a &lt; b)<span class="comment">//扩大a直到a&gt;b</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (a &lt; b)</span><br><span class="line">        &#123;</span><br><span class="line">            a.exp++;</span><br><span class="line">            c.exp--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        b.exp++;</span><br><span class="line">        <span class="keyword">if</span> (b &lt; a)<span class="comment">//缩小a直到a&lt;10b;</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (b &lt; a)</span><br><span class="line">            &#123;</span><br><span class="line">                a.exp--;</span><br><span class="line">                c.exp++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        b.exp--;</span><br><span class="line">    &#125;<span class="comment">//现在是10b&gt;a&gt;b的情况</span></span><br><span class="line">    <span class="keyword">while</span> (c.len &lt; DIVIDE_PRECISION)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> q = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!(a &lt; b))</span><br><span class="line">        &#123;</span><br><span class="line">            a = a - b;</span><br><span class="line">            q++;</span><br><span class="line">            a = <span class="built_in">standardize_exp</span>(a);</span><br><span class="line">        &#125;</span><br><span class="line">        c.val[++c.len] = q;</span><br><span class="line">        a.exp++;</span><br><span class="line">        a = <span class="built_in">standardize_exp</span>(a);</span><br><span class="line">        c.exp--;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">is_zero</span>(a))</span><br><span class="line">        &#123; <span class="keyword">break</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    c.exp++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= (c.len &gt;&gt; <span class="number">1</span>); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">swap</span>(c.val[i], c.val[c.len - i + <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="乘方"><a href="#乘方" class="headerlink" title="乘方"></a>乘方</h4><p>Step1. 预处理</p>
<p>Step2. 若为整数幂，使用高精度快速幂</p>
<p>Step3. 若为小数幂，使用<code>pow()</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">BigNum <span class="keyword">operator</span>^(BigNum a, BigNum b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">bool</span> nega_pow = b.sign;</span><br><span class="line">    b.sign=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">is_zero</span>(a))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">BigNum</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">is_zero</span>(b))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">BigNum</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a.type == INF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    a = <span class="built_in">standardize_exp</span>(a);</span><br><span class="line">    b= <span class="built_in">standardize_exp</span>(b);</span><br><span class="line">    <span class="keyword">if</span>(b.exp&gt;=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        BigNum res = <span class="built_in">BigNum</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">while</span>(!<span class="built_in">is_zero</span>(b))</span><br><span class="line">        &#123;</span><br><span class="line">            res=<span class="built_in">shorten</span>(res,<span class="number">1000</span>);</span><br><span class="line">            <span class="keyword">if</span>((b.val[<span class="number">1</span>]&amp;<span class="number">1</span>)&amp;&amp;(!b.exp))</span><br><span class="line">            &#123;</span><br><span class="line">                res=res*a;</span><br><span class="line">            &#125;</span><br><span class="line">            a=a*a;</span><br><span class="line">            a=<span class="built_in">shorten</span>(a,<span class="number">1000</span>);</span><br><span class="line">            b=b/<span class="built_in">BigNum</span>(<span class="number">2</span>);</span><br><span class="line">            b= <span class="built_in">shorten</span>(b,b.len+b.exp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nega_pow?res:(<span class="built_in">BigNum</span>(<span class="number">1</span>)/res);</span><br><span class="line">    &#125;<span class="comment">//整数，使用快速幂</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//cout&lt;&lt;&quot;float power&quot;&lt;&lt;endl;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">to_BigNum</span>(<span class="built_in">exp</span>(<span class="built_in">to_double</span>(b)* <span class="built_in">log</span>(<span class="built_in">to_double</span>(a))));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="后缀表达式的转化和计算"><a href="#后缀表达式的转化和计算" class="headerlink" title="后缀表达式的转化和计算"></a>后缀表达式的转化和计算</h3><p>本节实现于<a href="https://github.com/GuTaoZi/CS205_Project02/blob/master/src/RPN.cpp">RPN.cpp</a>，主要实现了两个功能，具体原理上文已述：</p>
<ol>
<li>将中缀表达式转化为后缀表达式</li>
<li>计算后缀表达式</li>
</ol>
<p>由于队列和栈中元素可能是操作符/函数/数字，因此开玩笑式的建立了aUtO结构体，作为栈和队列的类型，以实现不同类型的数据可以用同一个数据结构存储的效果。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">aUtO</span><span class="comment">//just kidding :)</span></span><br><span class="line">&#123;</span><br><span class="line">    BigNum v;</span><br><span class="line">    string s;</span><br><span class="line">    <span class="type">bool</span> is_num;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">aUtO</span>(BigNum v)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;v = v;</span><br><span class="line">        is_num = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">aUtO</span>(string s)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;s = s;</span><br><span class="line">        is_num = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">aUtO</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;s = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        is_num = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">BigNum <span class="title">calculate</span><span class="params">(string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">trim</span>(s);</span><br><span class="line">    vector&lt;string&gt; sub;</span><br><span class="line">    string it = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> i: s)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">is_operator</span>(i)&amp;&amp;!(it[it.<span class="built_in">length</span>()<span class="number">-1</span>]==<span class="string">&#x27;e&#x27;</span>&amp;&amp;i==<span class="string">&#x27;-&#x27;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (it != <span class="string">&quot;&quot;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                sub.<span class="built_in">push_back</span>(it);</span><br><span class="line">                it=<span class="string">&quot;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            sub.<span class="built_in">push_back</span>(<span class="built_in">string</span>(<span class="number">1</span>,i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            it += <span class="built_in">string</span>(<span class="number">1</span>,i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(it!=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        sub.<span class="built_in">push_back</span>(it);</span><br><span class="line">        it=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    queue&lt;aUtO&gt; q;</span><br><span class="line">    stack&lt;aUtO&gt; stk;</span><br><span class="line">    <span class="keyword">for</span> (string i: sub)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i.<span class="built_in">length</span>() == <span class="number">1</span> &amp;&amp; <span class="built_in">is_operator</span>(i[<span class="number">0</span>]))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="string">&quot;(&quot;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                stk.<span class="built_in">push</span>(<span class="built_in">aUtO</span>(i));</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="string">&quot;)&quot;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">while</span> (stk.<span class="built_in">top</span>().s != <span class="string">&quot;(&quot;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    q.<span class="built_in">push</span>(stk.<span class="built_in">top</span>());</span><br><span class="line">                    stk.<span class="built_in">pop</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                stk.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">while</span> (!stk.<span class="built_in">empty</span>() &amp;&amp; <span class="built_in">priority</span>(i) &lt;= <span class="built_in">priority</span>(stk.<span class="built_in">top</span>().s))</span><br><span class="line">                &#123;</span><br><span class="line">                    q.<span class="built_in">push</span>(stk.<span class="built_in">top</span>());</span><br><span class="line">                    stk.<span class="built_in">pop</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                stk.<span class="built_in">push</span>(<span class="built_in">aUtO</span>(i));</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">is_func</span>(i))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (!stk.<span class="built_in">empty</span>() &amp;&amp; <span class="built_in">priority</span>(i) &lt;= <span class="built_in">priority</span>(stk.<span class="built_in">top</span>().s))</span><br><span class="line">            &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(stk.<span class="built_in">top</span>());</span><br><span class="line">                stk.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            stk.<span class="built_in">push</span>(<span class="built_in">aUtO</span>(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">classifier</span>(i) != NaN)</span><br><span class="line">        &#123;</span><br><span class="line">            q.<span class="built_in">push</span>(<span class="built_in">aUtO</span>(<span class="built_in">BigNum</span>(i)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">contains</span>(i))</span><br><span class="line">        &#123;</span><br><span class="line">            q.<span class="built_in">push</span>(<span class="built_in">aUtO</span>(<span class="built_in">value_of</span>(i)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            BigNum err = <span class="built_in">BigNum</span>();</span><br><span class="line">            err.type = NaN;</span><br><span class="line">            <span class="keyword">return</span> err;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!stk.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        q.<span class="built_in">push</span>(stk.<span class="built_in">top</span>());</span><br><span class="line">        stk.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    BigNum x, y;</span><br><span class="line">    aUtO cur, tmp;</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        cur = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (cur.is_num)</span><br><span class="line">        &#123;</span><br><span class="line">            stk.<span class="built_in">push</span>(cur);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            x = stk.<span class="built_in">top</span>().v;</span><br><span class="line">            stk.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">is_operator</span>(cur.s[<span class="number">0</span>]))</span><br><span class="line">            &#123;</span><br><span class="line">                y = stk.<span class="built_in">top</span>().v;</span><br><span class="line">                stk.<span class="built_in">pop</span>();</span><br><span class="line">                stk.<span class="built_in">push</span>(<span class="built_in">calc</span>(y, x, cur.s[<span class="number">0</span>]));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">is_func</span>(cur.s))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(cur.s==<span class="string">&quot;exp&quot;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    stk.<span class="built_in">push</span>(<span class="built_in">aUtO</span>(<span class="built_in">to_BigNum</span>(<span class="built_in">exp</span>(<span class="built_in">to_double</span>(x)))));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(cur.s==<span class="string">&quot;ln&quot;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    stk.<span class="built_in">push</span>(<span class="built_in">aUtO</span>(<span class="built_in">to_BigNum</span>(<span class="built_in">log</span>(<span class="built_in">to_double</span>(x)))));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(cur.s==<span class="string">&quot;cos&quot;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    stk.<span class="built_in">push</span>(<span class="built_in">aUtO</span>(<span class="built_in">to_BigNum</span>(<span class="built_in">cos</span>(<span class="built_in">to_double</span>(x)))));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(cur.s==<span class="string">&quot;sin&quot;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    stk.<span class="built_in">push</span>(<span class="built_in">aUtO</span>(<span class="built_in">to_BigNum</span>(<span class="built_in">sin</span>(<span class="built_in">to_double</span>(x)))));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(cur.s==<span class="string">&quot;sqrt&quot;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    stk.<span class="built_in">push</span>(<span class="built_in">aUtO</span>(<span class="built_in">to_BigNum</span>(<span class="built_in">sqrt</span>(<span class="built_in">to_double</span>(x)))));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stk.<span class="built_in">top</span>().v;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="级数近似计算函数"><a href="#级数近似计算函数" class="headerlink" title="级数近似计算函数"></a>级数近似计算函数</h3><p>本节代码位于<a href="https://github.com/GuTaoZi/CS205_Project02/blob/master/src/func.cpp">func.cpp</a>，由于中途易辙，此处实现了自然指数和自然对数两个函数。</p>
<p>虽然最后决定弃用，但此处仍展示其思路。</p>
<p>大致流程为：预处理→计算级数求和→得到结果。</p>
<p>从运算复杂度而言，这两个函数的实现对于时间的耗费过大，并不适用于题设环境。</p>
<h4 id="e-x"><a href="#e-x" class="headerlink" title="$e^x$"></a>$e^x$</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">BigNum <span class="title">exp</span><span class="params">(BigNum a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">is_zero</span>(a))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">BigNum</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a.type == INF || a.type == NaN)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    BigNum res = <span class="built_in">BigNum</span>(<span class="number">1</span>);</span><br><span class="line">    BigNum fac = <span class="built_in">BigNum</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= PRECISION; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        BigNum it = <span class="built_in">BigNum</span>(i);</span><br><span class="line">        fac = fac * it;</span><br><span class="line">        res = res + ((a ^ it) / fac);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="ln-x"><a href="#ln-x" class="headerlink" title="$ln(x)$"></a>$ln(x)$</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">BigNum <span class="title">ln</span><span class="params">(BigNum a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="built_in">BigNum</span>(<span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">BigNum</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!a.sign || <span class="built_in">is_zero</span>(a))</span><br><span class="line">    &#123;</span><br><span class="line">        BigNum err = <span class="built_in">BigNum</span>();</span><br><span class="line">        err.type = NaN;</span><br><span class="line">        <span class="keyword">return</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    BigNum res = <span class="built_in">BigNum</span>();</span><br><span class="line">    BigNum t = (a - <span class="built_in">BigNum</span>(<span class="number">1</span>)) / (a + <span class="built_in">BigNum</span>(<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span> * PRECISION; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &amp; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            BigNum it = <span class="built_in">BigNum</span>(i);</span><br><span class="line">            res = res + <span class="built_in">BigNum</span>(<span class="number">2</span>) / it * t ^ it;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因此，本项目的五个函数均取自Math库。</p>
<h3 id="变量-1"><a href="#变量-1" class="headerlink" title="变量"></a>变量</h3><p>以下是在<code>varia.h</code>头文件中的函数，基于<code>STL::map</code>实现，因此功能简洁明了，实现位于<code>variables.cpp</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">trim</span><span class="params">(string &amp;s)</span></span>;<span class="comment">//去除空格</span></span><br><span class="line"></span><br><span class="line"><span class="function">BigNum <span class="title">value_of</span><span class="params">(string name)</span></span>;<span class="comment">//取值</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(string name, string val)</span></span>;<span class="comment">//插入(输入参数为字符串)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(string name, BigNum val)</span></span>;<span class="comment">//插入(输入参数为BigNum)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">remove</span><span class="params">(string name)</span></span>;<span class="comment">//删除</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">modify</span><span class="params">(string name, BigNum val)</span></span>;<span class="comment">//修改</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">contains</span><span class="params">(string name)</span></span>;<span class="comment">//查询是否存在</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(string s)</span></span>;<span class="comment">//添加/编辑映射</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">value_list</span><span class="params">(<span class="type">int</span> precision)</span></span>;<span class="comment">//打印变量列表</span></span><br></pre></td></tr></table></figure>
<h3 id="用户友好设计"><a href="#用户友好设计" class="headerlink" title="用户友好设计"></a>用户友好设计</h3><p>本程序设计了用户友好的交互命令，命令列表如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#h help</span><br><span class="line">#p [num] set precision(-1 for as accurate as possible)</span><br><span class="line">#n number format</span><br><span class="line">#f function list</span><br><span class="line">#v variable list</span><br><span class="line">[variable_name]=[num] set/modify variable</span><br><span class="line">#q quit</span><br></pre></td></tr></table></figure>
<p>分别实现了：帮助菜单、设置输出精度、显示支持的输入格式列表、显示支持的函数列表、当前变量列表、创建/编辑变量、退出功能，本项目使用交互式输入输出，在收到#q指令前可持续输入，并会对不同错误进行报错提示，<del>并且使用了&gt;&gt;&gt;来让计算器看起来比较像某种语言的交互式界面。</del></p>
<h2 id="Part-3-Result-amp-Verification"><a href="#Part-3-Result-amp-Verification" class="headerlink" title="Part 3 - Result &amp; Verification"></a>Part 3 - Result &amp; Verification</h2><p>经与计算器对照确认，下列结果均正确</p>
<p>Bunched Test case #1: 基础五则运算</p>
<p><img src="https://s2.loli.net/2022/10/16/hgA8YTn1KLy6lrw.png" alt="image-20221016015749671.png" style="zoom:50%;" /></p>
<p>Bunched Test case #2: 高精度五则运算</p>
<p><img src="https://s2.loli.net/2022/10/16/Xh5PFVf3Z24WDtx.png" alt="image-20221016020050214.png"></p>
<p>Bunched Test case #3: 变量赋值与运算</p>
<p><img src="https://s2.loli.net/2022/10/16/3V6ZWpIDQM7z8m4.png" alt="image-20221016020446449.png"></p>
<p>Bunched Test case #4: 小数幂与函数</p>
<p><img src="https://s2.loli.net/2022/10/16/zMZekKmqWVUT8Qv.png" alt="image-20221016021351071.png" style="zoom:50%;" /></p>
<p>Bunched Test case #5: 用户友好设计</p>
<p><img src="https://s2.loli.net/2022/10/16/lR7HhZjQI2sozcf.png" alt="image-20221016021628241.png" style="zoom:50%;" /></p>
<h2 id="Part-4-Difficulties-amp-Solutions"><a href="#Part-4-Difficulties-amp-Solutions" class="headerlink" title="Part 4 - Difficulties &amp; Solutions"></a>Part 4 - Difficulties &amp; Solutions</h2><h3 id="重载运算符"><a href="#重载运算符" class="headerlink" title="重载运算符"></a>重载运算符</h3><p><strong>Difficulty: </strong>新形式存储在对齐小数点时需要新的方法，和传统写法有一定差异</p>
<p><strong>Solution:</strong> 充分利用存了exp的优势，将按位运算简化为对exp的运算，补零对齐即可按常规思路模拟计算。</p>
<h3 id="运算顺序"><a href="#运算顺序" class="headerlink" title="运算顺序"></a>运算顺序</h3><p><strong>Difficulty:</strong> 含有括号、函数、五种二元运算的中缀表达式运算顺序难以用计算机模拟计算</p>
<p><strong>Solution:</strong> 确定优先级，利用栈和队列辅助，转换成后缀表达式再使用固定流程循环计算。</p>
<h3 id="变量-2"><a href="#变量-2" class="headerlink" title="变量"></a>变量</h3><p><strong>Difficulty1:</strong> 如何防止用户起奇怪的变量名？</p>
<p><strong>Solution1:</strong> 用正则表达式进行诸如“第一位不能是数字”这样的限制，若不符条件报错即可。</p>
<p><strong>Difficulty2:</strong> 在变量名相互包含的情况下如何代入？</p>
<p><strong>Solution2:</strong> 根据运算符进行split，若算式合法，则分出来的一定是完整变量名，选整个完整变量名带入计算即可，若不存在该变量则说明变量列表没有。</p>
<h3 id="小数次幂-amp-函数"><a href="#小数次幂-amp-函数" class="headerlink" title="小数次幂&amp;函数"></a>小数次幂&amp;函数</h3><p><strong>Difficulty:</strong> 对于以$O(n^2)$实现的模拟乘法作为基础编写的整数幂和除法时间复杂度只会比$O(n^2)$高出更多，如遇计算级数这样高频调用乘法的情景，这样的时间复杂度将显得过高。</p>
<p><strong>Solution:</strong> 本项目选择引用Math库内置的函数进行计算，高效简洁，避免重复造轮子<del>(其实还是造了，只是技不如人，甘拜下风)</del>。</p>
<p><strong>Possible Solution:</strong> 其实后来有考虑过一个解决方案，就是将小数次幂的整数部分剥离，只计算小数部分，这样直观感觉上会极大降低计算耗时，但对自己的乘法没什么信心，于是没有再造方轮子。</p>
<h2 id="Part-5-Difficulties-amp-Solutions"><a href="#Part-5-Difficulties-amp-Solutions" class="headerlink" title="Part 5 - Difficulties &amp; Solutions"></a>Part 5 - Difficulties &amp; Solutions</h2><p>本次项目让我深刻的认识到了自己能力的有限：当可以做的事远大于自己所能做的事的时候。</p>
<p>重载完加减乘除的时候感觉还非常良好，写整数次幂的时候就开始纠结小数次幂该怎么写，想到级数展开的解法后怀着对时间复杂度的忐忑实现了，也非常不让人失望地耗时过长了。</p>
<p>回过头一想：double的精度其实挺够用的(如果把整数部分也用来存小数)，才发现自己走远了。</p>
<p>虽然完成了项目要求，但我认为仅仅是高精度这一个算法就还有无数值得我去了解的内容，何况是C++这一整门课呢？</p>
<p><del>个人很喜欢这种能够用10~20小时左右做一个小项目的形式，耐心、心性和debug能力都有了显著的磨练和提升。</del></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>CS205 C/C++ Project01设计报告 乘法计算器</title>
    <url>/2022/11/05/CS205_%E9%A1%B9%E7%9B%AE%E8%AE%BE%E8%AE%A1%E6%8A%A5%E5%91%8A_Multiplication_Calculator/</url>
    <content><![CDATA[<h2 id="Part-0-团队成员"><a href="#Part-0-团队成员" class="headerlink" title="Part 0. 团队成员"></a>Part 0. <del>团队</del>成员</h2><div class="table-container">
<table>
<thead>
<tr>
<th>姓名</th>
<th>学号</th>
<th><del>贡献率</del></th>
</tr>
</thead>
<tbody>
<tr>
<td>咕桃</td>
<td>-</td>
<td><del>100%</del></td>
</tr>
</tbody>
</table>
</div>
<h2 id="Part-1-Analysis"><a href="#Part-1-Analysis" class="headerlink" title="Part 1 - Analysis"></a>Part 1 - Analysis</h2><h3 id="题目重述-amp-主要思路"><a href="#题目重述-amp-主要思路" class="headerlink" title="题目重述&amp;主要思路"></a>题目重述&amp;主要思路</h3><p>本题目要求实现一个能将若干格式下的两个数进行乘法运算的简单计算器。</p>
<p>根据题目所给样例，可以分析出题目基础要求的数据类型：</p>
<ol>
<li>整数</li>
<li>浮点数</li>
<li>大整数</li>
<li>浮点数(科学计数法)</li>
</ol>
<p>其中对于程序设计要求最高的为<strong>大整数</strong>和<strong>浮点数(科学计数法格式)</strong>的运算，因此笔者在设计程序时选择实现<strong>大整数(科学计数法格式)</strong>以便一次性适配题目要求的所有格式，除基础要求外，本项目支持以下功能：</p>
<ol>
<li>大整数(科学计数法)</li>
<li>带有K/M/G/T后缀的大整数</li>
<li>大浮点数</li>
<li>大浮点数(科学计数法)</li>
<li>带有K/M/G/T后缀的大浮点数</li>
<li>简写形式大浮点数</li>
<li>自定义精度计算</li>
<li>显示数据类型</li>
<li>显示科学计数法格式转换过程</li>
<li>交互式输入输出</li>
</ol>
<h3 id="模型假设"><a href="#模型假设" class="headerlink" title="模型假设"></a>模型假设</h3><p>由于题目所给信息较少，笔者对输入的数据范围等进行了假设，并根据假设设计程序。</p>
<p>以下是本程序适配的数据范围：</p>
<p>对于一个科学计数法浮点数，格式记为$A.BeC$</p>
<p>整数部分$A$与小数部分$B$位数之和记为$n$，$1\leq n \leq 10^{4}$，即存储一万位有效数字</p>
<p>10的幂指数记为$C$，$-10^{18}\leq C \leq 10^{18}$，即存储上限为$10^{10^{18}}$量级</p>
<h3 id="高精度乘法"><a href="#高精度乘法" class="headerlink" title="高精度乘法"></a>高精度乘法</h3><p>对于<code>__int128</code>也无法存下的大数，此处使用了高精度乘法的算法进行运算。</p>
<p>模拟竖式计算的基础高精度乘法算法复杂度为$O(n^2)$，对于10000位有效数字，一般能在秒级时间内得出运算结果，因此使用该算法解决问题是可以接受的，<del>就不劳压位乃至FFT和NTT牛刀杀鸡了</del>。</p>
<p>高精度乘法作为广为人知的入门算法，此处不再过多赘述细节，仅简述其思路：</p>
<p>以$A*B=C$为例，$A$和$B$位数记为$n_A,n_B$</p>
<ol>
<li><p>调整$A&gt;B$。</p>
</li>
<li><p>采用<code>short</code>数组，按位存储$A$和$B$的有效数字。</p>
</li>
<li><p>模拟竖式计算，先遍历两个乘数每一位相乘的值，加到结果数的对应位。</p>
<p>$C[p]=\sum^{p-1}_{i=1}\sum^{p-i}_{j=1}A[i]*B[j]$</p>
</li>
<li><p>从低位到高位取模进位。</p>
</li>
<li><p>调整结果数位数，加和幂指数，输出结果。</p>
</li>
</ol>
<h3 id="多类型数据的输入、互化、交叉运算"><a href="#多类型数据的输入、互化、交叉运算" class="headerlink" title="多类型数据的输入、互化、交叉运算"></a>多类型数据的输入、互化、交叉运算</h3><p>对于合法输入的多类型数据，程序将其分为7类，并使用简洁的正则表达式进行类型识别，识别不同类型后，再通过分支使用不同构造方法进行拆分存储。</p>
<p>本题中的运算涉及科学计数法，因此笔者采用了向上兼容，将所有数字预处理为科学计数法整数格式，即通过将位数存储于幂指数中的方式，保证次幂前数字在$(1,10)$之间，免去了传统高精度浮点运算中对齐小数点的繁杂，同时规避了不同类型数据之间的互化问题。</p>
<p>由于上述处理，程序仅需满足同一类型的乘法，笔者采用简洁的重载运算符写法，具有优秀的普适性和拓展性。</p>
<h2 id="Part-2-Code"><a href="#Part-2-Code" class="headerlink" title="Part 2 - Code"></a>Part 2 - Code</h2><h3 id="正则表达式与数据类型"><a href="#正则表达式与数据类型" class="headerlink" title="正则表达式与数据类型"></a>正则表达式与数据类型</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">const</span> regex <span class="title">pure_int</span><span class="params">(<span class="string">&quot;^[+-]?[0-9]+$&quot;</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">const</span> regex <span class="title">int_with_e</span><span class="params">(<span class="string">&quot;^[+-]?[0-9]+e[+-]?[0-9]+$&quot;</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">const</span> regex <span class="title">int_with_suffix</span><span class="params">(<span class="string">&quot;^[+-]?[0-9]+[kKmMgGtT]$&quot;</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">const</span> regex <span class="title">pure_float</span><span class="params">(<span class="string">&quot;^[+-]?[0-9]+.[0-9]+$&quot;</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">const</span> regex <span class="title">float_with_e</span><span class="params">(<span class="string">&quot;^[+-]?[0-9]+.[0-9]+e[+-]?[0-9]+$&quot;</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">const</span> regex <span class="title">float_with_suffix</span><span class="params">(<span class="string">&quot;^[+-]?[0-9]+.[0-9]+[kKmMgGtT]$&quot;</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">const</span> regex <span class="title">abbreviated_float</span><span class="params">(<span class="string">&quot;^[+-]?.[0-9]+$&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">data_type</span></span><br><span class="line">&#123;</span><br><span class="line">    NaN, PURE_INT, INT_WITH_E, INT_WITH_SUFFIX, PURE_FLOAT, FLOAT_WITH_E, FLOAT_WITH_SUFFIX, ABBR_FLOAT</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">const</span> string type_name[] = &#123;<span class="string">&quot;NaN&quot;</span>, <span class="string">&quot;PURE_INT&quot;</span>, <span class="string">&quot;INT_WITH_E&quot;</span>, <span class="string">&quot;INT_WITH_SUFFIX&quot;</span>, <span class="string">&quot;PURE_FLOAT&quot;</span>, <span class="string">&quot;FLOAT_WITH_E&quot;</span>, <span class="string">&quot;FLOAT_WITH_SUFFIX&quot;</span>, <span class="string">&quot;ABBR_FLOAT&quot;</span>&#125;;</span><br></pre></td></tr></table></figure>
<p>上文提到，程序将合法输入数据分为7类，分别为：纯整数、带有幂指数的整数、带有后缀的整数(kmgt)、纯浮点数、带有幂指数的浮点数、带有后缀的浮点数、简写浮点数。</p>
<p>此处使用enum进行记录，<code>classifier()</code>函数中集成正则表达式进行识别分类。在本程序中，以下样例所示格式的输入均合法：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">PURE_INT : <span class="number">-19260817</span></span><br><span class="line">INT_WITH_E : <span class="number">-1926e-0817</span></span><br><span class="line">INT_WITH_SUFFIX : <span class="number">-19260817</span>k</span><br><span class="line">PURE_FLOAT : <span class="number">-1926.0817</span></span><br><span class="line">FLOAT_WITH_E : <span class="number">-1926.08e-17</span></span><br><span class="line">FLOAT_WITH_SUFFIX : <span class="number">-1926.0817</span>k</span><br><span class="line">ABBR_FLOAT : <span class="number">-.19260817</span></span><br></pre></td></tr></table></figure>
<h3 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">BigNum</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">    <span class="type">short</span> val[<span class="number">10005</span>];<span class="comment">//1e4 digits, from low to high</span></span><br><span class="line">    <span class="type">bool</span> sign;<span class="comment">//true: +</span></span><br><span class="line">    ll exp;</span><br><span class="line">    data_type type;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>对于数据，此处使用结构体进行统一存储，$len$存储有效位数、$val[]$从低位到高位存储各位数字，$sign$存储符号，$exp$存储幂指数，$type$则存储数据类型(其实最后几乎都会变成<code>INT_WITH_E</code>)。使用结构体为后续的构造器、重载运算符带来便利。</p>
<h3 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">BigNum</span>(string s)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">transform</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>(), s.<span class="built_in">begin</span>(), ::tolower);</span><br><span class="line">        <span class="keyword">this</span>-&gt;type = <span class="built_in">classifier</span>(s);</span><br><span class="line">        <span class="keyword">switch</span> (type)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> PURE_INT:...</span><br><span class="line">            <span class="keyword">case</span> INT_WITH_E:...</span><br><span class="line">            <span class="keyword">case</span> INT_WITH_SUFFIX:...</span><br><span class="line">            <span class="keyword">case</span> PURE_FLOAT:...</span><br><span class="line">            <span class="keyword">case</span> FLOAT_WITH_E:</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> dot_pos = s.<span class="built_in">find</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">                <span class="keyword">this</span>-&gt;sign = <span class="literal">true</span>;</span><br><span class="line">                <span class="type">int</span> e_pos = s.<span class="built_in">find</span>(<span class="string">&#x27;e&#x27;</span>);</span><br><span class="line">                ll base_exp = -(e_pos - dot_pos - <span class="number">1</span>);</span><br><span class="line">                s.<span class="built_in">erase</span>(dot_pos, <span class="number">1</span>);</span><br><span class="line">                e_pos--;</span><br><span class="line">                <span class="keyword">if</span> (s[e_pos + <span class="number">1</span>] == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    e_pos++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = e_pos + <span class="number">1</span>; i &lt; s.<span class="built_in">size</span>(); i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    exp *= <span class="number">10</span>;</span><br><span class="line">                    exp += s[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (s[e_pos] == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    exp = -exp;</span><br><span class="line">                    e_pos--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">this</span>-&gt;sign = <span class="literal">false</span>;</span><br><span class="line">                    s.<span class="built_in">erase</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">                    e_pos--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= e_pos; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">this</span>-&gt;val[i] = s[e_pos - i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">this</span>-&gt;exp += base_exp;</span><br><span class="line">                <span class="keyword">this</span>-&gt;len = e_pos;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> FLOAT_WITH_SUFFIX:...</span><br><span class="line">            <span class="keyword">case</span> ABBR_FLOAT:...</span><br><span class="line">            <span class="keyword">default</span>:...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>在<code>classifier()</code>识别类别后，构造器针对不同类别数据，传入字符串，生成新结构体。</p>
<p>各类型思路类似，此处仅展示相对复杂的<code>FLOAT_WITH_E</code>类型的构造过程，主要分为以下三步:</p>
<ol>
<li>记录小数点对$exp$的贡献，抹除小数点，加和原有$exp$。</li>
<li>记录符号并抹除。</li>
<li>按位取模存储，记录$len$。</li>
</ol>
<h3 id="规范化格式"><a href="#规范化格式" class="headerlink" title="规范化格式"></a>规范化格式</h3><p>在运算前，首先进行格式规范化，将末位0全部纳入幂指数后抹除，降低计算复杂度。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">BigNum <span class="title">standardize_exp</span><span class="params">(BigNum a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BigNum c;</span><br><span class="line">    c.type = PURE_INT;</span><br><span class="line">    c.len = <span class="number">0</span>;</span><br><span class="line">    c.sign = a.sign;</span><br><span class="line">    c.exp = a.exp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= a.len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a.val[i] == <span class="number">0</span> &amp;&amp; c.len == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            c.exp++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            c.val[++c.len] = a.val[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (c.exp)</span><br><span class="line">    &#123;</span><br><span class="line">        c.type = INT_WITH_E;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="重载运算符"><a href="#重载运算符" class="headerlink" title="重载运算符"></a>重载运算符</h3><p>此处重载了比较符<code>&lt;</code>和乘法符<code>*</code>。</p>
<p>比较符的主要作用是将较大的数放在竖式上方，因此不考虑符号。思路简单：规范化→比幂指数→从高到低逐位比较。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&lt;(BigNum a, BigNum b)<span class="comment">//抛开符号比大小</span></span><br><span class="line">&#123;</span><br><span class="line">    a = <span class="built_in">standardize_exp</span>(a);</span><br><span class="line">    b = <span class="built_in">standardize_exp</span>(b);</span><br><span class="line">    <span class="keyword">if</span> (a.exp == b.exp)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = a.len; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (a.val[i] != b.val[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> a.val[i] &lt; b.val[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//a==b</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a.exp &lt; b.exp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>乘法重载原理已在上文提过，此处模拟竖式计算就好。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">BigNum <span class="keyword">operator</span>*(BigNum a, BigNum b)</span><br><span class="line">&#123;</span><br><span class="line">    a = <span class="built_in">standardize_exp</span>(a);</span><br><span class="line">    b = <span class="built_in">standardize_exp</span>(b);</span><br><span class="line">    BigNum c, t;</span><br><span class="line">    c.exp = a.exp + b.exp;</span><br><span class="line">    c.sign = !(a.sign <span class="keyword">xor</span> b.sign);</span><br><span class="line">    c.len = a.len + b.len + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (a &lt; b)</span><br><span class="line">    &#123;</span><br><span class="line">        t = a;</span><br><span class="line">        a = b;</span><br><span class="line">        b = t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= a.len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= b.len; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            c.val[i + j - <span class="number">1</span>] += a.val[i] * b.val[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= c.len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c.val[i] &gt;= <span class="number">10</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            c.val[i + <span class="number">1</span>] += c.val[i] / <span class="number">10</span>;</span><br><span class="line">            c.val[i] %= <span class="number">10</span>;</span><br><span class="line">            c.len = <span class="built_in">max</span>(c.len, i + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    c = <span class="built_in">standardize_exp</span>(c);</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h3><p>输出函数<code>print_BigNum(BigNum a, ll constraint)</code>初始默认以科学计数法格式，输出无精度损失的结果。</p>
<p>但有时候我们并不关心小数点后第10位是什么，因此该函数的<code>constraint</code>参数限定了小数点后的位数，通过四舍五入的方式，使得输出结果不会过于冗长。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">print_BigNum</span><span class="params">(BigNum a, ll constraint)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string res = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    a = <span class="built_in">standardize_exp</span>(a);</span><br><span class="line">    <span class="type">bool</span> flg = <span class="literal">false</span>;</span><br><span class="line">    ll cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = a.len; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a.val[i] != <span class="number">0</span> || flg)</span><br><span class="line">        &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            <span class="keyword">if</span> (constraint != <span class="number">-1</span> &amp;&amp; cnt &lt;= constraint + <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                flg = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">if</span>(cnt==constraint+<span class="number">1</span>&amp;&amp;(i&gt;<span class="number">1</span>&amp;&amp;a.val[i<span class="number">-1</span>]&gt;=<span class="number">5</span>))<span class="comment">//四舍五入</span></span><br><span class="line">                &#123;</span><br><span class="line">                    res = res + (<span class="type">char</span>) (a.val[i] + <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    res = res + (<span class="type">char</span>) (a.val[i] + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (constraint == <span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                res = res + (<span class="type">char</span>) (a.val[i] + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                flg = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!flg)</span><br><span class="line">    &#123;</span><br><span class="line">        res = res + <span class="string">&quot;0&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (res.<span class="built_in">size</span>() &gt; <span class="number">1</span> || a.exp)</span><br><span class="line">    &#123;</span><br><span class="line">        ll new_exp = a.exp + cnt - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (res.<span class="built_in">size</span>() &gt; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            res.<span class="built_in">insert</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (new_exp)</span><br><span class="line">        &#123;</span><br><span class="line">            res += <span class="string">&quot;e&quot;</span>;</span><br><span class="line">            stringstream ss;</span><br><span class="line">            string tmp_s;</span><br><span class="line">            ss.<span class="built_in">clear</span>();</span><br><span class="line">            ss &lt;&lt; new_exp;</span><br><span class="line">            res = res + ss.<span class="built_in">str</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!a.sign)</span><br><span class="line">    &#123;</span><br><span class="line">        res = <span class="string">&quot;-&quot;</span> + res;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="用户交互"><a href="#用户交互" class="headerlink" title="用户交互"></a>用户交互</h3><p>本程序设计了用户友好的交互命令，命令列表如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-h help</span><br><span class="line">-t type_list</span><br><span class="line">-p [num] set precision</span><br><span class="line">-s show datatype</span><br><span class="line">-c show data convert</span><br><span class="line">-q quit</span><br></pre></td></tr></table></figure>
<p>分别实现了：帮助列表、支持的数据类型列表、设置小数点后保留位数、展示输入数据类型、展示转换后数据类型、退出功能，且本程序除了支持命令行参数输入单次计算外，在收到<code>-q</code>指令前也支持多次输入计算，并对错误输入进行报错。<del>并且使用了&gt;&gt;&gt;来让计算器看起来比较像某种语言的交互式界面。</del></p>
<h2 id="Part-3-Result-amp-Verification"><a href="#Part-3-Result-amp-Verification" class="headerlink" title="Part 3 - Result &amp; Verification"></a>Part 3 - Result &amp; Verification</h2><h3 id="基础要求"><a href="#基础要求" class="headerlink" title="基础要求"></a>基础要求</h3><p>Test case #1: 整数乘法</p>
<p><img src="C:\Users\first_fan\AppData\Roaming\Typora\typora-user-images\image-20220925015232703.png" alt="image-20220925015232703" style="zoom:67%;" /></p>
<p><img src="C:\Users\first_fan\AppData\Roaming\Typora\typora-user-images\image-20220925083649225.png" alt="image-20220925083649225" style="zoom: 33%;" /></p>
<p>Test case #2: 浮点数乘法</p>
<p><img src="C:\Users\first_fan\AppData\Roaming\Typora\typora-user-images\image-20220925015341290.png" alt="image-20220925015341290" style="zoom:67%;" /></p>
<p><img src="C:\Users\first_fan\AppData\Roaming\Typora\typora-user-images\image-20220925083735712.png" alt="image-20220925083735712" style="zoom:50%;" /></p>
<p>Test case #3: 大整数乘法</p>
<p><img src="C:\Users\first_fan\AppData\Roaming\Typora\typora-user-images\image-20220925015438229.png" alt="image-20220925015438229"></p>
<p><img src="C:\Users\first_fan\AppData\Roaming\Typora\typora-user-images\image-20220925083840850.png" alt="image-20220925083840850"></p>
<p>Test case #4: 大浮点数乘法</p>
<p><img src="C:\Users\first_fan\AppData\Roaming\Typora\typora-user-images\image-20220925015645989.png" alt="image-20220925015645989" style="zoom:67%;" /></p>
<p><img src="C:\Users\first_fan\AppData\Roaming\Typora\typora-user-images\image-20220925084538204.png" alt="image-20220925084538204"></p>
<p>(windows的科学计算器到这里精度就不够了)</p>
<p>Test case #5: 错误输入</p>
<p><img src="C:\Users\first_fan\AppData\Roaming\Typora\typora-user-images\image-20220925015809404.png" alt="image-20220925015809404" style="zoom: 67%;" /></p>
<h3 id="进阶测试"><a href="#进阶测试" class="headerlink" title="进阶测试"></a>进阶测试</h3><p>Bunched test cases : 混合格式多组输入、鲁棒性…</p>
<p><img src="C:\Users\first_fan\AppData\Roaming\Typora\typora-user-images\image-20220925021142752.png" alt="image-20220925021142752"></p>
<h3 id="拓展测试"><a href="#拓展测试" class="headerlink" title="拓展测试"></a>拓展测试</h3><p>Bunched test cases : 用户交互、精度设置、数据类型、数据转换、鲁棒性…</p>
<p><img src="C:\Users\first_fan\AppData\Roaming\Typora\typora-user-images\image-20220925022112312.png" alt="image-20220925022112312"></p>
<p>Big number test case : 1000位*1000位，运行耗时52ms(含IO时间)，用户态CPU耗时11ms，系统态CPU耗时12ms。</p>
<p>输入：</p>
<p><img src="C:\Users\first_fan\AppData\Roaming\Typora\typora-user-images\image-20220925083224925.png" alt="image-20220925083224925"></p>
<p>输出：</p>
<p><img src="C:\Users\first_fan\AppData\Roaming\Typora\typora-user-images\image-20220925083249101.png" alt="image-20220925083249101"></p>
<h2 id="Part-4-Difficulties-amp-Solutions"><a href="#Part-4-Difficulties-amp-Solutions" class="headerlink" title="Part 4 - Difficulties &amp; Solutions"></a>Part 4 - Difficulties &amp; Solutions</h2><h3 id="读入与存储"><a href="#读入与存储" class="headerlink" title="读入与存储"></a>读入与存储</h3><p><strong>Difficulty</strong>：本次项目的一大难题在于输入数据的格式多样且未知，因此如何将各种格式的字符串转化为数字，以何种形式存储再进行计算是项目的核心所在。</p>
<p><strong>Solution</strong>：通过自己可能的输入格式进行设计，利用正则表达式处理字符串，向上兼容全部以<code>INT_WITH_E</code>格式存储，减少了对齐小数点等繁杂过程。</p>
<h3 id="高精度"><a href="#高精度" class="headerlink" title="高精度"></a>高精度</h3><p><strong>Difficulty</strong>：对于大数的运算，无法使用原生的数据类型进行存储。</p>
<p><strong>Solution</strong>：利用结构体按位存储，重载高精度乘法运算，计算时直接使用即可。</p>
<h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p><strong>Difficulty</strong>：对于不同的输入，应该采用怎样的输出格式？</p>
<p><strong>Solution</strong>：本项目定位是科学计算器，且采用了归一化的数据存储，因此结果只要不是-9~9的<code>PURE_INT</code>，那么就会采用科学计数法格式进行输出，统一且优雅。</p>
<h3 id="用户友好设计"><a href="#用户友好设计" class="headerlink" title="用户友好设计"></a>用户友好设计</h3><p><strong>Difficulty</strong>：用户不知道本项目支持的输入格式，需要查看数据类型、科学计数法转换结果等调试信息，有不同精度需求，有多次计算需求…</p>
<p><strong>Solution</strong>：<del>为了调试的时候更舒服，</del>实现了帮助菜单，显示调试信息命令，自定义保留位数命令，交互式输入输出…</p>
<h2 id="Part-5-Summary"><a href="#Part-5-Summary" class="headerlink" title="Part 5 - Summary"></a>Part 5 - Summary</h2><p>​        初见题目时，一眼高精，觉得相对简单；仔细一看样例，没说输入格式，样例中包含题目要求，被不同类型数据的交叉运算困扰许久；回过头一想，不管什么输入，干脆都用科学计数法存就好了，遂切。</p>
<p>​        <strong>Simple is beautiful.</strong> 写项目时，笔者也在不断删改：</p>
<ul>
<li>自学了简单的正则表达式用法，代替了原有冗长缓慢的条件语句判断。</li>
<li>使用重构运算符写法，而非函数。</li>
<li>利用构造器对输入数据进行归一化，避免了不同结构体的交叉运算。</li>
<li>对于实际需求选择了合适的算法，而非小题大做。</li>
<li>……</li>
</ul>
<p>​        笔者经过本次项目，也对WSL环境下使用命令行进行编译、调试、运行等操作有了一定的熟悉，在使用一些陌生语法时对输入输出、结构体、字符串处理有了更深的理解。</p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>CS205 C/C++ Project03设计报告 C语言矩阵库</title>
    <url>/2022/11/05/CS205_%E9%A1%B9%E7%9B%AE%E8%AE%BE%E8%AE%A1%E6%8A%A5%E5%91%8A_Matrix_Library/</url>
    <content><![CDATA[<h2 id="Part-0-团队成员"><a href="#Part-0-团队成员" class="headerlink" title="Part 0. 团队成员"></a>Part 0. <del>团队</del>成员</h2><div class="table-container">
<table>
<thead>
<tr>
<th>姓名</th>
<th>学号</th>
<th><del>贡献率</del></th>
</tr>
</thead>
<tbody>
<tr>
<td>咕桃</td>
<td>-</td>
<td><del>100%</del></td>
</tr>
</tbody>
</table>
</div>
<h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CS205_Project03</span><br><span class="line">│  CMakeLists.txt</span><br><span class="line">│  README.md</span><br><span class="line">│</span><br><span class="line">├─doc</span><br><span class="line">│  Report.pdf</span><br><span class="line">│</span><br><span class="line">├─inc</span><br><span class="line">│  MatrixC.h</span><br><span class="line">│</span><br><span class="line">└─src</span><br><span class="line">   Benchmark.c</span><br><span class="line">   MatrixC.c</span><br></pre></td></tr></table></figure>
<h2 id="Part-1-Analysis"><a href="#Part-1-Analysis" class="headerlink" title="Part 1 - Analysis"></a>Part 1 - Analysis</h2><h3 id="题目重述-amp-主要思路"><a href="#题目重述-amp-主要思路" class="headerlink" title="题目重述&amp;主要思路"></a>题目重述&amp;主要思路</h3><p>本题目要求<strong>使用C语言</strong>实现一个矩阵操作库，利用结构体存储矩阵，支持<code>float</code>矩阵的函数和基本运算，并对便捷性、鲁棒性、安全性、可扩展性有较高要求。</p>
<p>根据题目描述，题目要求的矩阵运算库需要支持的主要功能为：</p>
<ol>
<li>仅使用C语言，使用CMake管理项目</li>
<li>结构体存储<code>float</code>类型矩阵</li>
<li>矩阵操作：创建、删除、复制</li>
<li>矩阵运算：矩阵加减乘，矩阵与标量四则运算，查询最值</li>
<li>矩阵函数(安全性、易用性&gt;效率)</li>
</ol>
<p>本项目除完成上述全部基础要求外，支持以下内容：</p>
<ol>
<li><strong>安全、用户友好</strong>：使用指针操作时的安全性检查，严格明确的报错和警告判定，精确、安全的内存申请与释放。</li>
<li><strong>创建函数</strong>：空矩阵、单位阵、对角阵、全赋值矩阵、随机矩阵、由数组创建矩阵、由字符串创建、由文件创建、由矩阵创建、提取子矩阵…较为丰富，可以覆盖相当程度的创建矩阵需求。</li>
<li><strong>矩阵操作</strong>：安全删除矩阵并释放内存、值复制/引用复制、交换矩阵、矩阵变形、矩阵按行/列拼接、元素修改…安全易用。</li>
<li><strong>矩阵查询</strong>：容量查询、自定义“最值”查询、单点查询、矩阵求秩、矩阵比较…安全易用易拓展。</li>
<li><strong>逐元素运算</strong>：对单个矩阵进行一元运算、对两个矩阵进行二元运算、对单个矩阵与标量进行二元运算。极易拓展，支持自定义运算函数或使用库内置函数。</li>
<li><strong>矩阵运算</strong>：矩阵加减乘、矩阵快速幂、求行列式…有两类实现：将结果存储于传入参数矩阵、将结果作为返回参数，前者节省内存，后者不影响传入矩阵。</li>
<li><strong>常用变换</strong>：矩阵上三角化、高斯消元法矩阵求逆、转置矩阵、截取矩阵…安全易用且对无法计算的情况有强鲁棒性。</li>
<li><strong>文件操作</strong>：从文件创建矩阵、输出结果到文件</li>
<li><strong>项目管理</strong>：使用CMake和GitHub管理项目。</li>
</ol>
<h3 id="模型假设"><a href="#模型假设" class="headerlink" title="模型假设"></a>模型假设</h3><p>项目要求关于应用场景仅给出了数据类型为<code>float</code>的要求，笔者考虑理工科计算所可能使用的数据范围作为本项目支持的数据规模，如下：</p>
<ul>
<li><p>单个元素均为4字节<code>float</code>类型，有效位数默认为6位，数据范围约$-3.4 \cdot 10^{-38}&lt;val&lt;3.4 \cdot 10^{38}$</p>
</li>
<li><p>矩阵行数$row$与列数$col$之积，即矩阵容量满足$size=row*col\leq10^8$</p>
</li>
<li><p>项目对安全性要求&gt;计算效率，因此尽可能使用浅显稳定的算法，细节处有对效率的提升。</p>
</li>
</ul>
<h2 id="Part-2-Code"><a href="#Part-2-Code" class="headerlink" title="Part 2 - Code"></a>Part 2 - Code</h2><h3 id="宏与结构体"><a href="#宏与结构体" class="headerlink" title="宏与结构体"></a>宏与结构体</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> TYPE float</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> float_equal(x, y) ((x-y)&lt;1e-5&amp;&amp;(y-x)&lt;1e-5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MATRIX_MAX_CAPACITY 100000000</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">MatrixC</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">size_t</span> row;</span><br><span class="line">    <span class="type">size_t</span> col;</span><br><span class="line">    TYPE *data;</span><br><span class="line">&#125; Matrix;</span><br></pre></td></tr></table></figure>
<p>本项目中，所有涉及矩阵元素下标的迭代变量均使用标准库常用的<code>size_t</code>类型，提高库在不同平台间的可移植性。</p>
<p>项目默认类型为<code>float</code>，笔者挺想做成类模板一样的可拓展形式，但由于C结构体不能像C++类一样使用模板，因而此处以宏进行丐版替代，有需求时可以调整<code>TYPE</code>，并对一些运算细节做微调就能适用不同数据类型。</p>
<p>经课程提醒，<code>float</code>类型的精度损失常导致<code>==</code>不能按预期判断相等，因此以宏的形式实现了浮点判等，误差在$10^{-5}$以内的数判断为相等。</p>
<p>矩阵容量上限为$10^8$个浮点元素，满足大部分情景的需求。</p>
<p>矩阵元素均存储于浮点指针<code>data</code>所指向的“一维浮点数组”中，data的容量由创建时赋为$row*col$后不作改变，更改方式仅有释放内存后重定向指针，从而避免了正常使用下段错误的发生。</p>
<hr>
<p><strong>在<a href="https://github.com/GuTaoZi/CS205_Project03/blob/master/inc/MatrixC.h">MatrixC.h</a>头文件中，记录了本项目实现的矩阵相关的函数，经整理分为以下若干类：</strong></p>
<h3 id="创建矩阵"><a href="#创建矩阵" class="headerlink" title="创建矩阵"></a>创建矩阵</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Functions For Creating Matrices</span></span><br><span class="line">Matrix *<span class="title function_">create_empty</span><span class="params">(<span class="type">size_t</span> row, <span class="type">size_t</span> col)</span>;<span class="comment">//空矩阵</span></span><br><span class="line"></span><br><span class="line">Matrix *<span class="title function_">create_full</span><span class="params">(<span class="type">size_t</span> row, <span class="type">size_t</span> col, TYPE value)</span>;<span class="comment">//全部赋相同值</span></span><br><span class="line"></span><br><span class="line">Matrix *<span class="title function_">create_from_array</span><span class="params">(TYPE *src, <span class="type">size_t</span> row, <span class="type">size_t</span> col)</span>;<span class="comment">//由数组赋值</span></span><br><span class="line"></span><br><span class="line">Matrix *<span class="title function_">create_from_string</span><span class="params">(<span class="type">char</span> *src, <span class="type">size_t</span> row, <span class="type">size_t</span> col)</span>;<span class="comment">//由字符串赋值</span></span><br><span class="line"></span><br><span class="line">Matrix *<span class="title function_">create_from_file</span><span class="params">(<span class="type">char</span> *f_path, <span class="type">size_t</span> row, <span class="type">size_t</span> col)</span>;<span class="comment">//由文件赋值</span></span><br><span class="line"></span><br><span class="line">Matrix *<span class="title function_">create_copy</span><span class="params">(Matrix *src)</span>;<span class="comment">//创建浅拷贝</span></span><br><span class="line"></span><br><span class="line">Matrix *<span class="title function_">create_identity</span><span class="params">(<span class="type">size_t</span> order)</span>;<span class="comment">//单位阵</span></span><br><span class="line"></span><br><span class="line">Matrix *<span class="title function_">create_diagonal</span><span class="params">(TYPE *src, <span class="type">size_t</span> order)</span>;<span class="comment">//传入数组→对角阵</span></span><br><span class="line"></span><br><span class="line">Matrix *<span class="title function_">create_random</span><span class="params">(<span class="type">size_t</span> row, <span class="type">size_t</span> col)</span>;<span class="comment">//随机阵</span></span><br><span class="line"></span><br><span class="line">Matrix *<span class="title function_">sub_matrix</span><span class="params">(Matrix *src, <span class="type">size_t</span> row_begin, <span class="type">size_t</span> col_begin, <span class="type">size_t</span> row_end, <span class="type">size_t</span> col_end)</span>;<span class="comment">//子矩阵截取</span></span><br></pre></td></tr></table></figure>
<p>命名一目了然，简洁易懂，功能齐全，此处以创建空矩阵为例浅谈安全的实现：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Matrix *<span class="title function_">create_empty</span><span class="params">(<span class="type">size_t</span> row, <span class="type">size_t</span> col)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (row * col == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        print_error(<span class="string">&quot;Illegal matrix size&quot;</span>, <span class="string">&quot;Row and Col should be positive integers.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (row * col &gt; MATRIX_MAX_CAPACITY)</span><br><span class="line">    &#123;</span><br><span class="line">        print_error(<span class="string">&quot;Illegal matrix size&quot;</span>, <span class="string">&quot;The maximum size of matrix is row*col=1e8.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Matrix *new = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Matrix));</span><br><span class="line">    new-&gt;row = row;</span><br><span class="line">    new-&gt;col = col;</span><br><span class="line">    new-&gt;data = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TYPE) * row * col);</span><br><span class="line">    <span class="keyword">return</span> new;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>传入参数为两个<code>size_t</code>类型变量(unsigned)，首先检查尺寸的合法性：$0&lt;row*col\leq10^8$，不对就报错返空(返回的<code>NULL</code>指针在后续的使用中也会严格检查)</li>
<li>使用<code>malloc</code>为新矩阵指针<code>new</code>分配一个<code>Matrix</code>类型的内存，其中包含结构体的两个<code>size_t</code>类型变量，即刻为其赋值。</li>
<li>对分配的一个<code>float *</code>浮点数指针变量申请$row*col$大小的内存。</li>
<li>返回矩阵指针，创建完毕。</li>
</ol>
<p>其他矩阵的创建均有调用该函数，实现简单，并检查了返回<code>NULL</code>等情况，此处不做赘述。</p>
<hr>
<h3 id="矩阵级别操作"><a href="#矩阵级别操作" class="headerlink" title="矩阵级别操作"></a>矩阵级别操作</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Functions For Matrix Operations</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">delete_matrix</span><span class="params">(Matrix **pmat)</span>;<span class="comment">//安全删除</span></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">reshape_matrix</span><span class="params">(Matrix *src, <span class="type">size_t</span> row, <span class="type">size_t</span> col)</span>;<span class="comment">//不变尺寸的矩阵变形</span></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">copy_matrix</span><span class="params">(Matrix *dest, Matrix *src)</span>;<span class="comment">//值复制</span></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">ref_matrix</span><span class="params">(Matrix *dest, Matrix *src)</span>;<span class="comment">//引用复制</span></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">swap_matrix</span><span class="params">(Matrix *first, Matrix *second)</span>;<span class="comment">//交换矩阵</span></span><br><span class="line"></span><br><span class="line">Matrix *<span class="title function_">col_concat</span><span class="params">(Matrix *first, Matrix *second)</span>;<span class="comment">//按列拼接</span></span><br><span class="line"></span><br><span class="line">Matrix *<span class="title function_">row_concat</span><span class="params">(Matrix *first, Matrix *second)</span>;<span class="comment">//按行拼接</span></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">set_value</span><span class="params">(Matrix *pmat, <span class="type">size_t</span> row, <span class="type">size_t</span> col, TYPE value)</span>;<span class="comment">//单点修改</span></span><br></pre></td></tr></table></figure>
<p>上述函数分别为：删除、变形、浅拷贝、深拷贝、交换、按列拼接、按行拼接。</p>
<p>原本前五个是无返回函数，笔者觉得返回值不能就这么浪费了，因此传回布尔型，代表该操作是否成功进行(若发生异常会输出报错/警告信息，并返回false)。</p>
<p>以下是部分函数的展开讲解（其他的实现原理简单且类似，故不做赘述）：</p>
<h3 id="删除矩阵"><a href="#删除矩阵" class="headerlink" title="删除矩阵"></a>删除矩阵</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">delete_matrix</span><span class="params">(Matrix **pmat)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (pmat == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        print_error(<span class="string">&quot;NULL pointer exception&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;The address of the pointer to the matrix is null, delete process interrupted.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((*pmat) == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        print_error(<span class="string">&quot;NULL pointer exception&quot;</span>, <span class="string">&quot;The pointer to the matrix is null, delete process interrupted.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>((*pmat)-&gt;data);</span><br><span class="line">    <span class="built_in">free</span>(*pmat);</span><br><span class="line">    *pmat = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>矩阵的删除函数步骤如下：</p>
<ol>
<li>判断空指针并报错</li>
<li>释放结构体内浮点指针所指内存</li>
<li>释放结构体内存</li>
<li>置空指针</li>
</ol>
<p>本项目将指针指针(指针的地址)作为传入参数，这是由于C在处理空指针时有良好的鲁棒性(如<code>free(NULL)</code>将不进行操作)，在释放结构体内存后将指向结构体的<strong>指针本身置空</strong>，可以避免<strong>对野指针进行操作</strong>的高危行为。</p>
<p>然而将指针本身作为传入参数进行值传递后，在函数内将传入参数置空并不耽误原指针还是野指针，C也没有引用，故传入指针的指针对原指针进行置空。</p>
<p>值得一提，虽然C对于“释放空指针的内存”有所提防，但本函数依然对传入指针为空的情况做了报错，让用户清楚地知道可能进行了<strong>释放空指针所指内存</strong>这样的行为。</p>
<h3 id="复制矩阵"><a href="#复制矩阵" class="headerlink" title="复制矩阵"></a>复制矩阵</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">copy_matrix</span><span class="params">(Matrix **dest, Matrix *src)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (src == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        print_error(<span class="string">&quot;NULL pointer exception&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;The pointer to source matrix is null, copy process interrupted.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (*dest == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        *dest = create_copy(src);</span><br><span class="line">        <span class="keyword">if</span> (*dest == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        print_warning(<span class="string">&quot;Copy into null matrix&quot;</span>,</span><br><span class="line">                      <span class="string">&quot;The pointer to destination matrix is null, the pointer will point to a copy matrix of source matrix.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (((*dest)-&gt;row != src-&gt;row) || ((*dest)-&gt;col != src-&gt;col))</span><br><span class="line">        &#123;</span><br><span class="line">            print_warning(<span class="string">&quot;Copy into matrix of different sizes&quot;</span>,</span><br><span class="line">                          <span class="string">&quot;The sizes of two matrices are different, the data of destination matrix will be covered by source matrix.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        delete_matrix(dest);</span><br><span class="line">        *dest = create_copy(src);</span><br><span class="line">        <span class="keyword">if</span> (*dest == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">ref_matrix</span><span class="params">(Matrix **dest, Matrix *src)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (src == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        print_error(<span class="string">&quot;NULL pointer exception&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;The pointer to source matrix is null, copy process interrupted.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(*dest!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        delete_matrix(dest);</span><br><span class="line">    &#125;</span><br><span class="line">    *dest = src;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>两种复制的实现都很简洁安全：若目标矩阵为空则会为其申请空间并复制，若目标矩阵与源矩阵尺寸不同会警告用户复制将覆盖目标矩阵原有信息，且对可能出现的错误进行报错处理。</p>
<h3 id="拼接矩阵"><a href="#拼接矩阵" class="headerlink" title="拼接矩阵"></a>拼接矩阵</h3><p>由于高斯消元求逆过程用到了按行拼接，此处对其进行简单讲解：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Matrix *<span class="title function_">row_concat</span><span class="params">(Matrix *first, Matrix *second)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (first == <span class="literal">NULL</span> || second == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        print_error(<span class="string">&quot;NULL pointer exception&quot;</span>, <span class="string">&quot;The pointer to source matrix is null, concat process interrupted.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (first-&gt;row != second-&gt;row)</span><br><span class="line">    &#123;</span><br><span class="line">        print_error(<span class="string">&quot;Illegal matrix shape&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;The number of row of source matrices should be the same, concat process interrupted.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Matrix *new = create_empty(first-&gt;row, first-&gt;col + second-&gt;col);</span><br><span class="line">    <span class="keyword">if</span> (new == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; first-&gt;row; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">0</span>; j &lt; first-&gt;col; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            new-&gt;data[i * new-&gt;col + j] = first-&gt;data[i * first-&gt;col + j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">0</span>; j &lt; second-&gt;col; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            new-&gt;data[i * new-&gt;col + j + first-&gt;col] = second-&gt;data[i * second-&gt;col + j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> new;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>按行拼接的步骤如下：</p>
<ol>
<li>检查空指针，检查两个矩阵行数是否相等并报错</li>
<li>新建合并大小的空矩阵指针<code>new</code>，检查大小是否在合法范围内</li>
<li>逐行将两个矩阵的值传入<code>new</code></li>
<li>返回<code>new</code></li>
</ol>
<p>拼接原理即按行赋值，左边<code>first</code>，右边<code>second</code>。容易忽视的漏洞是拼接前两个大小合适的矩阵可能在拼接后超限，此时不应对空指针<code>new</code>进行赋值，而应报错。</p>
<hr>
<h3 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Functions For Querying In Matrices</span></span><br><span class="line"><span class="type">size_t</span> <span class="title function_">size_of</span><span class="params">(Matrix *pmat)</span>;<span class="comment">//查询容量</span></span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> <span class="title function_">rank</span><span class="params">(Matrix *pmat)</span>;<span class="comment">//矩阵求秩</span></span><br><span class="line"></span><br><span class="line">TYPE <span class="title function_">get_value</span><span class="params">(Matrix *src, <span class="type">size_t</span> row, <span class="type">size_t</span> col)</span>;<span class="comment">//单点查询</span></span><br><span class="line"></span><br><span class="line">TYPE <span class="title function_">max</span><span class="params">(Matrix *src)</span>;<span class="comment">//矩阵最大值</span></span><br><span class="line"></span><br><span class="line">TYPE <span class="title function_">min</span><span class="params">(Matrix *src)</span>;<span class="comment">//矩阵最小值</span></span><br><span class="line"></span><br><span class="line">TYPE <span class="title function_">extreme_value</span><span class="params">(Matrix *src, <span class="type">bool</span> (*fun)(TYPE, TYPE))</span>;<span class="comment">//矩阵自定义“最值”</span></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">equal</span><span class="params">(Matrix *first, Matrix *second)</span>;<span class="comment">//矩阵判等</span></span><br></pre></td></tr></table></figure>
<p>矩阵求秩主要依靠上三角化实现，矩阵的秩即上三角化后非零行的数量，详见下文上三角化函数。</p>
<h3 id="自定义最值"><a href="#自定义最值" class="headerlink" title="自定义最值"></a>自定义最值</h3><p>求最值的思路是遍历<code>data</code>数组并逐个比较，方法朴素但安全，易于维护，下面简述可扩展的<code>extreme_value</code>函数：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">TYPE <span class="title function_">extreme_value</span><span class="params">(Matrix *src, <span class="type">bool</span> (*cmp)(TYPE, TYPE))</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (src == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        print_error(<span class="string">&quot;NULL pointer exception&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;The pointer to source matrix is null, return NaN.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> nanf(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    TYPE ans = src-&gt;data[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">1</span>; i &lt; size_of(src); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (cmp(src-&gt;data[i], ans))</span><br><span class="line">        &#123;</span><br><span class="line">            ans = src-&gt;data[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>矩阵自定义最值的步骤如下：</p>
<ol>
<li>判断空指针并报错，返回<code>NaN</code></li>
<li>根据<code>cmp</code>函数逐个比较矩阵元素</li>
<li>返回答案</li>
</ol>
<p>此处将函数指针作为第三参数传入，实现了“比较”过程的自定义可拓展，对于<code>TYPE</code>类型的数据，比较规则可以通过自定义<code>cmp</code>函数进行调整，灵感来自于<code>sort</code>的自定义比较函数。</p>
<hr>
<h3 id="自定义矩阵运算"><a href="#自定义矩阵运算" class="headerlink" title="自定义矩阵运算"></a>自定义矩阵运算</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Functions For Customized Calculation</span></span><br><span class="line">TYPE <span class="title function_">plus</span><span class="params">(TYPE first, TYPE second)</span>;</span><br><span class="line"></span><br><span class="line">TYPE <span class="title function_">minus</span><span class="params">(TYPE first, TYPE second)</span>;</span><br><span class="line"></span><br><span class="line">TYPE <span class="title function_">mul</span><span class="params">(TYPE first, TYPE second)</span>;</span><br><span class="line"></span><br><span class="line">TYPE <span class="title function_">divide</span><span class="params">(TYPE first, TYPE second)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Functions For Matrix Calculation</span></span><br><span class="line">Matrix *<span class="title function_">unary_calc</span><span class="params">(Matrix *pmat, TYPE(*fun)(TYPE))</span>;</span><br><span class="line"></span><br><span class="line">Matrix *<span class="title function_">binary_calc</span><span class="params">(Matrix *first, Matrix *second, TYPE (*fun)(TYPE, TYPE))</span>;</span><br><span class="line"></span><br><span class="line">Matrix *<span class="title function_">scalar_calc</span><span class="params">(Matrix *pmat, TYPE scalar, TYPE(*fun)(TYPE, TYPE))</span>;</span><br></pre></td></tr></table></figure>
<p>考虑到我们经常要对矩阵进行逐元素的运算，例如矩阵统一求相反数是逐元素一元运算，矩阵加减法是逐元素二元运算…为了减轻用户为了不同的运算而自行实现多个函数的压力，本项目将<strong>一元、二元、矩阵与标量的运算</strong>整合为<strong>拓展性极强的函数</strong>，用户只需要自定义好运算函数，传入即可对矩阵进行<strong>逐元素的自定义运算</strong>。例如用户要对矩阵中的每个元素求正弦，那么只需要传入<code>Math.h</code>内置的<code>sinf(float x)</code>即可：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Matrix *sin_matrix = unary_calc(Matrix *pmat, sinf);</span><br></pre></td></tr></table></figure>
<p>代码部分选择二元运算进行展示：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Matrix *<span class="title function_">binary_calc</span><span class="params">(Matrix *first, Matrix *second, TYPE (*fun)(TYPE, TYPE))</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (first == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        print_error(<span class="string">&quot;NULL pointer exception&quot;</span>, <span class="string">&quot;The pointer to the first matrix is null, calculation interrupted.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (second == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        print_error(<span class="string">&quot;NULL pointer exception&quot;</span>, <span class="string">&quot;The pointer to the second matrix is null, calculation interrupted.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (first-&gt;row != second-&gt;row || first-&gt;col != second-&gt;col)</span><br><span class="line">    &#123;</span><br><span class="line">        print_error(<span class="string">&quot;Illegal matrix shape&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;The shape of two matrices are different, calculation process interrupted.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Matrix *new = create_copy(first);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; size_of(new); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        new-&gt;data[i] = fun(new-&gt;data[i], second-&gt;data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> new;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>步骤也很简单，检查报错→申请空间→代入运算→存入结果，简洁高效易懂。</p>
<p>也因此，题目要求的四种标量运算只用向<code>scalar_calc</code>传入<code>plus</code>, <code>minus</code>, <code>mul</code>, <code>divide</code>四个自定义函数即可。</p>
<hr>
<h3 id="矩阵计算"><a href="#矩阵计算" class="headerlink" title="矩阵计算"></a>矩阵计算</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Functions For Matrix Calculation</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">add_by</span><span class="params">(Matrix *augend, Matrix *addend)</span>;</span><br><span class="line"></span><br><span class="line">Matrix *<span class="title function_">matrix_add</span><span class="params">(Matrix *augend, Matrix *addend)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">subtract_by</span><span class="params">(Matrix *minuend, Matrix *subtrahend)</span>;</span><br><span class="line"></span><br><span class="line">Matrix *<span class="title function_">matrix_subtract</span><span class="params">(Matrix *minuend, Matrix *subtrahend)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">multiply_by</span><span class="params">(Matrix **multiplicand, Matrix *multiplier)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">multiply_to</span><span class="params">(Matrix *multiplicand, Matrix **multiplier)</span>;</span><br><span class="line"></span><br><span class="line">Matrix *<span class="title function_">matrix_multiply</span><span class="params">(Matrix *multiplicand, Matrix *multiplier)</span>;</span><br><span class="line"></span><br><span class="line">Matrix *<span class="title function_">matrix_pow</span><span class="params">(Matrix *base, <span class="type">int</span> power)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">add_scalar</span><span class="params">(Matrix *pmat, TYPE scalar)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">subtract_scalar</span><span class="params">(Matrix *pmat, TYPE scalar)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">multiply_scalar</span><span class="params">(Matrix *pmat, TYPE scalar)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">divide_scalar</span><span class="params">(Matrix *pmat, TYPE scalar)</span>;</span><br></pre></td></tr></table></figure>
<p>矩阵运算的实际应用场景中经常会有类似<strong>自增</strong>的需求(将结果保存在两个矩阵中的其中一个)，尤其体现在矩阵的<strong>左乘和右乘</strong>等方面。</p>
<p>本项目除了实现将结果作为新结构体返回的函数，也实现了将结果存入两个矩阵之一的函数，返回值为布尔型的函数会将结果存入传入的矩阵中。布尔型的返回值代表操作是否成功，若失败则返回<code>false</code>并报错，不对传入矩阵做任何操作。</p>
<p>以下是矩阵乘法的实现：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Matrix *<span class="title function_">matrix_multiply</span><span class="params">(Matrix *multiplicand, Matrix *multiplier)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (multiplicand == <span class="literal">NULL</span> || multiplier == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        print_error(<span class="string">&quot;NULL pointer exception&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;The pointers to multiplicand and multiplier matrix are null, multiplication process interrupted.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (multiplicand-&gt;col != multiplier-&gt;row)</span><br><span class="line">    &#123;</span><br><span class="line">        print_error(<span class="string">&quot;Illegal matrix shape&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;The col number of multiplicand matrix should equal to row number of multiplier matrix.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Matrix *new = create_full(multiplicand-&gt;row, multiplier-&gt;col, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">1</span>; i &lt;= multiplicand-&gt;row; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> k = <span class="number">1</span>; k &lt;= multiplicand-&gt;col; k++)</span><br><span class="line">        &#123;</span><br><span class="line">            TYPE t = multiplicand-&gt;data[(i - <span class="number">1</span>) * multiplicand-&gt;col + k - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">1</span>; j &lt;= multiplier-&gt;col; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                new-&gt;data[(i - <span class="number">1</span>) * new-&gt;col + j - <span class="number">1</span>] += t * multiplier-&gt;data[(k - <span class="number">1</span>) * multiplier-&gt;col + j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> new;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>除了<del>已经敲到不能再熟的</del>报错环节，由于项目对效率要求并不高，因此矩阵乘法依然使用的是$O(n^3)$的传统矩阵乘法，但使用了$ikj$的三层循环顺序，可以较好地提高内存访问的连续性，具体原理参考自<a href="https://zhuanlan.zhihu.com/p/146250334">知乎用户@寨森Lambda-CDM的文章</a>。下图是摘自文章的各个循环顺序的内存访问跳跃数列表，作为参考：</p>
<p><img src="https://s2.loli.net/2022/10/29/ISBDZ7X1WxdnrPi.png" alt="不同循环顺序的条约次数"></p>
<h3 id="矩阵快速幂"><a href="#矩阵快速幂" class="headerlink" title="矩阵快速幂"></a>矩阵快速幂</h3><p>喜闻乐见的快速幂环节，具体原理为将指数二进制表示后，通过倍乘<code>base</code>矩阵将乘法次数优化到<code>log(power)</code>次，对于$O(n^3)$的矩阵乘法而言优化力度较为客观，代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Matrix *<span class="title function_">matrix_pow</span><span class="params">(Matrix *base, <span class="type">int</span> power)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (base == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        print_error(<span class="string">&quot;NULL pointer exception&quot;</span>, <span class="string">&quot;The pointer to base matrix is null, power process interrupted.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (power == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> create_copy(base);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (base-&gt;row != base-&gt;col)</span><br><span class="line">    &#123;</span><br><span class="line">        print_error(<span class="string">&quot;Illegal matrix shape&quot;</span>, <span class="string">&quot;The base matrix should be square matrix.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (power == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> create_identity(base-&gt;row);</span><br><span class="line">    &#125;</span><br><span class="line">    Matrix *new;</span><br><span class="line">    <span class="keyword">if</span> (power &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        new = create_copy(inverse(base));</span><br><span class="line">        <span class="keyword">if</span> (new == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            print_error(<span class="string">&quot;NULL pointer exception&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;The source matrix has no inverse, negative power calculation interrupted.&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        power = -power;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        new = create_copy(base);</span><br><span class="line">    &#125;</span><br><span class="line">    Matrix *Base = create_copy(base);</span><br><span class="line">    power--;<span class="comment">//因为new本来就是base一次方了所以-1</span></span><br><span class="line">    <span class="keyword">while</span> (power)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (power &amp; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            multiply_by(&amp;new, Base);</span><br><span class="line">        &#125;</span><br><span class="line">        multiply_by(&amp;Base, Base);</span><br><span class="line">        power &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> new;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实际上，矩阵的幂运算在正整数之外并没有定义，本项目中为了便利，将矩阵的幂的定义进行拓展：</p>
<p>若矩阵为方阵，则其0次幂为单位阵；</p>
<p>若矩阵为方阵且可逆，则其负数次幂为其逆的对应正数次幂。</p>
<hr>
<h3 id="矩阵变换"><a href="#矩阵变换" class="headerlink" title="矩阵变换"></a>矩阵变换</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Functions For Matrix Transformations</span></span><br><span class="line">TYPE <span class="title function_">determinant</span><span class="params">(Matrix *pmat)</span>;</span><br><span class="line"></span><br><span class="line">Matrix *<span class="title function_">inverse</span><span class="params">(Matrix *pmat)</span>;</span><br><span class="line"></span><br><span class="line">Matrix *<span class="title function_">transpose</span><span class="params">(Matrix *pmat)</span>;</span><br><span class="line"></span><br><span class="line">Matrix *<span class="title function_">Uptriangular</span><span class="params">(Matrix *pmat)</span>;</span><br></pre></td></tr></table></figure>
<p>本节包含矩阵专属的一些常用函数：求行列式、求逆、转置、上三角化，求行列式和求逆均依赖上三角化进行。</p>
<h3 id="矩阵转置"><a href="#矩阵转置" class="headerlink" title="矩阵转置"></a>矩阵转置</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Matrix *<span class="title function_">transpose</span><span class="params">(Matrix *pmat)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (pmat == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        print_error(<span class="string">&quot;NULL pointer exception&quot;</span>, <span class="string">&quot;The pointer to source matrix is null, transpose process interrupted.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Matrix *new = create_empty(pmat-&gt;col, pmat-&gt;row);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; pmat-&gt;row; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">0</span>; j &lt; pmat-&gt;col; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            *(new-&gt;data + j * new-&gt;col + i) = *(pmat-&gt;data + i * pmat-&gt;col + j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> new;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>行列交换即可。</p>
<h3 id="上三角化"><a href="#上三角化" class="headerlink" title="上三角化"></a>上三角化</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Matrix *<span class="title function_">Uptriangular</span><span class="params">(Matrix *pmat)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (pmat == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        print_error(<span class="string">&quot;NULL pointer exception&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;The pointer to source matrix is null, uptriangular process interrupted.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Matrix *new = create_copy(pmat);</span><br><span class="line">    <span class="type">size_t</span> lim = new-&gt;row &lt; new-&gt;col ? new-&gt;row : new-&gt;col;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; lim; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (float_equal(new-&gt;data[i * new-&gt;col + i], <span class="number">0.0f</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">size_t</span> j = i + <span class="number">1</span>; j &lt; new-&gt;row; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!float_equal(new-&gt;data[j * new-&gt;col + i], <span class="number">0.0f</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">size_t</span> k = <span class="number">0</span>; k &lt; new-&gt;col; k++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        TYPE t = new-&gt;data[i * new-&gt;col + k];</span><br><span class="line">                        new-&gt;data[i * new-&gt;col + k] = new-&gt;data[j * new-&gt;col + k];</span><br><span class="line">                        new-&gt;data[j * new-&gt;col + k] = t;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (float_equal(new-&gt;data[i * new-&gt;col + i], <span class="number">0.0f</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> j = i + <span class="number">1</span>; j &lt; new-&gt;row; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            TYPE t = new-&gt;data[j * new-&gt;col + i] / new-&gt;data[i * new-&gt;col + i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">size_t</span> k = <span class="number">0</span>; k &lt; new-&gt;col; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                new-&gt;data[j * new-&gt;col + k] -= new-&gt;data[i * new-&gt;col + k] * t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Matrix *res = create_full(new-&gt;row, new-&gt;col, <span class="number">0.0f</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>, it = <span class="number">0</span>; i &lt; new-&gt;row; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">bool</span> emp = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">0</span>; j &lt; new-&gt;col; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!(float_equal(new-&gt;data[i * new-&gt;col + j], <span class="number">0.0f</span>)))</span><br><span class="line">            &#123;</span><br><span class="line">                res-&gt;data[it * res-&gt;col + j] = new-&gt;data[i * new-&gt;col + j];</span><br><span class="line">                emp = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        it += emp ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    delete_matrix(&amp;new);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上三角化是线性代数第一课就会讲的内容，也是线性代数大部分变换的基础，实现后求逆、求行列式等操作则迎刃而解。</p>
<p>上三角化的主要步骤为：</p>
<ol>
<li><p>检查报错，记录行数与列数中较小的一个作为循环上界</p>
</li>
<li><p>按列进行，对于矩阵$A$的第$i$列：</p>
<ul>
<li><p>若$A[i][i]$非零，则将其下方的所有行减去其倍数，直到$A[i][i]$下方所有元素消为0</p>
</li>
<li><p>若$A[i][i]=0$，则向下寻找第一个$j&gt;i$使得$A[j][i]≠0$，交换第$i$行和第$j$行</p>
</li>
<li>若到达最后一行仍没有找到，则说明该列主元缺失，$rank—$</li>
</ul>
</li>
<li><p>减除完毕后，部分全零行会存在矩阵中，此时将全零行下沉到矩阵最下方，得到完整的上三角矩阵$U$。</p>
</li>
<li>释放临时矩阵，返回结果</li>
</ol>
<h3 id="矩阵求秩"><a href="#矩阵求秩" class="headerlink" title="矩阵求秩"></a>矩阵求秩</h3><p>矩阵的秩经过基础行变换不会变化，因此我们只需统计上三角化后的矩阵的非零行数量即可。</p>
<h3 id="矩阵求行列式"><a href="#矩阵求行列式" class="headerlink" title="矩阵求行列式"></a>矩阵求行列式</h3><p>对矩阵进行除了换行以外的初等行变换不会影响矩阵的行列式，换行操作会使行列式变为相反数，因此在上三角化的过程中，我们只需记录换行的次数，并对上三角阵$U$的对角元素进行累乘运算即可得到矩阵的行列式。</p>
<p>代码较上三角化仅添加了几行(换行时记录符号，最后累乘)，此处不费篇幅展示。</p>
<h3 id="矩阵求逆"><a href="#矩阵求逆" class="headerlink" title="矩阵求逆"></a>矩阵求逆</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Matrix *<span class="title function_">inverse</span><span class="params">(Matrix *pmat)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (pmat == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        print_error(<span class="string">&quot;NULL pointer exception&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;The pointer to source matrix is null, inverse calculation interrupted.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (pmat-&gt;row != pmat-&gt;col)</span><br><span class="line">    &#123;</span><br><span class="line">        print_error(<span class="string">&quot;Illegal matrix shape&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;The matrix should be square to have inverse, inverse calculation interrupted.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Matrix *new = row_concat(pmat, create_identity(pmat-&gt;row));</span><br><span class="line">    <span class="type">size_t</span> row = pmat-&gt;row;</span><br><span class="line">    <span class="type">size_t</span> col = row * <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; row; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (float_equal(new-&gt;data[i * col + i], <span class="number">0.0f</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">size_t</span> j = i + <span class="number">1</span>; j &lt; row; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!float_equal(new-&gt;data[j * col + i], <span class="number">0.0f</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">size_t</span> k = <span class="number">0</span>; k &lt; col; k++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        TYPE t = new-&gt;data[i * col + k];</span><br><span class="line">                        new-&gt;data[i * col + k] = new-&gt;data[j * col + k];</span><br><span class="line">                        new-&gt;data[j * col + k] = t;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (float_equal(new-&gt;data[i * col + i], <span class="number">0.0f</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            print_error(<span class="string">&quot;Inverse doesn&#x27;t exist&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;The rank of source matrix is not full, inverse calculation interrupted.&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> j = i + <span class="number">1</span>; j &lt; row; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            TYPE t = new-&gt;data[j * col + i] / new-&gt;data[i * col + i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">size_t</span> k = <span class="number">0</span>; k &lt; col; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                new-&gt;data[j * col + k] -= new-&gt;data[i * col + k] * t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; row; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        TYPE u = new-&gt;data[i * col + i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            TYPE v = new-&gt;data[j * col + i] / u;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">size_t</span> k = i; k &lt; col; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                new-&gt;data[j * col + k] -= new-&gt;data[i * col + k] * v;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; row; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        TYPE t = new-&gt;data[i * col + i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> j = row; j &lt; col; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            new-&gt;data[i * new-&gt;col + j] /= t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sub_matrix(new, <span class="number">1</span>, pmat-&gt;col + <span class="number">1</span>, new-&gt;row, new-&gt;col);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>完成了上三角化，我们可以用$Gauss\ Jordan\ Elimination$进行矩阵求逆：</p>
<ol>
<li><p>检查报错，记录行数与列数中较小的一个作为循环上界</p>
</li>
<li><p>在原矩阵的右侧拼合一个同阶单位矩阵，与原矩阵进行同样的行变换</p>
</li>
<li><p>按列进行，对于矩阵$A$的第$i$列：</p>
<ul>
<li><p>若$A[i][i]$非零，则将其下方的所有行减去其倍数，直到$A[i][i]$下方所有元素消为0</p>
</li>
<li><p>若$A[i][i]=0$，则向下寻找第一个$j&gt;i$使得$A[j][i]≠0$，交换第$i$行和第$j$行</p>
</li>
<li>若到达最后一行仍没有找到，则说明该列主元缺失，矩阵不满秩，不存在逆，<strong>返回空指针</strong></li>
</ul>
</li>
<li><p>减除完毕后，有逆的矩阵不存在全零行，得到上三角矩阵$U$</p>
</li>
<li><p>按列反向进行，对于矩阵$A$的第$i$列，将$A[i][i]$上方的所有行减去其倍数直到消为0</p>
</li>
<li><p>上一步完成后，拼合矩阵的左侧为对角阵，对于每一行除以其主元$A[i][i]$即可</p>
</li>
<li>利用<code>sub_matrix</code>函数截取起初拼合在右侧的单位矩阵，此时经过行变换已经变成了矩阵的逆</li>
<li>返回结果</li>
</ol>
<hr>
<h3 id="报错与警告"><a href="#报错与警告" class="headerlink" title="报错与警告"></a>报错与警告</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Functions For Debugging, Error &amp; Warning</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_matrix</span><span class="params">(Matrix *pmat, <span class="type">int</span> precision)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_error</span><span class="params">(<span class="type">char</span> *err_type, <span class="type">char</span> *err_info)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_warning</span><span class="params">(<span class="type">char</span> *w_type, <span class="type">char</span> *w_info)</span>;</span><br></pre></td></tr></table></figure>
<p>本项目中，参数列表带有矩阵的函数均有报错/警告语句，为了综合报错和警告而非排布<code>printf</code>语句，本项目使用两个函数进行规范化报错和警告，分为类型和具体信息两部分，内容详细具体。</p>
<h3 id="输出矩阵"><a href="#输出矩阵" class="headerlink" title="输出矩阵"></a>输出矩阵</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">print_matrix</span><span class="params">(Matrix *pmat, <span class="type">int</span> precision)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (pmat == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        print_error(<span class="string">&quot;NULL pointer exception&quot;</span>, <span class="string">&quot;The pointer to source matrix is null, print process interrupted.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (precision &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        print_error(<span class="string">&quot;Illegal precision&quot;</span>, <span class="string">&quot;Precision should be non-negative, print process interrupted.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (precision &gt; <span class="number">6</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        print_warning(<span class="string">&quot;Precision too large&quot;</span>, <span class="string">&quot;Float numbers are accurate to at most the 6th decimal place.&quot;</span>);</span><br><span class="line">        precision = <span class="number">6</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; pmat-&gt;row; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">0</span>; j &lt; pmat-&gt;col; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (float_equal(pmat-&gt;data[i * pmat-&gt;col + j], <span class="number">0.0f</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                pmat-&gt;data[i * pmat-&gt;col + j] = <span class="number">0.0f</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%.*f\t&quot;</span>, precision, pmat-&gt;data[i * pmat-&gt;col + j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>考虑到用户可能并不是每次都想输出小数点后6位数字，继承前两次project优良传统的笔者给输出函数加了精度参数，如果只是整数级别的运算就没必要显示小数点后了嘛。</p>
<p>不过就算把<code>precision</code>设置为114514，囿于<code>float</code>型的精度也只能精确到6位以内，因此程序在接收到高于6的精度要求后会抛个警告并坚持设置精度为6。</p>
<p>输出的部分也是朴素安全，在调试时笔者注意到一个细节：有时候会输出<code>-0.0</code>这样的数据，看上去很怪，这是因为没有显示完全一个很接近0的负数，所以采用了<code>float_equal</code>进行处理，顺便把原矩阵的值也修改为常规的<code>0.0f</code>。</p>
<h3 id="输出矩阵到文件"><a href="#输出矩阵到文件" class="headerlink" title="输出矩阵到文件"></a>输出矩阵到文件</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">print_matrix_to_file</span><span class="params">(<span class="type">char</span> *filename, Matrix *pmat, <span class="type">int</span> precision)</span></span><br><span class="line">&#123;</span><br><span class="line">    FILE *file = fopen(filename, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (file == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        print_error(<span class="string">&quot;NULL pointer exception&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;The output file is not found, print to file process interrupted.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (pmat == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        print_error(<span class="string">&quot;NULL pointer exception&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;The pointer to source matrix is null, print to file process interrupted.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (precision &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        print_error(<span class="string">&quot;Illegal precision&quot;</span>, <span class="string">&quot;Precision should be non-negative, print to file process interrupted.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (precision &gt; <span class="number">6</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        print_warning(<span class="string">&quot;Precision too large&quot;</span>, <span class="string">&quot;Float numbers are accurate to at most the 6th decimal place.&quot;</span>);</span><br><span class="line">        precision = <span class="number">6</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; pmat-&gt;row; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">0</span>; j &lt; pmat-&gt;col; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (float_equal(pmat-&gt;data[i * pmat-&gt;col + j], <span class="number">0.0f</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                pmat-&gt;data[i * pmat-&gt;col + j] = <span class="number">0.0f</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">fprintf</span>(file, <span class="string">&quot;%.*f\t&quot;</span>, precision, pmat-&gt;data[i * pmat-&gt;col + j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">fprintf</span>(file, <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(file);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于规模较大的矩阵，用户会有将结果输出到指定文件的需求，本项目也进行了实现。</p>
<h2 id="Part-3-Result-amp-Verification"><a href="#Part-3-Result-amp-Verification" class="headerlink" title="Part 3 - Result &amp; Verification"></a>Part 3 - Result &amp; Verification</h2><h3 id="Testcase-1-创建矩阵"><a href="#Testcase-1-创建矩阵" class="headerlink" title="Testcase #1 创建矩阵"></a>Testcase #1 创建矩阵</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Benchmark.c (main function)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Matrix *mat = create_full(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">    print_matrix(mat, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    delete_matrix(&amp;mat);</span><br><span class="line"></span><br><span class="line">    TYPE arr[] = &#123;<span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">2</span>&#125;;</span><br><span class="line">    mat = create_from_array(arr, <span class="number">4</span>, <span class="number">2</span>);</span><br><span class="line">    print_matrix(mat, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    delete_matrix(&amp;mat);</span><br><span class="line"></span><br><span class="line">    mat = create_from_string(<span class="string">&quot;1,1,4;5,1,4&quot;</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">    print_matrix(mat, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    delete_matrix(&amp;mat);</span><br><span class="line"></span><br><span class="line">    Matrix *mat2 = create_copy(mat);</span><br><span class="line">    delete_matrix(&amp;mat);</span><br><span class="line">    print_matrix(mat2, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    delete_matrix(&amp;mat2);</span><br><span class="line"></span><br><span class="line">    mat = create_identity(<span class="number">3</span>);</span><br><span class="line">    print_matrix(mat, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    delete_matrix(&amp;mat);</span><br><span class="line"></span><br><span class="line">    mat= create_random(<span class="number">4</span>,<span class="number">4</span>);</span><br><span class="line">    print_matrix(mat, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    delete_matrix(&amp;mat);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Result: </p>
<p><img src="https://s2.loli.net/2022/10/29/jgWrmOKsMZPNiHv.png" alt="create.png" style="zoom:50%;" /></p>
<hr>
<h3 id="Testcase-2-矩阵级别操作"><a href="#Testcase-2-矩阵级别操作" class="headerlink" title="Testcase #2 矩阵级别操作"></a>Testcase #2 矩阵级别操作</h3><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Benchmark.c (main function)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Matrix *mat = create_full(<span class="number">3</span>, <span class="number">3</span>, <span class="number">1.2</span>);</span><br><span class="line">    print_matrix(mat, <span class="number">1</span>);</span><br><span class="line">    delete_matrix(&amp;mat);</span><br><span class="line">    print_matrix(mat, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Result: </p>
<p><img src="https://s2.loli.net/2022/10/29/KC4NxfWbXqAr9HY.png" alt="delete.png"></p>
<h4 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Benchmark.c (main function)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    TYPE arr[] = &#123;<span class="number">0.1</span>, <span class="number">-0.2</span>, <span class="number">0.3</span>, <span class="number">-0.4</span>&#125;;</span><br><span class="line">    Matrix *mat = create_from_array(arr, <span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">    Matrix *cpy=<span class="literal">NULL</span>;</span><br><span class="line">    Matrix *ref=<span class="literal">NULL</span>;</span><br><span class="line">    copy_matrix(&amp;cpy,mat);</span><br><span class="line">    ref_matrix(&amp;ref,mat);</span><br><span class="line">    set_value(mat,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;copy:\n&quot;</span>);</span><br><span class="line">    print_matrix(cpy,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;reference:\n&quot;</span>);</span><br><span class="line">    print_matrix(ref,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Result:</p>
<p><img src="https://s2.loli.net/2022/10/29/UW7Qe1SyVT62hBX.png" alt="copy.png"></p>
<h4 id="拼接"><a href="#拼接" class="headerlink" title="拼接"></a>拼接</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Benchmark.c (main function)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Matrix *mat = create_from_string(<span class="string">&quot;1,1,2;3,5,8;13,21,34;55,89,144&quot;</span>,<span class="number">4</span>, <span class="number">3</span>);</span><br><span class="line">    Matrix *i3=create_identity(<span class="number">3</span>);</span><br><span class="line">    Matrix *i4=create_identity(<span class="number">4</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;col_concat:\n&quot;</span>);</span><br><span class="line">    print_matrix(col_concat(mat,i3),<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;row_concat:\n&quot;</span>);</span><br><span class="line">    print_matrix(row_concat(i4,mat),<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Result: </p>
<p><img src="https://s2.loli.net/2022/10/29/FNXEbCLoKOWUxgJ.png" alt="concat.png" style="zoom:50%;" /></p>
<hr>
<h3 id="Testcase-3-矩阵查询"><a href="#Testcase-3-矩阵查询" class="headerlink" title="Testcase #3 矩阵查询"></a>Testcase #3 矩阵查询</h3><h4 id="自定义最值-从文件中读取"><a href="#自定义最值-从文件中读取" class="headerlink" title="自定义最值(从文件中读取)"></a>自定义最值(从文件中读取)</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//matfile</span></span><br><span class="line"><span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>;</span><br><span class="line"><span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>;</span><br><span class="line"><span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>;</span><br><span class="line"><span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>;</span><br><span class="line"><span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>,<span class="number">4.4</span>,<span class="number">5.5</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Benchmark.c (customized compare function &amp; main function)</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">mycmp</span><span class="params">(TYPE x,TYPE y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">fabs</span>(x<span class="number">-2.1</span>)&lt;<span class="built_in">fabs</span>(y<span class="number">-2.1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Matrix *mat=create_from_file(<span class="string">&quot;matfile&quot;</span>,<span class="number">5</span>,<span class="number">5</span>);</span><br><span class="line">    print_matrix(mat,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The max value is %.1f\nThe min value is %.1f\n&quot;</span>,max(mat),min(mat));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The value closest to 2.1 is %.1f\n&quot;</span>,extreme_value(mat,mycmp));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Result: </p>
<p><img src="https://s2.loli.net/2022/10/30/qmQKaxO95sT14nC.png" alt="extrema.png" style="zoom: 67%;" /></p>
<hr>
<h3 id="Testcase-4-自定义矩阵运算"><a href="#Testcase-4-自定义矩阵运算" class="headerlink" title="Testcase #4 自定义矩阵运算"></a>Testcase #4 自定义矩阵运算</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Benchmark.c (main function)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Matrix *mat=create_from_file(<span class="string">&quot;matfile&quot;</span>,<span class="number">5</span>,<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;origin mat:\n&quot;</span>);</span><br><span class="line">    print_matrix(mat,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;unary operation mat:\n&quot;</span>);</span><br><span class="line">    Matrix *una=unary_calc(mat,cosf);</span><br><span class="line">    print_matrix(una,<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;binary operation mat:\n&quot;</span>);</span><br><span class="line">    Matrix *bin=binary_calc(mat,una,divide);</span><br><span class="line">    print_matrix(bin,<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;scalar operation mat:\n&quot;</span>);</span><br><span class="line">    Matrix *sca=scalar_calc(mat,<span class="number">6</span>,minus);</span><br><span class="line">    print_matrix(sca,<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Result: </p>
<p><img src="https://s2.loli.net/2022/10/30/eFrIh8cDbTSfOAQ.png" alt="image.png" style="zoom:50%;" /></p>
<hr>
<h3 id="Testcase-5-矩阵计算"><a href="#Testcase-5-矩阵计算" class="headerlink" title="Testcase #5 矩阵计算"></a>Testcase #5 矩阵计算</h3><h4 id="简单运算"><a href="#简单运算" class="headerlink" title="简单运算"></a>简单运算</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Benchmark.c (main function)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    srand(time(<span class="literal">NULL</span>));</span><br><span class="line">    Matrix *A=create_random(<span class="number">3</span>,<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;A:\n&quot;</span>);</span><br><span class="line">    print_matrix(A,<span class="number">2</span>);</span><br><span class="line">    Matrix *B=create_random(<span class="number">3</span>,<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;B:\n&quot;</span>);</span><br><span class="line">    print_matrix(B,<span class="number">2</span>);</span><br><span class="line">    multiply_by(&amp;A,B);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;A=A*B=\n&quot;</span>);</span><br><span class="line">    print_matrix(A,<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;A+B=\n&quot;</span>);</span><br><span class="line">    print_matrix(matrix_add(A,B),<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;A-B=\n&quot;</span>);</span><br><span class="line">    print_matrix(matrix_subtract(A,B),<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Result: </p>
<p><img src="https://s2.loli.net/2022/10/30/Vi9kB5tTDgGz1w8.png" alt="basic_calc.png" style="zoom:50%;" /></p>
<h4 id="矩阵加速斐波那契数列"><a href="#矩阵加速斐波那契数列" class="headerlink" title="矩阵加速斐波那契数列"></a>矩阵加速斐波那契数列</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Benchmark.c (main function)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Matrix *A=create_from_string(<span class="string">&quot;1,1;1,0&quot;</span>,<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">    Matrix *v=create_from_string(<span class="string">&quot;1;1&quot;</span>,<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">size_t</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Matrix *t=matrix_multiply(matrix_pow(A,i),v);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;fib[%d] = %.0f\n&quot;</span>,i,get_value(t,<span class="number">2</span>,<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Result: </p>
<p><img src="https://s2.loli.net/2022/10/30/z9MgQqcWDFhk2HT.png" alt="fib.png" style="zoom:50%;" /></p>
<hr>
<h3 id="Testcase-6-矩阵变换"><a href="#Testcase-6-矩阵变换" class="headerlink" title="Testcase #6 矩阵变换"></a>Testcase #6 矩阵变换</h3><h4 id="上三角化，行列式，逆"><a href="#上三角化，行列式，逆" class="headerlink" title="上三角化，行列式，逆"></a>上三角化，行列式，逆</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Benchmark.c (main function)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Matrix *A=create_random(<span class="number">6</span>,<span class="number">6</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;A:\n&quot;</span>);</span><br><span class="line">    print_matrix(A,<span class="number">2</span>);</span><br><span class="line">    Matrix *U=Uptriangular(A);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;U:\n&quot;</span>);</span><br><span class="line">    print_matrix(U,<span class="number">2</span>);</span><br><span class="line">    Matrix *I=inverse(A);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;A^-1:\n&quot;</span>);</span><br><span class="line">    print_matrix(I,<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;A*(A^-1)=\n&quot;</span>);</span><br><span class="line">    print_matrix(matrix_multiply(A,I),<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;|A| = %f\n&quot;</span>,determinant(A));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Result: </p>
<p><img src="https://s2.loli.net/2022/10/30/rmu34DqKpo7nGB2.png" alt="trans.png" style="zoom:50%;" /></p>
<h4 id="不满秩矩阵"><a href="#不满秩矩阵" class="headerlink" title="不满秩矩阵"></a>不满秩矩阵</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//matfile</span></span><br><span class="line"><span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span></span><br><span class="line"><span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">2</span></span><br><span class="line"><span class="number">3</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span></span><br><span class="line"><span class="number">0</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">4</span></span><br><span class="line"><span class="number">5</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">0</span></span><br><span class="line"><span class="number">0</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">6</span></span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Benchmark.c (main function)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Matrix *not_full_rank_mat=create_from_file(<span class="string">&quot;matfile&quot;</span>,<span class="number">6</span>,<span class="number">6</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Not full rank matrix:\n&quot;</span>);</span><br><span class="line">    print_matrix(not_full_rank_mat,<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;inverse:\n&quot;</span>);</span><br><span class="line">    print_matrix(inverse(not_full_rank_mat),<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;determinant: %.0f\n&quot;</span>,determinant(not_full_rank_mat));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Result: </p>
<p><img src="https://s2.loli.net/2022/10/30/OBfg7usEH9AVkNi.png" alt="image.png" style="zoom:50%;" /></p>
<h4 id="转置与秩"><a href="#转置与秩" class="headerlink" title="转置与秩"></a>转置与秩</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Benchmark.c (main function)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Matrix *A=create_from_file(<span class="string">&quot;matfile&quot;</span>,<span class="number">6</span>,<span class="number">6</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;A:\n&quot;</span>);</span><br><span class="line">    print_matrix(A,<span class="number">0</span>);</span><br><span class="line">    Matrix *T=transpose(A);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;T:\n&quot;</span>);</span><br><span class="line">    print_matrix(T,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The rank of A is: %d\nThe rank of T is: %d\n&quot;</span>,rank(A),rank(T));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Result: </p>
<p><img src="https://s2.loli.net/2022/10/30/RvWqULAaYg1tJQn.png" alt="image.png" style="zoom:50%;" /></p>
<hr>
<h3 id="Testcase-7-鲁棒性测试"><a href="#Testcase-7-鲁棒性测试" class="headerlink" title="Testcase #7 鲁棒性测试"></a>Testcase #7 鲁棒性测试</h3><h4 id="创建矩阵-1"><a href="#创建矩阵-1" class="headerlink" title="创建矩阵"></a>创建矩阵</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Benchmark.c (main function)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//申请不合法空间</span></span><br><span class="line">    Matrix *too_large=create_empty(<span class="number">10000</span>,<span class="number">10001</span>);</span><br><span class="line">    Matrix *too_small=create_empty(<span class="number">0</span>,<span class="number">100</span>);</span><br><span class="line">    <span class="comment">//空数组作为数据源</span></span><br><span class="line">    TYPE *arr=<span class="literal">NULL</span>;</span><br><span class="line">    Matrix *null_src=create_from_array(arr,<span class="number">5</span>,<span class="number">5</span>);</span><br><span class="line">    <span class="comment">//试图拷贝null数组</span></span><br><span class="line">    Matrix *copy_null=create_copy(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">//错误格式的字符串作为数据源</span></span><br><span class="line">    Matrix *wrong_str=create_from_string(<span class="string">&quot;1,2,3;4,5;&quot;</span>,<span class="number">3</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="comment">//不存在的文件作为数据源</span></span><br><span class="line">    Matrix *file_404=create_from_file(<span class="string">&quot;file.404&quot;</span>,<span class="number">3</span>,<span class="number">3</span>);</span><br><span class="line">    <span class="comment">//截取超出原矩阵的子矩阵</span></span><br><span class="line">    Matrix *ori=create_full(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">    Matrix *sub=sub_matrix(ori,<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Result: </p>
<p><img src="https://s2.loli.net/2022/10/30/xsZzMyaATJX7BUF.png" alt="robust_create.png" style="zoom:50%;" /></p>
<p>(*每个函数都内置了空指针报错，后续不作重复展示)</p>
<h4 id="矩阵级别操作-1"><a href="#矩阵级别操作-1" class="headerlink" title="矩阵级别操作"></a>矩阵级别操作</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Benchmark.c (main function)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//二次删除</span></span><br><span class="line">    Matrix *A = create_full(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">    Matrix *B = create_full(<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line">    Matrix *C = create_full(<span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>);</span><br><span class="line">    delete_matrix(&amp;A);</span><br><span class="line">    delete_matrix(&amp;A);</span><br><span class="line">    <span class="comment">// null作为源的拷贝</span></span><br><span class="line">    copy_matrix(&amp;B, A);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;B:\n&quot;</span>);</span><br><span class="line">    print_matrix(B, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//覆盖null的拷贝</span></span><br><span class="line">    copy_matrix(&amp;A, B);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;A:\n&quot;</span>);</span><br><span class="line">    print_matrix(A, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//大小不匹配时的警告</span></span><br><span class="line">    copy_matrix(&amp;A, C);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;A:\n&quot;</span>);</span><br><span class="line">    print_matrix(A,<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//按列拼合两个列数不同的矩阵</span></span><br><span class="line">    Matrix *cat=col_concat(A,B);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Result: </p>
<p><img src="https://s2.loli.net/2022/10/30/r2tpMAf7mnSekV3.png" alt="robust_del_cpy.png"></p>
<h4 id="矩阵运算-修改传入值"><a href="#矩阵运算-修改传入值" class="headerlink" title="矩阵运算(修改传入值)"></a>矩阵运算(修改传入值)</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Benchmark.c (main function)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//被加数为空</span></span><br><span class="line">    Matrix *A=<span class="literal">NULL</span>;</span><br><span class="line">    Matrix *B=create_full(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;A=0+B=\n&quot;</span>);</span><br><span class="line">    add_by(&amp;A,B);</span><br><span class="line">    print_matrix(A,<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//被减数为空</span></span><br><span class="line">    B=<span class="literal">NULL</span>;</span><br><span class="line">    subtract_by(&amp;B,A);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;B=0-A=\n&quot;</span>);</span><br><span class="line">    print_matrix(B,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Result: </p>
<p><img src="https://s2.loli.net/2022/10/30/AMyiL6RSBpVwlnv.png" alt="image.png"></p>
<h4 id="矩阵计算-1"><a href="#矩阵计算-1" class="headerlink" title="矩阵计算"></a>矩阵计算</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Benchmark.c (main function)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Matrix *A = create_full(<span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">    Matrix *B = create_full(<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line">    <span class="comment">//不同形状的矩阵相加</span></span><br><span class="line">    Matrix *C = matrix_add(A, B);</span><br><span class="line">    <span class="comment">//不合法的矩阵相乘</span></span><br><span class="line">    C = matrix_multiply(A, B);</span><br><span class="line">    <span class="comment">//非方阵的矩阵幂</span></span><br><span class="line">    C = matrix_pow(A, <span class="number">2</span>);</span><br><span class="line">    <span class="comment">//逆不存在时的负数幂</span></span><br><span class="line">    C=matrix_pow(B,<span class="number">-2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Result: </p>
<p><img src="https://s2.loli.net/2022/10/30/Jx2N4SXjBUD5lw8.png" alt="robust_calc.png"></p>
<h4 id="矩阵变换-1"><a href="#矩阵变换-1" class="headerlink" title="矩阵变换"></a>矩阵变换</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Benchmark.c (main function)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Matrix *A = create_full(<span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">    Matrix *B = create_full(<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line">    <span class="comment">//非方阵求逆</span></span><br><span class="line">    Matrix *I=inverse(A);</span><br><span class="line">    <span class="comment">//非方阵求行列式</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;detA=%f\n&quot;</span>,determinant(A));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Result: </p>
<p><img src="https://s2.loli.net/2022/10/30/hdIanKWlCuwJDom.png" alt="robust_trans.png"></p>
<h2 id="Part-4-Difficulties-amp-Solutions"><a href="#Part-4-Difficulties-amp-Solutions" class="headerlink" title="Part 4 - Difficulties &amp; Solutions"></a>Part 4 - Difficulties &amp; Solutions</h2><h3 id="1-安全、报错与警告"><a href="#1-安全、报错与警告" class="headerlink" title="1. 安全、报错与警告"></a>1. 安全、报错与警告</h3><p><strong>需求</strong>：由于项目需要实现一个安全的库，不至于用户正常操作导致崩溃，因此对于可能的危险操作要进行检查、报错和处理。</p>
<p><strong>解决方案</strong>：</p>
<p>​        标准库中，一个函数有时会有对应的<code>safe</code>版本，以效率作为代价提高安全性。本项目根据情景需求，将所有函数按<code>safe</code>标准编写，对于每个函数都内置内存管理、指针操作等细节，用户直接调用函数即可。</p>
<p>​        由于C并不能便捷地通过<code>throw catch</code>来捕获错误，本项目中在每个函数中，在进行函数操作前都使用判断语句检查安全性，若有错误则及时返回并报错/警告，报错/警告通过综合的函数实现。同时，丰富的函数接口覆盖了用户对于矩阵操作的需求，可以便利地使用，避免了用户直接对矩阵进行内存管理而可能导致的高危隐患。</p>
<h3 id="2-移植性与拓展性"><a href="#2-移植性与拓展性" class="headerlink" title="2. 移植性与拓展性"></a>2. 移植性与拓展性</h3><p><strong>需求</strong>：理工科在不同操作系统进行矩阵运算的情境下，经常需要对整个矩阵进行一元/二元的各种类型的运算，如果按照传统的方式，对于每一种运算都实现一个函数，则会导致库的冗余重复，调用时也很麻烦。</p>
<p><strong>解决方案</strong>：</p>
<p>​        可移植方面，本项目依据标准库模式使用<code>size_t</code>类型记录下标，既避免了负下标可能导致的段错误，也保证了不同位数操作系统下的一致性。</p>
<p>​        数据类型方面，囿于C语言的限制，本项目以宏丐版代替模板，模拟了类模板的效果，更改<code>TYPE</code>后只需要简单修改细节即可适用于不同类型的数据。</p>
<p>​        矩阵运算方面，本项目实现支持自定义运算的矩阵运算函数，对于用户自定义的任意一元/二元运算，只需要将运算的函数指针作为参数传入库内的函数，则可以对矩阵逐元素进行自定义运算，扩展性良好<del>，不能重载运算符的确让人挺难受的</del>。</p>
<h3 id="3-复杂函数的实现"><a href="#3-复杂函数的实现" class="headerlink" title="3. 复杂函数的实现"></a>3. 复杂函数的实现</h3><p><strong>需求</strong>：求行列式，求秩，求逆这三个问题与上三角化均有绑定关系，但上三角化的实现较为复杂。</p>
<p><strong>解决方案</strong>：回去翻了线性代数教材，手动模拟了几次$Gauss\ Jordan\ Elimination$，然后将模拟的过程在2h的debug后码出来了，前三个问题也迎刃而解，实现这个之后，矩阵的若干种其他分解要实现也很轻松了。</p>
<h2 id="Part-5-Summary"><a href="#Part-5-Summary" class="headerlink" title="Part 5 - Summary"></a>Part 5 - Summary</h2><p>​        感谢您能读到这里，报告为了尽力展示项目全貌略显冗长，下次改正，感谢理解（磕头</p>
<p>​        和前两次project不同，这次笔者先没有直接开写，而是首先观摩了<a href="https://github.com/Amoiensis/Matrix_hub">GitHub上Amoiensis的Matrix_hub项目</a>，了解了矩阵运算常用的需求，对照题目构思了可能可以实现的功能以及相比他的项目我可以做出的改进。也因此，在项目的实现中并非想到一个函数就写一个，加入了很多扩展性的内容。</p>
<p>​        本次project对于安全性的要求较高，笔者也因此再次加强了对程序鲁棒性的要求，在没有<code>try catch</code>的帮助下进行<code>error handling</code>确实是个技术活，在编写过程中也有参考大家讨论中提出的异常情况来进行优化。</p>
<p>​        感觉这次project的主要难点在要自己给自己出难题(实际上这学期的project都有这个成分在的)，对于加深C的理解还是很有帮助的，不过对于初学者来说可能是个不小的挑战吧(笑)。</p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>CS214 计算机组成原理 期末复习</title>
    <url>/2023/06/04/CS214_Final_Review/</url>
    <content><![CDATA[<p>$\huge\text{Outline}$</p>
<ol>
<li>Pipelining</li>
<li>Memory Hierarchy</li>
<li>Parallel Processors</li>
</ol>
<h2 id="Chapter-4-Piplining"><a href="#Chapter-4-Piplining" class="headerlink" title="Chapter 4 - Piplining"></a>Chapter 4 - Piplining</h2><h3 id="§4-1-Pipeline-Overview"><a href="#§4-1-Pipeline-Overview" class="headerlink" title="§4.1 Pipeline Overview"></a>§4.1 Pipeline Overview</h3><p><strong>Performance Issues</strong>:</p>
<ul>
<li>Longest delay determines clock period<ul>
<li>Critical path: load instruction</li>
<li>Instruction memory → register file → ALU → data memory → register file</li>
</ul>
</li>
<li>Not feasible to vary period for different instructions</li>
<li>Violates design principle: <strong>Making the common case fast</strong></li>
</ul>
<p><strong>Pipeline</strong>: </p>
<p>An implementation technique in which multiple instructions are overlapped in execution. Reduces time between instructions.</p>
<p>Pipeline is a form of parallelism.</p>
<p><strong>5-stage pipeline</strong>:</p>
<ol>
<li><strong>IF</strong>: Instruction fetch from memory</li>
<li><strong>ID</strong>: Instruction decode &amp; register read </li>
<li><strong>EX</strong>: Execute operation or calculate address</li>
<li><strong>MEM</strong>: Access memory operand</li>
<li><strong>WB</strong>: Write result back to register</li>
</ol>
<p><strong>Pipeline Speedup</strong>:</p>
<p>If all stages are balanced (take the same time), </p>
<script type="math/tex; mode=display">\text{T}_\text{pip}=\frac{\text{T}_\text{non-pip}}{\text{Number of Stages}}</script><p>* here $\text T$ means time between instructions.</p>
<p>If not balanced, speedup is less.</p>
<ul>
<li>Latency (time for each instruction) does not decrease</li>
</ul>
<h3 id="§4-2-Hazards"><a href="#§4-2-Hazards" class="headerlink" title="§4.2 Hazards"></a>§4.2 Hazards</h3><p><strong>Structure hazards</strong>:</p>
<p>Conflict for use of a resource.</p>
<p>If data and instructions all in one, accessing <code>DATA MEM</code> and <code>INST MEM</code> will cause a pipeline “bubble”.</p>
<p><strong>Data Hazards</strong>:</p>
<p>Need to wait for previous instruction to complete its data read/write.</p>
<p>use-use hazard, load-use data hazard</p>
<p><strong>Forwarding</strong>: </p>
<p>Use result immediately when it is computed.</p>
<ul>
<li>Don’t wait for it to be stored in a register</li>
<li>Requires extra connections in the datapath</li>
<li>Add a bypassing line to connect the output of EX to the input</li>
</ul>
<ol>
<li>EXE - EXE</li>
<li>MEM -EXE</li>
</ol>
<p><img src="https://s2.loli.net/2023/04/17/OW7n6jlZKcD4Axh.png" alt="image.png" style="zoom:50%;" /></p>
<p><strong>Control Hazards</strong>:</p>
<p>Fetching next instruction depends on branch outcome.</p>
<p>In MIPS pipeline, </p>
<ul>
<li><p>Need to compare registers and compute target early in the pipeline.</p>
</li>
<li><p>Add hardware to do it in ID stage.</p>
</li>
</ul>
<p><strong>Branch Prediction</strong>:</p>
<p>Predict outcome of branch, stall only if prediction is wrong.</p>
<ul>
<li><p>Static branch prediction</p>
<p>Done by compiler(software)</p>
</li>
<li><p>Dynamic branch prediction</p>
<p>Hardware measures actual branch behavior,  e.g., record recent history of each branch. Assume future behavior will continue the trend.</p>
</li>
</ul>
<p><img src="https://s2.loli.net/2023/04/24/1nft2JdaVygvQ8I.png" alt="image.png" style="zoom:50%;" /></p>
<center><b>The single-cycle diagram corresponding to 5-stage pipeline</b></center>

<p><img src="https://s2.loli.net/2023/04/24/OVjJawHuYoDvltn.png" alt="image.png" style="zoom: 67%;" /></p>
<center><b>The datapath with controls to handle exceptions</b></center>

<h3 id="§4-3-Instruction-level-Parallelism"><a href="#§4-3-Instruction-level-Parallelism" class="headerlink" title="§4.3 Instruction-level Parallelism"></a>§4.3 Instruction-level Parallelism</h3><p><strong>To increase Instruction-level parallelism(ILP)</strong>: </p>
<ul>
<li><p>Deeper pipeline: more stages</p>
<p>Less work per stage → shorter clock cycle</p>
</li>
<li><p>Multiple issue: start multiple instructions per clock cycle</p>
<p>Instruction per Cycle: $\text{IPC}={1\over \text{CPI}}$</p>
<p>More hardware used</p>
</li>
</ul>
<p><strong>Key problems of multiple issue</strong>: </p>
<ul>
<li>Packaging instructions into issue slots</li>
<li>Dealing with data and control hazards</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th>$\text{Multiple issue type}$</th>
<th>Static multiple issue</th>
<th>Dynamic multiple issue</th>
</tr>
</thead>
<tbody>
<tr>
<td>Also called</td>
<td>Very long instruction word (VLIW)</td>
<td>Superscaler</td>
</tr>
<tr>
<td>Decision made by</td>
<td>Compiler (software)</td>
<td>Processor (hardware)</td>
</tr>
<tr>
<td>Ways to remove hazard</td>
<td>Loop unrolling/ Register renaming</td>
<td>Out-of-order execution</td>
</tr>
</tbody>
</table>
</div>
<h4 id="Static-multiple-issue"><a href="#Static-multiple-issue" class="headerlink" title="Static multiple issue"></a>Static multiple issue</h4><ul>
<li>Decision made by compiler, software</li>
<li>Compiler groups instructions into “issue packet”<ul>
<li>Group of instructions that can be issued on a single cycle</li>
<li>Determined by pipeline resources required</li>
</ul>
</li>
<li>Think of an issue packet as a very long instruction<ul>
<li>Specifies multiple concurrent operations</li>
<li>Very Long Instruction Word (VLIW)</li>
</ul>
</li>
</ul>
<p><strong>MIPS with Static Dual Issue</strong>:</p>
<p>Two-issue packets</p>
<ul>
<li>Type 1: ALU or branch instructions</li>
<li>Type 2: load or store instructions</li>
</ul>
<p><img src="https://s2.loli.net/2023/04/24/DCy2gGsPjrAFYQU.png" alt="image.png" style="zoom: 50%;" /></p>
<center>
    <b>
        A static two-issue datapath
    </b>
</center>

<p>Hazards</p>
<ul>
<li>Split interdependent instructions into different packet</li>
<li>Put bubbles: one stall, multiple instructions wait.</li>
</ul>
<p><strong>Scheduling</strong>: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lw $t0, 0($s1)		 # $t0=array element</span><br><span class="line">addu $t0, $t0, $s2	 # add scalar in $s2</span><br><span class="line">sw $t0, 0($s1)		 # store result</span><br><span class="line">addi $s1, $s1,–4	 # decrement pointer</span><br><span class="line">bne $s1, $zero, Loop	 # branch $s1!=0</span><br></pre></td></tr></table></figure>
<div class="table-container">
<table>
<thead>
<tr>
<th>ALU/branch</th>
<th>Load/store</th>
<th>cycle</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>nop</code></td>
<td><code>lw $t0, 0($s1)</code></td>
<td>1</td>
</tr>
<tr>
<td><code>addi $s1, $s1,–4</code></td>
<td><code>nop</code></td>
<td>2</td>
</tr>
<tr>
<td><code>addu $t0, $t0, $s2</code></td>
<td><code>nop</code></td>
<td>3</td>
</tr>
<tr>
<td><code>bne $s1, $zero, Loop</code></td>
<td><code>sw $t0, 4($s1)</code></td>
<td>4</td>
</tr>
</tbody>
</table>
</div>
<p><strong>Loop Unrolling</strong>:</p>
<ul>
<li>Remove “name dependence”</li>
<li>Replicate loop body to expose more parallelism</li>
<li>Register renaming: use different registers per replication</li>
<li>Reduces loop-control overhead</li>
</ul>
<h4 id="Dynamic-multiple-issue-Superscalar"><a href="#Dynamic-multiple-issue-Superscalar" class="headerlink" title="Dynamic multiple issue(Superscalar)"></a>Dynamic multiple issue(Superscalar)</h4><ul>
<li>Decision made by processor during execution</li>
<li>CPU decides whether to issue 0, 1, 2, … each cycle,avoiding structural and data hazards</li>
<li>Hardware support for reordering the order of instruction execution</li>
<li>Allow the CPU to execute instructions out of order to avoid stalls</li>
<li>Commit result to registers in order</li>
</ul>
<p><img src="https://s2.loli.net/2023/04/24/DurNiyhPfCMEjRd.png" alt="image.png" style="zoom:50%;" /></p>
<center>
    <b>
        The three primary units of a dynamically scheduled pipeline
    </b>
</center>

<h4 id="Speculation"><a href="#Speculation" class="headerlink" title="Speculation"></a>Speculation</h4><p><strong>“Guess” what to do with an instruction</strong>:</p>
<ul>
<li>Start operation as soon as possible</li>
<li>Check whether guess was right<ul>
<li>If so, complete the operation</li>
<li>If not, roll-back and do the right thing</li>
</ul>
</li>
</ul>
<p><strong>Compiler/Hardware Speculation</strong>:</p>
<ul>
<li>Compiler can reorder instructions<ul>
<li>Can include “fix-up” instructions to recover from incorrect guess</li>
</ul>
</li>
<li>Hardware can look ahead for instructions to execute<ul>
<li>Buffer results until it determines they are actually needed</li>
<li>Flush buffers on incorrect speculation</li>
</ul>
</li>
</ul>
<p><strong>Speculation and Exceptions</strong>:</p>
<p>Static speculation: Can add ISA support for deferring exceptions</p>
<p>Dynamic speculation: Can buffer exceptions until instruction completion (which may not occur)</p>
<h3 id="§4-4-Fallacies-Pitfalls-and-Summary"><a href="#§4-4-Fallacies-Pitfalls-and-Summary" class="headerlink" title="§4.4 Fallacies, Pitfalls and Summary"></a>§4.4 Fallacies, Pitfalls and Summary</h3><h4 id="Fallacies-amp-Pitfalls"><a href="#Fallacies-amp-Pitfalls" class="headerlink" title="Fallacies &amp; Pitfalls"></a>Fallacies &amp; Pitfalls</h4><p>The basic idea of pipelining is easy, the devil is in the details.</p>
<p>More transistors make more advanced techniques feasible, pipeline-related ISA design needs to take account of technology trends.</p>
<p>Poor ISA design can make pipelining harder</p>
<h4 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h4><p>ISA influences design of datapath and control</p>
<p>Datapath and control influence design of ISA</p>
<p>Pipelining improves instruction throughput using parallelism</p>
<ul>
<li>More instructions completed per second</li>
<li>Latency for each instruction not reduced</li>
</ul>
<p>Hazards: structural, data, control</p>
<p>Multiple issue and dynamic scheduling (ILP)</p>
<ul>
<li>Dependencies limit achievable parallelism</li>
<li>Complexity leads to the power wall</li>
</ul>
<h2 id="Chapter-5-Memory-Hierarchy"><a href="#Chapter-5-Memory-Hierarchy" class="headerlink" title="Chapter 5 - Memory Hierarchy"></a>Chapter 5 - Memory Hierarchy</h2><h3 id="§5-1-Introduction"><a href="#§5-1-Introduction" class="headerlink" title="§5.1 Introduction"></a>§5.1 Introduction</h3><p><strong>Larger, Slower, Cheaper</strong>: Register → L1 Cache → L2 Cache → Memory → Disk</p>
<p>Cache (CPU←→Memory)</p>
<p>Virtual Memory (Memory←→Disk)</p>
<p>DRAM: high bit density, but relatively poor latency</p>
<p>SRAM: faster, but lower bit density</p>
<p><strong>Memory Hierarchy</strong>:</p>
<ul>
<li>Store everything on disk</li>
<li>Copy recently accessed (and nearby) items from disk to DRAM (main memory)</li>
<li>Copy recently accessed (and nearby) items from DRAM to SRAM (cache memory attached to CPU)</li>
</ul>
<p>If accessed data is absent in upper level: miss and block(copy)</p>
<p>If accessed data is present in upper level: hit</p>
<p><strong>Locality makes caches work</strong></p>
<ul>
<li>Temporal locality: possible to access items again</li>
<li>Spatial locality: possible to access neighbors</li>
</ul>
<p>32KB 1-cycle L1 cache that has a hit rate of 95%: </p>
<p>$\text{average access time} = 0.95\times 1 + 0.05 \times (301) = 16 \text{ cycles}$</p>
<h3 id="§5-2-Memory-Technologies"><a href="#§5-2-Memory-Technologies" class="headerlink" title="§5.2 Memory Technologies"></a>§5.2 Memory Technologies</h3><p><strong>Static RAM(SRAM)</strong></p>
<ul>
<li>memory arrays with a single read/write port</li>
<li>volatile, data loss when power off</li>
<li>No refresh, use 6-8 transistors to install a bit</li>
<li>Used in CPU cache, integrated onto the processor chip</li>
</ul>
<p><strong>Dynamic RAM(DRAM)</strong></p>
<ul>
<li>Data stored as a charge in a capacitor</li>
<li>Single transistor used to access the charge</li>
<li>Must periodically be refreshed<ul>
<li>Read contents and write back, performed on a DRAM “row”</li>
</ul>
</li>
<li>Bits in a DRAM are organized as a rectangular array<ul>
<li>Accesses an entire row</li>
<li>Burst mode: supply successive words from a row with reduced latency</li>
</ul>
</li>
</ul>
<p>Synchronous DRAM</p>
<ul>
<li>A clock is added, the memory and processor are synchronized </li>
<li>Allows for consecutive accesses in bursts without needing to send each address </li>
<li>Improves bandwidth</li>
</ul>
<p>Double data rate (DDR) DRAM: Transfer on rising and falling clock edges</p>
<p><strong>Flash Storage</strong></p>
<ul>
<li>Nonvolatile semiconductor storage, faster than disk</li>
<li>Flash bits wears out after 1000’s of accesses</li>
<li>Wear leveling: remap data to less used blocks</li>
</ul>
<p><strong>Disk</strong></p>
<ul>
<li>Each sector records<ul>
<li>Sector ID</li>
<li>Data (512 bytes, 4096 bytes proposed)</li>
<li>Error correcting code (ECC) : Used to hide defects and recording errors</li>
</ul>
</li>
<li>Access to a sector involves<ul>
<li>Queuing delay if other accesses are pending</li>
<li>Seek: move the heads</li>
<li>Rotational latency</li>
<li>Data transfer</li>
<li>Controller overhead</li>
</ul>
</li>
</ul>
<p><strong>Direct Mapped Cache</strong></p>
<p><img src="https://img-blog.csdnimg.cn/b68ccbecb0514a988b83bcaf595b5ab3.png" style="zoom: 33%;" /></p>
<div class="table-container">
<table>
<thead>
<tr>
<th>Word addr.</th>
<th>Bin addr.</th>
<th>Hit/Miss</th>
<th>Cache Block</th>
</tr>
</thead>
<tbody>
<tr>
<td>22</td>
<td>10 110</td>
<td>Miss</td>
<td>110</td>
</tr>
</tbody>
</table>
</div>
<div class="table-container">
<table>
<thead>
<tr>
<th>Index</th>
<th>Valid bit</th>
<th>Tag</th>
<th>Data</th>
</tr>
</thead>
<tbody>
<tr>
<td>110</td>
<td>Y</td>
<td>10</td>
<td>Mem[10110]</td>
</tr>
</tbody>
</table>
</div>
<p>Address = Tag | Index | Offset</p>
<p>$\text{Offset} = \log(\text{Block size})$</p>
<p>$\text{Index} = \log(\text{Number of Blocks})$</p>
<p>Tag = Bin addr length - Offset - Index</p>
<p>Block number = ( Memaddr &gt;&gt; Offset ) % (1 &lt;&lt; Index)</p>
<p><strong>Block Size Consideration</strong></p>
<p>Larger block size means:</p>
<ul>
<li>lower miss rate due to spatial locality</li>
<li>fewer blocks, more competitions, higher miss rate</li>
<li>more transfer time uppon missing, larger miss penalty</li>
</ul>
<p><strong>Cache misses</strong></p>
<ul>
<li>stall CPU pipeline</li>
<li>fetch block from next-level memory</li>
<li>read/write miss</li>
<li>instruction/data miss: restart IF / complete data access</li>
</ul>
<p><strong>Write-through</strong></p>
<p>Update memory when data in cache is modified</p>
<p>Write buffer: Holds data waiting to be written to memory, CPU only stalls on write if write buffer is already full</p>
<p><strong>Write-Back</strong></p>
<p>On data-write hit, just update the block in cache. Keep track of whether each block is dirty.</p>
<p>When a dirty block is replaced, write it back to memory, can use a write buffer to allow replacing block to be read first.</p>
<p><strong>Write Allocation</strong></p>
<p>Alternatives for write-through</p>
<ul>
<li>Allocate on miss: fetch the block</li>
<li>Write around: don’t fetch the block</li>
</ul>
<p>For write-back: Usually fetch the block</p>
<script type="math/tex; mode=display">\left\{\begin{array}{l}
  \text{write hit}\left\{\begin{array}{l}
  \text{write through + buffer} \\  
  \text{write back + buffer} 
\end{array}\right.  \\  
  \text{write miss}\left\{\begin{array}{l}
  \text{allocate on miss} \\  
  \text{write around}
\end{array}\right.  
\end{array}\right.</script><h3 id="§5-3-Measuring-amp-Improving-Cache-Performance"><a href="#§5-3-Measuring-amp-Improving-Cache-Performance" class="headerlink" title="§5.3 Measuring &amp; Improving Cache Performance"></a>§5.3 Measuring &amp; Improving Cache Performance</h3><p>$\text{Memory stall cycles} = \frac{\text{Memory accesses}}{\text{Program}}\times\text{Miss rate}\times\text{Miss penalty}$</p>
<p>Average memory access time $\text{AMAT} = \text{Hit time} + \text{Miss rate}\times\text{Miss penalty}$</p>
<ul>
<li>CPU performance ↑, miss panalty% ↑</li>
<li>CPI↓, memory stalls% ↑</li>
<li>Clock rate↑, memory stalls more cycles</li>
</ul>
<p><strong>Associative Cache</strong>:</p>
<p><img src="https://s2.loli.net/2023/05/15/YKdln9urkxowtA8.png" alt="image.png" style="zoom:50%;" /></p>
<p>Fully associative</p>
<ul>
<li>Any block → Any cache entry</li>
<li>All entries searched once (parallel)</li>
<li>Comparator per entry (expensive)</li>
</ul>
<p>n-way set associative</p>
<ul>
<li>$\left|S\right|=n$</li>
<li>Block number % (number of sets in cache)</li>
<li>All entries in given set searched once</li>
<li>$n$ comparators needed</li>
</ul>
<p>Kick out from associative cache: Random vs. LRU</p>
<p>LRU is simple for 2-way, managable for 4-way, too hard beyond that.</p>
<p><strong>Multilevel Caches</strong></p>
<p>Calc. single level cache architecture</p>
<p>memory access time → memory access cycles(miss penalty of L1) → effective CPI</p>
<p>Calc. two level cache architecture</p>
<p>hit + miss penalty of L1 + miss penalty of L2 = effective CPI</p>
<p>local miss ratio vs. global miss ratio</p>
<ul>
<li>L1: minimize hit time</li>
<li>L2: minimize miss rate, avoid main memory access</li>
<li>L1 with smaller block size than L2, smaller than a single cache</li>
</ul>
<h3 id="§5-4-Virtual-Memory"><a href="#§5-4-Virtual-Memory" class="headerlink" title="§5.4 Virtual Memory"></a>§5.4 Virtual Memory</h3><p>Memory ⇋ Disk</p>
<p>Miss in virtual memory: access disk, otherwise access physical memory</p>
<p>Address translation</p>
<p>|Virtual Page Number|Offset| → |Physical Page Number|Offset|</p>
<p>ptr → &amp;Page table </p>
<p>Page hit</p>
<ul>
<li>Access page table, obtain the PPN and some status bits</li>
<li>Access PPN</li>
</ul>
<p>Page fault</p>
<ul>
<li>Access page table, raise page fault interrupt</li>
<li>Fetch page from disk</li>
</ul>
<p><strong>Replacement and Writes</strong>:</p>
<p>LRU replacement:</p>
<ul>
<li>Reference bit in PTE, periodically cleared to 0 by OS</li>
</ul>
<p>Disk writes:</p>
<ul>
<li>Write-back, write through toooo slow, dirty bit in PTE set when page is written.</li>
</ul>
<p><strong>Fast Translation Using TLB</strong></p>
<p>TLB as “cache” of Page Table</p>
<p>TLB: |V|D|R|Tag|Payload|, Payload(PTE): |V|D|R|PPN|</p>
<p><img src="https://s2.loli.net/2023/05/15/9fdke2HDvT6SEBz.png" alt="image.png" style="zoom:50%;" /></p>
<p><strong>Sources of misses</strong>:</p>
<ul>
<li>Compulsory misses (cold start misses)<ul>
<li>Increase block size to reduce</li>
</ul>
</li>
<li>Capacity misses<ul>
<li>Due to finite cache size</li>
<li>e.g., try to put a block into a full cache</li>
</ul>
</li>
<li>Conflict misses (collision misses)<ul>
<li>In a non-fully associative entries in a set</li>
<li>e.g., try to put a block into an already full set, but the cache is not full.</li>
</ul>
</li>
</ul>
<p><strong>Cache Design Trade-offs</strong>:</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>Design change</th>
<th>Effect on miss rate</th>
<th>Negative performance effect</th>
</tr>
</thead>
<tbody>
<tr>
<td>Increase cache size</td>
<td>Reduce capacity misses</td>
<td>Increase access time</td>
</tr>
<tr>
<td>Increase associativity</td>
<td>Reduce confit misses</td>
<td>Complex hardware, increase access time</td>
</tr>
<tr>
<td>Increase block size</td>
<td>Reduce compulsory misses</td>
<td>Increase conflict misses and miss penalty</td>
</tr>
</tbody>
</table>
</div>
<h3 id="§5-5-Dependable-memory"><a href="#§5-5-Dependable-memory" class="headerlink" title="§5.5 Dependable memory"></a>§5.5 Dependable memory</h3><p><strong>Dependability measures</strong>:</p>
<p>Reliability: mean time to failure (MTTF)</p>
<p>Service interruption: mean time to repair (MTTR)</p>
<p>Mean time between failures: MTBF = MTTF + MTTR</p>
<p>Improving availability</p>
<ul>
<li>Increase MTTF: fault avoidance, fault tolerance, fault forecasting</li>
<li>Reduce MTTR: fault detection, fault diagnosis, fault repair</li>
</ul>
<p><strong>Hamming SEC Code</strong>:</p>
<p>Hamming distance: minimum number of bits that are different between two valid bit patterns</p>
<h2 id="Chapter-6-Parallel-Processors"><a href="#Chapter-6-Parallel-Processors" class="headerlink" title="Chapter 6 - Parallel Processors"></a>Chapter 6 - Parallel Processors</h2><h3 id="§6-1-Introduction"><a href="#§6-1-Introduction" class="headerlink" title="§6.1 Introduction"></a>§6.1 Introduction</h3><p>Large, inefficient uni-processor → Small, efficient multi-processors</p>
<p>Scalability, availability, power efficiency</p>
<ul>
<li><p>Instruction level: multiple issue</p>
</li>
<li><p>Data level: SIMD</p>
</li>
<li><p>Task level(process-level): high throughput for independent jobs </p>
</li>
<li><p>Parallel processing program: single program running on multiple processors</p>
</li>
<li>Multicore microprocessors: Chips with multiple cores(GPU), SMP</li>
</ul>
<p>H’ware: Parallel vs. Serial</p>
<p>S’ware: Concurrent vs. Sequential</p>
<p><strong>Parallel programming difficulties</strong></p>
<ul>
<li>Partitioning</li>
<li>Coordination</li>
<li>Communications overhead</li>
</ul>
<p><strong>Amdahl’s Law</strong></p>
<p><img src="https://s2.loli.net/2023/06/05/yepcChQH6uzgGvW.png" alt="image.png" style="zoom:50%;" /></p>
<p>Strong scaling: fixed problem size, time is reverse proportional to number of processors</p>
<p>Weak scaling: constant time cost when problem size is proportional to number of processors</p>
<p>Load balancing</p>
<p><strong>SIMD</strong></p>
<ul>
<li>Operate on vectors of data: data level parallelism</li>
</ul>
<p><strong>Vector Processors</strong></p>
<p><strong>Multithreading</strong></p>
<p>Coarse-grain multithreading</p>
<ul>
<li>Only switch on long stall</li>
<li>Simplifies hardware, but doesn’t hide short stalls</li>
</ul>
<p>Fine-grain multithreading</p>
<ul>
<li>Switch threads after each cycle</li>
<li>Interleave instruction execution</li>
<li>If one thread stalls, others are executed</li>
</ul>
<p>Simultaneous Multithreading(SMT)</p>
<ul>
<li>In multiple-issue dynamically scheduled processor</li>
</ul>
<p><strong>Shared Memory Multiprocessors</strong></p>
<ul>
<li>All processors share one memory(uniform/non-uniform access speed)</li>
</ul>
<p><img src="https://s2.loli.net/2023/05/29/ytTjZ41MOds2nbk.png" alt="image.png" style="zoom:50%;" /></p>
<p><strong>Message Passing Multiprocessors</strong></p>
<ul>
<li>Each processor has private physical address space</li>
</ul>
<p><img src="https://s2.loli.net/2023/05/29/rYd6ktQLbiv8l9x.png" alt="image.png" style="zoom: 50%;" /></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Computer Organization</tag>
      </tags>
  </entry>
  <entry>
    <title>CS213 Project Report</title>
    <url>/2022/08/08/CS213_Project_Report/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试⚠" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="152812a8bb559b1259b40ae29114faa3166415edc6c508e23c9fb320a883fdaf"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">CS213使用的数据源是？</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Database</tag>
      </tags>
  </entry>
  <entry>
    <title>CS211 Digital Logic (H) Project Design Report Flappy Bird</title>
    <url>/2022/11/06/CS211_Project_Report_Flappy_Bird/</url>
    <content><![CDATA[<p><img src="https://www.android-digital.de/wp-content/uploads/flappy_bird-600x337.jpg" alt=""></p>
<h2 id="Part-I-Team-Member"><a href="#Part-I-Team-Member" class="headerlink" title="Part I. Team Member"></a>Part I. <del>Team</del> Member</h2><div class="table-container">
<table>
<thead>
<tr>
<th>Name</th>
<th>SID</th>
<th><del>Contribution</del></th>
</tr>
</thead>
<tbody>
<tr>
<td>GuTao</td>
<td>-</td>
<td><del>100%</del></td>
</tr>
</tbody>
</table>
</div>
<h2 id="Part-II-System-Function"><a href="#Part-II-System-Function" class="headerlink" title="Part II. System Function"></a>Part II. System Function</h2><p>​        In this project, I designed a game based on the  VGA module of EGO1 development board using <code>Verilog</code> to imitate <strong>Flappy Bird</strong>. In  the project, the player can press the button to control the bird to jump  upward through the gap of the tubes to score points. </p>
<p>​        The project implements  basic user interaction interface, start, pause, reset and other game  functions, and also adds new features such as highest score, difficulty  switch, developer mode etc. to provide a more comfortable player experience  while ensuring a high degree of reproduction.   </p>
<h2 id="Part-III-System-Design"><a href="#Part-III-System-Design" class="headerlink" title="Part III. System Design"></a>Part III. System Design</h2><ol>
<li><p><strong>Working principle</strong></p>
<ul>
<li><p><strong>(a)</strong> Connect the monitor and press the global RESET button, the monitor displays 640*480 game screen, at this time the bird is stationary and the tube is on the right side out of the screen.</p>
</li>
<li><p><strong>(b)</strong> After selecting the DIFFICULTY by the switches the game starts, the bird will start moving under the simulated gravity and FLAP button, while tubes of random heights are generated from the right side of the screen and move to the left, the FLAP button supports “short press short jump” and “long press continuous flight” function.</p>
</li>
<li><p><strong>(c)</strong> The player will get a point after operating the bird through a tube. The four LED SEGMENT DISPLAYS on the right side show the current score and the other four show the highest score, and the highest score will be updated automatically when the score breaks the record.</p>
</li>
<li><strong>(d)</strong> The game ends when the bird collides with the water tube or the ground, the bird lands at a constant speed, the tubes stop moving, the FLAP button and DIFFICULTY switches are disabled, and the GAMEOVER LED lights up.</li>
<li><strong>(e)</strong> After game over, switch the difficulty to 0, press the RESTART button and select the difficulty and restart the game. The high score will be kept when the EGO1 development board is not disconnected. The game can be paused by setting the difficulty to 0 during the game.</li>
<li><strong>(f)</strong> The rightmost small switch is set to DEVELOPER MODE, which is used to observe the game difficulty and debug features. When turned on, the DEVELOPER MODE LED lights up and the bird will be stripped from the tube layer to a higher dimension and fly over the side of the tube without causing game over.</li>
<li><strong>(g)</strong> The game supports hot-swapping for both 640<em>480 and 800</em>600 resolutions, and will generate maps of suitable difficulty adapting to different resolutions.</li>
</ul>
</li>
<li><p><strong>System work flow chart</strong></p>
<p><img src="https://s2.loli.net/2022/08/04/tRlj5IZaWAVKTJ3.png" alt="System work flow chart" style="zoom: 67%;" /></p>
</li>
<li><p><strong>System frame diagram</strong></p>
<p><img src="https://s2.loli.net/2022/08/04/eb5SPRATqdhuMEf.png" alt="System frame diagram" style="zoom: 80%;" /></p>
</li>
<li><p><strong>Port logic function description</strong></p>
</li>
</ol>
<div class="table-container">
<table>
<thead>
<tr>
<th>Port</th>
<th>Direction</th>
<th>Width(bit)</th>
<th>Function Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>R</td>
<td>OUT</td>
<td>4</td>
<td>Red signal  for VGA</td>
</tr>
<tr>
<td>G</td>
<td>OUT</td>
<td>4</td>
<td>Green signal  for VGA</td>
</tr>
<tr>
<td>B</td>
<td>OUT</td>
<td>4</td>
<td>Blue signal  for VGA</td>
</tr>
<tr>
<td>hsync</td>
<td>OUT</td>
<td>1</td>
<td>Horizontal  sync signal</td>
</tr>
<tr>
<td>vsync</td>
<td>OUT</td>
<td>1</td>
<td>Vertical sync  signal</td>
</tr>
<tr>
<td>cho</td>
<td>OUT</td>
<td>8</td>
<td>Sequence of  chosen segment</td>
</tr>
<tr>
<td>lseg</td>
<td>OUT</td>
<td>8</td>
<td>Left segment</td>
</tr>
<tr>
<td>rseg</td>
<td>OUT</td>
<td>8</td>
<td>Right segmet</td>
</tr>
<tr>
<td>overled</td>
<td>OUT</td>
<td>1</td>
<td>Gameover LED</td>
</tr>
<tr>
<td>stateled</td>
<td>OUT</td>
<td>1</td>
<td>Resolution  mode LED</td>
</tr>
<tr>
<td>cheatled</td>
<td>OUT</td>
<td>1</td>
<td>Developer  mode LED</td>
</tr>
<tr>
<td>rst</td>
<td>IN</td>
<td>1</td>
<td>Refresh  displayer</td>
</tr>
<tr>
<td>restart</td>
<td>IN</td>
<td>1</td>
<td>Reset game</td>
</tr>
<tr>
<td>flap</td>
<td>IN</td>
<td>1</td>
<td>Flap button</td>
</tr>
<tr>
<td>reso</td>
<td>IN</td>
<td>1</td>
<td>Resolution  switch</td>
</tr>
<tr>
<td>cheatmode</td>
<td>IN</td>
<td>1</td>
<td>Developer  mode switch</td>
</tr>
<tr>
<td>clk</td>
<td>IN</td>
<td>1</td>
<td>Default clock</td>
</tr>
<tr>
<td>sw</td>
<td>IN</td>
<td>3</td>
<td>Difficulty  switches (0 for pause)</td>
</tr>
</tbody>
</table>
</div>
<ol>
<li><p><strong>Sub-module design</strong></p>
<p>The system is divided into 11 sub-modules, the relation between modules are shown as follows.</p>
<p><img src="https://s2.loli.net/2022/08/04/j7Kgtlx3wiH1PD9.png" alt="submodule design" style="zoom: 33%;" /></p>
<ul>
<li><p><strong>(a) Main module</strong></p>
<p>​        The master control module, which integrates each sub-module, gets the clock signal, LED segment signal, coordinate information, and is also responsible for the output of VGA display signal, game difficulty selection, game over judgment, restarting the game, switching resolution, etc. It is the integrated module of all input ports and output ports.</p>
</li>
<li><p><strong>(b) Clock divider &amp; clock wizard module</strong></p>
<p>​        Frequency divider module, the game clock frequency is manually implemented, 100MHz clock frequency of EGO1 reduced by two million times to get 50Hz of the game clock frequency, the logic of the manual frequency divider is: the use of counter <code>t%2000000 = 0</code> condition output 1ns high level game clock and clear the counter.</p>
<p>​        The clock wizard IP core is used to obtain the VGA synchronous clock frequency divider in two resolutions, 640*480 corresponds to 25.175MHz, 800*600 corresponds to 40MHz.</p>
</li>
<li><p><strong>(c) Random generator module</strong></p>
<p>​        Retrieved from the answer of @nguthrie on <a href="https://stackoverflow.com/questions/14497877">stackoverflow: how to implement a pseudo hardware random number generator?</a></p>
</li>
<li><p><strong>(d) Segment &amp; Converter module</strong></p>
<p>​        The converter module is responsible for converting the input decimal score into BCD code, and then outputting the segment sequence according to the parameter table.</p>
<p>​        The segment display module is responsible for reading the sequence from the converter module, and displaying the highest score and the current score on the eight-digit eight-segment display by dividing the frequency.</p>
</li>
<li><p><strong>(e) Bird position module</strong></p>
<p>​        The bird position calculation module is responsible for processing the input current y coordinate and the FLAP button information and obtaining the y coordinate of next frame. When the FLAP button is pressed, the bird is given an upward initial velocity, otherwise the bird is subjected to a downward simulated gravitational acceleration. The coordinate is calculated using a right shift operation for fluency, which simulates float calculation and gravity.</p>
</li>
<li><p><strong>(f) Display module (is_bird &amp; is_tube module)</strong></p>
<p>​        The display module is responsible for processing the input query coordinates and the position information of each element, and outputting the color information corresponding to the query coordinates. The display priority of the same coordinates: bird &gt; tube &gt; background. </p>
<p>​        <code>is_bird</code> and <code>is_tube</code> modules pass their relative coordinates to the top leftmost pixel for the input coordinates, and use the <code>Block Memory Generator</code> IP core in the display module to take out the corresponding color values and output the color of the current query position after deciding the priority.</p>
</li>
<li><p><strong>(g) Block Memory Generator</strong></p>
<p>​        This project uses this IP core to connect <code>bird.coe</code>, <code>tube_body.coe</code>, <code>tube_head.coe</code>, <code>bg.coe</code> to display images of birds, tube, and backgrounds.</p>
</li>
</ul>
</li>
<li><p><strong>Simulation result (waveforms)</strong></p>
<p>* As some of the modules have tons of input and output ports and are quite complex, simulation steps are not used in the development process, so the part of the waveforms are not shown here.</p>
<ul>
<li><p><strong>(a) Converter simulation</strong></p>
<p><img src="https://s2.loli.net/2022/08/04/l67RJGQOLdvVicT.png" alt="counter_sim"></p>
</li>
<li><p><strong>(b) Random generator simulation</strong></p>
<p><img src="https://s2.loli.net/2022/08/04/5MlnNjHiLtDUqkT.png" alt="random_generator_sim"></p>
</li>
<li><p><strong>(c) Clock divider module</strong> (Mod factor shrunk for better simulation)</p>
<p><img src="https://s2.loli.net/2022/08/04/2XM1CEdf5PeFqo4.png" alt="clk_div_sim"></p>
</li>
<li><p><strong>(d) Segment module</strong> (Higher shifting frequency for better simulation)</p>
<p><img src="https://s2.loli.net/2022/08/04/oAEKzSFUw5aDCBd.png" alt="seg_sim"></p>
</li>
</ul>
</li>
</ol>
<h2 id="Part-IV-Problems-encountered-and-solved"><a href="#Part-IV-Problems-encountered-and-solved" class="headerlink" title="Part IV. Problems encountered and solved"></a>Part IV. Problems encountered and solved</h2><h3 id="Question1-How-to-display-the-image-instead-of-simply-rectangles-and-squares"><a href="#Question1-How-to-display-the-image-instead-of-simply-rectangles-and-squares" class="headerlink" title="Question1.  How to display the image instead of simply rectangles and squares?"></a><strong>Question1</strong>.  How to display the image instead of simply rectangles and squares?</h3><p><strong>Reason</strong>: The very first step during my  development process is to protect my eyes, a better UI is more comfortable  for development, so implementing images is my first step.  </p>
<p><strong>Solution</strong>: Block memory generator, read the  help document and seek help from my friend. By the way, the first time I  displayed the game, the color was quite strange (red cloud, purple tube  etc.), and that’s because the non-active part of the screen was unexpectedly  assigned with non-zero values, and the screen took these values as noise and  subtracted them from normal values, leading to the strange color shift.  </p>
<h3 id="Question2-How-to-generate-tubes-of-random-height"><a href="#Question2-How-to-generate-tubes-of-random-height" class="headerlink" title="Question2.  How to generate tubes of random height?"></a><strong>Question2</strong>.  How to generate tubes of random height?</h3><p><strong>Reason</strong>: To add some basic difficulty to  this game.  </p>
<p><strong>Solution</strong>: Seek help from _stackoverflow_,  this pseudo 5-bit random number generator is powerful enough for my project.  </p>
<h3 id="Question3-How-to-create-map-adapting-to-different-resolutions"><a href="#Question3-How-to-create-map-adapting-to-different-resolutions" class="headerlink" title="Question3.  How to create map adapting to different resolutions?"></a><strong>Question3</strong>.  How to create map adapting to different resolutions?</h3><p><strong>Reason</strong>: Some classmates encounter problem  when switching to a higher resolution, so I want to solve it before it  happens.</p>
<p><strong>Solution</strong>: Use screen height and screen  width as parameter to generate map instead of using constant, which  guarantees the tube height and tube generation interval to automatically fit  the resolution.  </p>
<h3 id="Question4-How-to-simulate-the-gravity"><a href="#Question4-How-to-simulate-the-gravity" class="headerlink" title="Question4.  How to simulate the gravity?"></a><strong>Question4</strong>.  How to simulate the gravity?</h3><p><strong>Reason</strong>: To make the flap and fall more  fluent and natural.</p>
<p><strong>Solution</strong>: Use right shift operation to  simulate the float calculation, introduce velocity and acceleration to  calculate the bird position, and update it at the frequency of 50Hz.  </p>
<h3 id="Question5-How-to-judge-game-over-How-to-figure-out-the-priority-of-elements-when-displaying"><a href="#Question5-How-to-judge-game-over-How-to-figure-out-the-priority-of-elements-when-displaying" class="headerlink" title="Question5.  How to judge game over? / How to figure out the priority of elements when  displaying?"></a><strong>Question5</strong>.  How to judge game over? / How to figure out the priority of elements when  displaying?</h3><p><strong>Reason</strong>: To optimize the visual experience,  when bird hits the tube, it should fall slowly to the ground, which may cause  the bird to have intersection with the tube.</p>
<p><strong>Solution</strong>: Bird&gt;Tube&gt;Background, also  some pixels of bird is transparent, for these pixels I need to display the  tube or background below the bird. Also, the logic of judging game over is  quite simple using display logic, that is, when a pixel tries to display both  bird and tube, it means that the bird has hit the tube, game over.  </p>
<h2 id="Part-V-Summary-amp-experience"><a href="#Part-V-Summary-amp-experience" class="headerlink" title="Part V. Summary &amp; experience"></a>Part V. Summary &amp; experience</h2><p>* Since my English level is not so high, I use Chinese here to better express my true feeling :)</p>
<p>​        本次项目我利用本学期所学知识，基于EGO1开发板使用Verilog复现了经典小游戏Flappy Bird，项目中熟悉了VGA显示原理、数码管显示原理、状态机的转移和设计、简单游戏逻辑设计、硬件语言开发流程等内容。</p>
<p>​        特别感谢肖佳辰等同学提供了若干踩坑的经验，开发过程中预防了很多问题，整个开发过程实际用时不到24h，不过我在开发过程中还是遇到了花式的问题和困难，但最终也都得到了不错的解决。同时我也为其他同学提供了多次帮助，例如屏外噪声、图像导入、分辨率切换、游戏逻辑等问题。</p>
<p>​        项目中最大的收获是模块化设计的思想，本次开发前我先在纸上设计好了各个模块的大致功能和模块间互相调用的关系，在实际开发时按部就班达到了很高的效率，比较java项目边写边加的模式更为从容有条理。</p>
<p>​        实际上，本次项目由于开发周期短(同期的数据库项目对时间占用较大)还存在较多的不足，在本学期课程结束后我会将GitHub上的项目同步并继续开发，优化界面、调整重力等参数，因为我对本项目抱有较大的兴趣，所以我会继续做下去。</p>
<p>​        报告的最后，非常感谢为本学期课程和项目提供指导帮助的老师、助教和图班优秀的同学们，让我从一个对硬件一无所知甚至抱有胆怯的小白变成了对硬件编程、电路设计感兴趣的人，受益匪浅。  </p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Digital Logic</tag>
      </tags>
  </entry>
  <entry>
    <title>CS214 计算机组成原理 半期复习</title>
    <url>/2023/04/17/CS214_Midterm_Review/</url>
    <content><![CDATA[<p>$\huge\text{Outline}$</p>
<ol>
<li>Computer Abstractions and Technology</li>
<li>Instructions: Language of the Computer</li>
<li>Arithmetic for Computers</li>
</ol>
<h2 id="Chapter-1-Computer-Abstractions-and-Technology"><a href="#Chapter-1-Computer-Abstractions-and-Technology" class="headerlink" title="Chapter 1 - Computer Abstractions and Technology"></a>Chapter 1 - Computer Abstractions and Technology</h2><h3 id="§1-1-Introduction"><a href="#§1-1-Introduction" class="headerlink" title="§1.1 Introduction"></a>§1.1 Introduction</h3><p><strong>Classes of Computers</strong>:</p>
<ul>
<li>Personal computers</li>
<li>Server computers</li>
<li>Supercomputers</li>
<li>Embedded computers</li>
</ul>
<p><strong>The Post-PC Era</strong>:</p>
<ul>
<li>Cloud computing<ul>
<li>Warehouse Scale Computers (WSC)</li>
<li>Software as a Service (SaaS)</li>
</ul>
</li>
<li>Data centers</li>
<li>Personal Mobile Device(PMD)</li>
</ul>
<h3 id="§1-2-Eight-Great-Ideas-in-Computer-Architecture"><a href="#§1-2-Eight-Great-Ideas-in-Computer-Architecture" class="headerlink" title="§1.2 Eight Great Ideas in Computer Architecture"></a>§1.2 Eight Great Ideas in Computer Architecture</h3><ol>
<li><p>Design for <strong>Moore’s Law</strong></p>
<blockquote>
<p>The number of transistors that can be integrated on a die would double every 18 to 24 months.</p>
<p>Gordon Moore, 1965</p>
</blockquote>
</li>
<li><p>Use <strong>Abstraction</strong> to Simplify Design</p>
<p>High Level Language → (Compiler) → Assembly Code → (Assembler) → Machine Language → (Machine Interpretation) → Hardware Architecture Description → (Architecture Implementation) → Logic Circuit Description</p>
</li>
<li><p>Make the <strong>Common Case Fast</strong></p>
</li>
<li><p>Performance via <strong>Parallelism</strong></p>
</li>
<li><p>Performance via <strong>Pipelining</strong></p>
</li>
<li><p>Performance via <strong>Prediction</strong></p>
</li>
<li><p><strong>Hierarchy</strong> of Memories</p>
<p><img src="https://s2.loli.net/2023/04/10/7jNgTnyGV5WS9iJ.png" alt="image.png"></p>
</li>
<li><p><strong>Dependability</strong> via Redundancy</p>
<p>Redundancy so that a failing piece doesn’t make the whole system fail.</p>
</li>
</ol>
<h3 id="§1-3-Below-Your-Program"><a href="#§1-3-Below-Your-Program" class="headerlink" title="§1.3 Below Your Program"></a>§1.3 Below Your Program</h3><p><strong>Between Your Program and Hardware</strong>:</p>
<ul>
<li>Application software<ul>
<li>Written in high-level language (HLL)</li>
</ul>
</li>
<li>System software<ul>
<li>Compiler: translates HLL code to machine code</li>
<li>Operating System: service code<ul>
<li>Handling input/output</li>
<li>Managing memory and storage</li>
<li>Scheduling tasks &amp; sharing resources</li>
</ul>
</li>
</ul>
</li>
<li>Hardware<ul>
<li>Processor, memory, I/O controllers</li>
</ul>
</li>
</ul>
<p><strong>Levels of Program Code</strong>:</p>
<ul>
<li>High-level language<ul>
<li>Level of abstraction closer to problem domain</li>
<li>Provides for productivity and portability</li>
</ul>
</li>
<li>Assembly language<ul>
<li>Textual representation of instructions</li>
</ul>
</li>
<li>Hardware representation<ul>
<li>Binary digits (bits)</li>
<li>Encoded instructions and data</li>
</ul>
</li>
</ul>
<h3 id="§1-4-Under-the-Covers"><a href="#§1-4-Under-the-Covers" class="headerlink" title="§1.4 Under the Covers"></a>§1.4 Under the Covers</h3><p><strong>Same components for all kinds of computer</strong>:</p>
<ul>
<li>I/O device</li>
<li>Memory</li>
<li>Processor</li>
</ul>
<p><strong>Inside the Processor</strong>:</p>
<ul>
<li>Datapath: performs operations on data</li>
<li>Control: control the sequence of Datapath, memory, I/O</li>
<li>Cache memory: Small fast SRAM memory for immediate access to data</li>
</ul>
<h3 id="§1-5-Technologies-for-Building-Processors-and-Memory"><a href="#§1-5-Technologies-for-Building-Processors-and-Memory" class="headerlink" title="§1.5 Technologies for Building Processors and Memory"></a>§1.5 Technologies for Building Processors and Memory</h3><p>(Different from textbook)</p>
<p><strong>Processor Technology Trends</strong>:</p>
<ul>
<li>Shrinking of transistor sizes</li>
<li>Transistor density increases by 35% per year and die size increases by 10-20% per year</li>
<li>Transistor speed improves linearly with size</li>
<li>Wire delays do not scale down at the same rate as transistor delays</li>
</ul>
<p><strong>Storage</strong>:</p>
<ul>
<li>Volatile main memory<ul>
<li>Loses instructions and data when power off</li>
</ul>
</li>
<li>Non-volatile secondary memory<ul>
<li>Magnetic disk</li>
<li>Flash memory</li>
<li>Optical disk (CDROM, DVD)</li>
</ul>
</li>
</ul>
<p><strong>Memory and I/O Technology Trends</strong>:</p>
<ul>
<li>DRAM density increases by 40-60% per year, latency has reduced by 33% in 10 years (the memory wall!), bandwidth improves twice as fast as latency decreases.</li>
<li>Disk density improves by 100% every year, latency improvement similar to DRAM.</li>
<li>Networks: primary focus on bandwidth; 10Mb → 100Mb in 10 years; 100Mb → 1Gb in 5 years.</li>
</ul>
<p><strong>Power Consumption Trends</strong>:</p>
<ul>
<li><p>$\text{Dyn Power} \propto \text{activity} \times \text{capacitance}\times \text{voltage}^2\times \text{frequency}$</p>
</li>
<li><p>Voltage &amp; frequency are constant now. Capacitance per transistor is decreasing, number of transistors (activity) is increasing.</p>
</li>
<li>Power leakage rising.</li>
</ul>
<h3 id="§1-6-Performance"><a href="#§1-6-Performance" class="headerlink" title="§1.6 Performance"></a>§1.6 Performance</h3><p>$\text{*}$Focus on response time for now.</p>
<p><strong>Execution Time</strong>: </p>
<ul>
<li>Elapsed time<ul>
<li>Total response time, including all aspects.<ul>
<li>Processing, I/O, OS overhead, idle time</li>
</ul>
</li>
<li>Determines system performance.</li>
</ul>
</li>
<li>CPU time<ul>
<li>Time spent processing a given job<ul>
<li>Discounts I/O time, other jobs’ shares</li>
</ul>
</li>
<li>Comprises user CPU time and system CPU time</li>
<li>Different programs are affected differently by CPU and system performance</li>
</ul>
</li>
</ul>
<p>$\text{Performance}=1/\text{Execution time}$</p>
<p><strong>Clock level</strong>: </p>
<p>$\text{CPU Time} = \text{Clock Cycles}\times\text{Clock Period}=\frac{\text{Clock Cycles}}{\text{Clock Rate}}$</p>
<p>Performance improved by: </p>
<ul>
<li>Clock cycles ↓</li>
<li>Clock rate ↑</li>
</ul>
<p>Trade off: rate vs. count</p>
<p><strong>Instruction level</strong>:</p>
<p>$\text{Clock Cycles} = \sum\limits_{i=1}^n(\text{IC}_i\times \text{CPI}_i)$</p>
<p>$\text{CPU Time} = \text{IC} \times \text{CPI}\times \text{Clock Period}$</p>
<ul>
<li>Instruction Count for a program<ul>
<li>Determined by program, ISA and compiler</li>
</ul>
</li>
<li>Average cycles per instruction (CPI)<ul>
<li>Determined by CPU hardware</li>
<li>If different instructions have different CPI<ul>
<li>Average CPI affected by instruction mix</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>The big picture</strong>: </p>
<p>$\text{CPU Time} = \frac{\text{Instructions}}{\text{Program}}\times \frac{\text{Clock Cycles}}{\text{Instruction}}\times \frac{\text{Seconds}}{\text{Clock Cycle}}=\text{IC}\times \text{CPI}\times \text{Tc}$</p>
<ul>
<li>Algorithm: affects IC, possibly CPI</li>
<li>Programming language: affects IC, CPI</li>
<li>Compiler: affects IC, CPI</li>
<li>Instruction set architecture: affects IC, CPI, Tc</li>
</ul>
<h3 id="§1-7-The-Power-Wall"><a href="#§1-7-The-Power-Wall" class="headerlink" title="§1.7 The Power Wall"></a>§1.7 The Power Wall</h3><p><strong>Energy Consumption of a chip</strong>:</p>
<ul>
<li>Energy consumption = dynamic energy + static energy</li>
<li><p>Energy for a single transistor switch: $E\propto \frac 1 2\times \text{Capacity load}\times \text{Voltage}^2$</p>
</li>
<li><p>Energy per second (Power): $\text{Power}\propto E\times \text{Frequency switched}$</p>
</li>
</ul>
<p><strong>The power wall</strong>: </p>
<ul>
<li>We can’t reduce voltage further: too leaky.</li>
<li>We can’t remove more heat: too expensive.</li>
</ul>
<h3 id="§1-8-The-Sea-Change-The-Switch-from-Uniprocessors-to-Multiprocessors"><a href="#§1-8-The-Sea-Change-The-Switch-from-Uniprocessors-to-Multiprocessors" class="headerlink" title="§1.8 The Sea Change: The Switch from Uniprocessors to Multiprocessors"></a>§1.8 The Sea Change: The Switch from Uniprocessors to Multiprocessors</h3><p><strong>Uniprocessor Performance</strong>: </p>
<p>Constrained by power, instruction -level parallelism, memory latency</p>
<p><strong>Multiprocessors</strong>:</p>
<ul>
<li>Multicore microprocessors<ul>
<li>More than one processor per chip</li>
</ul>
</li>
<li>Requires explicitly parallel programming<ul>
<li>Compare with instruction level parallelism<ul>
<li>Hardware executes multiple instructions at once</li>
<li>Hidden from the programmer</li>
</ul>
</li>
<li>Hard to do<ul>
<li>Programming for performance</li>
<li>Load balancing</li>
<li>Optimizing communication and synchronization</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="§1-9-Real-Stuff-Benchmarking-the-Intel-Core-i7"><a href="#§1-9-Real-Stuff-Benchmarking-the-Intel-Core-i7" class="headerlink" title="§1.9 Real Stuff: Benchmarking the Intel Core i7"></a>§1.9 Real Stuff: Benchmarking the Intel Core i7</h3><p><strong>Standard Performance Evaluation Cooperative(SPEC) CPU Benchmark</strong>: </p>
<p>Develops benchmarks for CPU, I/O, Web, …</p>
<p><strong>SPEC CPU2006</strong>: </p>
<ul>
<li><p>Elapsed time to execute a selection of programs</p>
<ul>
<li>Negligible I/O, so focuses on CPU performance</li>
</ul>
</li>
<li><p>Normalized relative to reference machine</p>
</li>
<li><p>Summarize as geometric mean of performance ratios</p>
<ul>
<li>CINT2006 (integer) and CFP2006 (floating-point)</li>
</ul>
<p>$\sqrt[n]{\prod\limits_{i=1}^n \text{Execution time ratio}_i}$</p>
</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th>Instruction Count</th>
<th>CPI</th>
<th>Clock Cycle Time</th>
<th>Execution Time</th>
<th>Reference Time</th>
<th>SPEC ratio</th>
</tr>
</thead>
<tbody>
<tr>
<td>$\text{IC}$</td>
<td>$\text{CPI}$</td>
<td>$\text{Tc}$</td>
<td>$\text{T}_\text{Exe}$</td>
<td>$\text{T}_\text{Ref}$</td>
<td>$\frac{\text{T}_\text{Ref}}{\text{T}_\text{Exe}}$</td>
</tr>
</tbody>
</table>
</div>
<p><strong>SPEC Power Benchmark</strong>:</p>
<p>Power consumption of the server at different workload levels.</p>
<ul>
<li>Performance: ssj_ops (server side Java operations per second)</li>
<li>Power: Watts</li>
</ul>
<p>$\text{Overall ssj_ops per Watt} = (\sum\limits_{i=0}^{10}\text{ssj_ops}_i)/(\sum\limits_{i=0}^{10}\text{power}_i)$</p>
<h3 id="§1-10-Fallacies-and-Pitfalls"><a href="#§1-10-Fallacies-and-Pitfalls" class="headerlink" title="§1.10 Fallacies and Pitfalls"></a>§1.10 Fallacies and Pitfalls</h3><p><strong>Amdahl’s Law</strong>: performance improvements through an enhancement is limited by the fraction of time the enhancement comes into play.</p>
<script type="math/tex; mode=display">\text{Execution time after improvement}=\\{\text{Execution time affected by improvement}\over\text{Amount of improvement}}+\text{Execution time unaffected}</script><ul>
<li>Corollary: make the common case fast</li>
</ul>
<p><strong>Fallacy: Computers at low utilization use little power (X)</strong></p>
<hr>
<h2 id="Chapter-2-Instructions-Language-of-the-Computer"><a href="#Chapter-2-Instructions-Language-of-the-Computer" class="headerlink" title="Chapter 2 - Instructions: Language of the Computer"></a>Chapter 2 - Instructions: Language of the Computer</h2><h3 id="§2-1-Introduction"><a href="#§2-1-Introduction" class="headerlink" title="§2.1 Introduction"></a>§2.1 Introduction</h3><p><strong>Concepts</strong>: </p>
<ul>
<li>Instructions, Instruction set</li>
<li>Assembly language, Machine language</li>
<li>Von Neumann Architecture</li>
<li>Harvard Architecture</li>
<li>reduced instruction set computer (RISC)</li>
<li>complex instruction set computer (CISC)</li>
</ul>
<p><strong>Similarity of instruction set</strong>: </p>
<ul>
<li>base on similar design principles</li>
<li>several basic operations provided</li>
<li>designed for common goal</li>
</ul>
<p><strong>Design target</strong>:</p>
<ul>
<li>easy to build</li>
<li>maximizing performance and minimizing cost and energy</li>
</ul>
<p><strong>Important design principles</strong>: </p>
<ul>
<li>keep the hardware simple</li>
<li>keep the instructions regular</li>
</ul>
<p><strong>Design Principles</strong></p>
<ul>
<li>Simplicity favors regularity<ul>
<li>Regularity makes implementation simpler</li>
<li>Simplicity enables higher performance at lower cost</li>
</ul>
</li>
<li>Smaller is faster<ul>
<li>Register vs. memory</li>
<li>Number of registers is small</li>
</ul>
</li>
<li>Make the common case fast<ul>
<li>Small constants are common</li>
<li>Immediate operand avoids a load instruction</li>
</ul>
</li>
<li>Good design demands good compromises<ul>
<li>Different formats complicate decoding, but allow 32-bit instructions uniformly</li>
<li>Keep formats as similar as possible</li>
</ul>
</li>
</ul>
<h3 id="§2-2-Operands"><a href="#§2-2-Operands" class="headerlink" title="§2.2 Operands"></a>§2.2 Operands</h3><p><strong>Registers</strong>: </p>
<ul>
<li>MIPS ISA: 32 registers.<ul>
<li>Reason for the limit of 32 registers: Smaller is faster</li>
</ul>
</li>
<li>MIPS: Each register is 32-bit wide, a word.</li>
</ul>
<p><strong>Memory Operands</strong>:</p>
<ul>
<li>Values must be fetched from memory</li>
<li>load word: <code>lw \$t0, memory-address</code></li>
<li>store word: <code>sw \$t0, memory-address</code></li>
</ul>
<p><strong>Memory Address</strong>: </p>
<blockquote>
<p>The compiler organizes data in memory… it knows the location of every variable (saved in a table)… it can fill in the appropriate mem-address for load-store instructions.</p>
</blockquote>
<p><strong>Immediate Operands</strong>: </p>
<p>An immediate instruction uses a constant number as one of the inputs (instead of a register operand).</p>
<p><strong>Registers vs. Memory</strong>:</p>
<ul>
<li>Registers are faster to access than memory</li>
<li>Operating on memory data requires loads and stores<ul>
<li>More instructions to be executed</li>
</ul>
</li>
<li>Compiler must use registers for variables as much as possible<ul>
<li>Only spill to memory for less frequently used variables</li>
<li>Register optimization is important!</li>
</ul>
</li>
</ul>
<h3 id="§2-3-Numeric-Representations"><a href="#§2-3-Numeric-Representations" class="headerlink" title="§2.3 Numeric Representations"></a>§2.3 Numeric Representations</h3><p>Decimal, Binary, Hexadecimal</p>
<p><strong>Unsigned Binary Integers</strong>: </p>
<p>$x=x_{n-1}2^{n-1}+x_{n-2}2^{n-2}+\cdots + x_12^1+x_02^0, x\in[0,2^n-1]$</p>
<p><strong>2s-Complement Signed Integers</strong>: </p>
<p>$x=-x_{n-1}2^{n-1}+x_{n-2}2^{n-2}+\cdots + x_12^1+x_02^0, x\in[-2^{n-1},2^{n-1}-1]$</p>
<p><strong>Signed Negation</strong>:</p>
<p>2’s complement = 1’s complement + 1</p>
<p><strong>Sign Extension</strong>:</p>
<p>Representing a number using more bits, and preserve the numeric value.</p>
<p>Replicate the sign bit to the left.</p>
<p><code>addi</code>, <code>lb</code>, <code>lh</code>, <code>beq</code>, <code>bne</code></p>
<p>Instruction Formats</p>
<h3 id="§2-4-Instructions"><a href="#§2-4-Instructions" class="headerlink" title="§2.4 Instructions"></a>§2.4 Instructions</h3><p><strong>Arithmetic instruction</strong>: add, sub, …</p>
<p><strong>Data transfer instruction</strong>: lw, sw, lh, sh, …</p>
<p><strong>Logical instruction</strong>: and, or, …</p>
<p><strong>Conditional branch</strong>: beq, bne, slt, …</p>
<h3 id="§2-5-Instruction-Formats"><a href="#§2-5-Instruction-Formats" class="headerlink" title="§2.5 Instruction Formats"></a>§2.5 Instruction Formats</h3><p><strong>Registers</strong>: </p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Name</th>
<th style="text-align:center">Number</th>
<th style="text-align:left">Usage</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">$zero</td>
<td style="text-align:center">0</td>
<td style="text-align:left">Constant value 0</td>
</tr>
<tr>
<td style="text-align:center">$at</td>
<td style="text-align:center">1</td>
<td style="text-align:left">Assembler Temporary</td>
</tr>
<tr>
<td style="text-align:center">$v0-$v1</td>
<td style="text-align:center">2-3</td>
<td style="text-align:left">Values for Function Results and Expression Evaluation</td>
</tr>
<tr>
<td style="text-align:center">$a0-$a3</td>
<td style="text-align:center">4-7</td>
<td style="text-align:left">Arguments</td>
</tr>
<tr>
<td style="text-align:center">$t0-$t7</td>
<td style="text-align:center">8-15</td>
<td style="text-align:left">Temporaries</td>
</tr>
<tr>
<td style="text-align:center">$s0-$s7</td>
<td style="text-align:center">16-23</td>
<td style="text-align:left">Saved Temporaries</td>
</tr>
<tr>
<td style="text-align:center">$t8-$t9</td>
<td style="text-align:center">24-25</td>
<td style="text-align:left">Tempoaries</td>
</tr>
<tr>
<td style="text-align:center">$gp</td>
<td style="text-align:center">28</td>
<td style="text-align:left">Global Pointer</td>
</tr>
<tr>
<td style="text-align:center">$sp</td>
<td style="text-align:center">29</td>
<td style="text-align:left">Stack Pointer</td>
</tr>
<tr>
<td style="text-align:center">$fp</td>
<td style="text-align:center">30</td>
<td style="text-align:left">Frame Pointer</td>
</tr>
<tr>
<td style="text-align:center">$ra</td>
<td style="text-align:center">31</td>
<td style="text-align:left">Return Address</td>
</tr>
</tbody>
</table>
</div>
<p><strong>R-type instruction</strong>:</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">opcode</th>
<th style="text-align:center">source 1</th>
<th style="text-align:center">source 2</th>
<th style="text-align:center">dest</th>
<th style="text-align:center">shift amt</th>
<th style="text-align:center">function</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">op</td>
<td style="text-align:center">rs</td>
<td style="text-align:center">rt</td>
<td style="text-align:center">rd</td>
<td style="text-align:center">shamt</td>
<td style="text-align:center">funct</td>
</tr>
<tr>
<td style="text-align:center">6 bits</td>
<td style="text-align:center">5 bits</td>
<td style="text-align:center">5 bits</td>
<td style="text-align:center">5 bits</td>
<td style="text-align:center">5 bits</td>
<td style="text-align:center">6 bits</td>
</tr>
</tbody>
</table>
</div>
<p><strong>I-type instruction</strong>:</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">opcode</th>
<th style="text-align:center">source</th>
<th style="text-align:center">dest</th>
<th style="text-align:center">constant</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">op</td>
<td style="text-align:center">rs</td>
<td style="text-align:center">rt</td>
<td style="text-align:center">const</td>
</tr>
<tr>
<td style="text-align:center">6 bits</td>
<td style="text-align:center">5 bits</td>
<td style="text-align:center">5 bits</td>
<td style="text-align:center">16 bits</td>
</tr>
</tbody>
</table>
</div>
<p><strong>J-type instruction</strong>:</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>opcode</th>
<th>target address</th>
</tr>
</thead>
<tbody>
<tr>
<td>6 bits</td>
<td>26 bits</td>
</tr>
</tbody>
</table>
</div>
<h3 id="§2-6-Procedures"><a href="#§2-6-Procedures" class="headerlink" title="§2.6 Procedures"></a>§2.6 Procedures</h3><p><strong>Procedure lifespan</strong>:</p>
<ul>
<li>acquires resources</li>
<li>performs task</li>
<li>covers its tracks</li>
<li>returns back with desired result</li>
</ul>
<p><strong>Steps of procedure execution (caller calls the callee)</strong>:</p>
<ul>
<li>parameters (arguments) are placed where the callee can see them</li>
<li>control is transferred to the callee</li>
<li>acquire storage resources for callee</li>
<li>execute the procedure</li>
<li>place result value where caller can access it</li>
<li>return control to caller</li>
</ul>
<p><strong>Registers Used during Procedure Calling</strong>:</p>
<ul>
<li>The registers are used to hold data between the caller and the callee:</li>
<li>$a0 - $a3: four argument registers to pass parameters</li>
<li>$v0 - $v1: two value registers to return the values</li>
<li>$ra: one return address register to return to the point of origin in the caller</li>
</ul>
<p><strong>Storage Management on a Call/Return</strong>:</p>
<ul>
<li>A new procedure must create space for all its variables on the stack</li>
<li>Before executing the jal, the caller must save relevant values in $s0-$s7, $a0-$a3, $ra, temps into its own stack space</li>
<li>Arguments are copied into $a0-$a3; the jal is executed</li>
<li>After the callee creates stack space, it updates the value of $sp</li>
<li>Once the callee finishes, it copies the return value into $v0, frees up stack space, and $sp is incremented</li>
<li>On return, the caller may bring in its stack values, $ra, temps into registers</li>
</ul>
<blockquote>
<p>Updating $sp <strong>can</strong> be ahead of save caller-saved registers, e.g. MIPS clang 16.0.0. It is reasonable in the sense that the stack space should be allocated before being used. (Supplement from <a href="https://github.com/NeumoNeumo">NeumoNeumo</a>)</p>
</blockquote>
<p><strong>Saving Conventions</strong>:</p>
<ul>
<li>Caller saved: $t0-$t9, $ra, $a0-$a3</li>
<li>Callee saved: $s0-$s7</li>
</ul>
<p><strong>Memory Layout</strong>:</p>
<ul>
<li>Text: program code</li>
<li>Static data: global variables<ul>
<li>static variables in C, constant arrays and strings</li>
<li>$gp initialized to address allowing ±offsets into this segment</li>
</ul>
</li>
<li>Dynamic data: heap<ul>
<li>malloc in C, new in Java</li>
</ul>
</li>
<li>Stack: automatic storage</li>
</ul>
<p><strong>Local Data on the Stack</strong>:</p>
<ul>
<li><p>Local data allocated by callee</p>
<ul>
<li>C automatic variables</li>
</ul>
</li>
<li><p>Procedure frame (activation record)</p>
<ul>
<li>Used by some compilers to manage stack storage</li>
</ul>
<blockquote>
<p>In <code>cpython</code>(commit 95ee7c), the function runtime is stored in <code>PyFrameObject</code> which is allocated on the heap. (Acceleration of function calls in python 1.11 is due in large part to the optimization of memory allocation for PyFrameObject)</p>
</blockquote>
</li>
</ul>
<h3 id="§2-7-Addressing"><a href="#§2-7-Addressing" class="headerlink" title="§2.7 Addressing"></a>§2.7 Addressing</h3><p><img src="https://s2.loli.net/2023/04/12/73bqCv5AmxMslwz.png" alt="image.png" style="zoom:67%;" /></p>
<p><strong>Immediate Addressing</strong>:</p>
<p><code>addi, subi, andi, ori...</code></p>
<p>$\text{hi = x&gt;&gt;16}$, $\text{lo=x-(hi&lt;&lt;16)}$</p>
<p><code>lui</code> + <code>ori</code> = 32-bit constant</p>
<p><strong>Register Addressing</strong>:</p>
<p><code>and, andi, sub, subi, lw...</code></p>
<p>Using register as the operand.</p>
<p><img src="https://s2.loli.net/2023/04/12/mRP9EeWzLYSHJwq.png" alt="image.png" style="zoom:50%;" /></p>
<p><strong>Base/displacement Addressing</strong>:</p>
<p>​    <code>lw, sw, lh, sh, lb, sb...</code></p>
<p>​    The address is the sum of a register and a constant.</p>
<p><strong>Branch Addressing (PC-relative addressing)</strong>:</p>
<p><code>beq, bne</code></p>
<p>$\text{Target address = PC + 4 + constant × 4}$</p>
<p><strong>Jump Addressing (Pseudo-direct addressing)</strong>:</p>
<p><code>j, jal</code></p>
<p>$\text{Target address = PC[31:28]:(address×4)}$</p>
<p>Address times 4 because it is the “word address”.</p>
<p>If branch target is too far to encode with 16-bit offset, assembler rewrites the code to “double jump”.</p>
<h3 id="§2-8-Translating-and-Starting-a-Program"><a href="#§2-8-Translating-and-Starting-a-Program" class="headerlink" title="§2.8 Translating and Starting a Program"></a>§2.8 Translating and Starting a Program</h3><p><strong>A translation hierarchy for C</strong>:</p>
<p><img src="https://s2.loli.net/2023/04/12/Og1dI2isJ5Mq7Ao.png" alt="image.png" style="zoom:67%;" /></p>
<p><strong>Role of Assembler</strong>:</p>
<ul>
<li>pseudo-instructions → actual hardware instructions</li>
<li>assembly instructions → machine instructions</li>
</ul>
<p><strong>Role of Linker</strong>: </p>
<ul>
<li>Stitches different object files into a single executable<ul>
<li>patch internal and external references</li>
<li>determine addresses of data and instruction labels</li>
<li>organize code and data modules in memory</li>
</ul>
</li>
<li>Dynamically linked libraries – the executable points to dummy routines – these dummy routines call the dynamic linker-loader so they can update the executable to jump to the correct routine.</li>
</ul>
<p><strong>Linker Simulation</strong>:</p>
<ul>
<li>Combine the <code>Text size</code> and <code>Data size</code>.</li>
<li>Determine the order of objects.</li>
<li>Combine the text segment, conventionally start from $0040\ 0000_\text{HEX}$.</li>
<li>Modify the jump address according to new text addresses.</li>
<li>Combine the data segment, conventionally start from $1000\ 0000_\text{HEX}$.</li>
<li>Modify the memory operations according to new data addresses. Be careful about the sign extension!</li>
</ul>
<p><strong>A translation hierarchy for Java</strong>:</p>
<p><img src="https://s2.loli.net/2023/04/12/5A3ytqQFM42BUNr.png" alt="image.png" style="zoom: 67%;" /></p>
<h3 id="§2-9-RISC-V"><a href="#§2-9-RISC-V" class="headerlink" title="§2.9 RISC-V"></a>§2.9 RISC-V</h3><p><strong>Differences between MIPS32 and RISC-V32</strong>:</p>
<div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th>MIPS32</th>
<th>RISC-V32</th>
</tr>
</thead>
<tbody>
<tr>
<td>License</td>
<td>Proprietary</td>
<td>Open-Source</td>
</tr>
<tr>
<td>Endianness</td>
<td>Big-endian</td>
<td>Little-endian</td>
</tr>
<tr>
<td>Addressing modes</td>
<td>5</td>
<td>4</td>
</tr>
<tr>
<td>Conditional branches</td>
<td>slt, sltu + beq, bnq</td>
<td>+blt,bge,bltu,bgeu</td>
</tr>
</tbody>
</table>
</div>
<p><strong>RISC-V Registers</strong>:</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>Name</th>
<th>Usage</th>
</tr>
</thead>
<tbody>
<tr>
<td>x0</td>
<td>the constant value 0</td>
</tr>
<tr>
<td>x1</td>
<td>return address</td>
</tr>
<tr>
<td>x2</td>
<td>stack pointer</td>
</tr>
<tr>
<td>x3</td>
<td>global pointer</td>
</tr>
<tr>
<td>x4</td>
<td>thread pointer</td>
</tr>
<tr>
<td>x5-x7</td>
<td>temporaries</td>
</tr>
<tr>
<td>x8</td>
<td>frame pointer</td>
</tr>
<tr>
<td>x9</td>
<td>saved registers</td>
</tr>
<tr>
<td>x10-x11</td>
<td>function arguments/results</td>
</tr>
<tr>
<td>x12-x17</td>
<td>function arguments</td>
</tr>
<tr>
<td>x18-x27</td>
<td>saved registers</td>
</tr>
<tr>
<td>x28-x31</td>
<td>temporaries</td>
</tr>
</tbody>
</table>
</div>
<p><strong>R-type instruction</strong>:</p>
<p>Arithmetic instruction format.<code>add, xor</code></p>
<div class="table-container">
<table>
<thead>
<tr>
<th>funct7</th>
<th>rs2</th>
<th>rs1</th>
<th>funct3</th>
<th>rd</th>
<th>op</th>
</tr>
</thead>
<tbody>
<tr>
<td>7 bits</td>
<td>5 bits</td>
<td>5 bits</td>
<td>3 bits</td>
<td>5 bits</td>
<td>7 bits</td>
</tr>
</tbody>
</table>
</div>
<p><strong>I-type instruction</strong>:</p>
<p>Loads &amp; immediate arithmetic.<code>addi, lw</code></p>
<div class="table-container">
<table>
<thead>
<tr>
<th>immediate[11:0]</th>
<th>rs1</th>
<th>funct3</th>
<th>rd</th>
<th>op</th>
</tr>
</thead>
<tbody>
<tr>
<td>12 bits</td>
<td>5 bits</td>
<td>3 bits</td>
<td>5 bits</td>
<td>7 bits</td>
</tr>
</tbody>
</table>
</div>
<p><strong>S-type instruction</strong>:</p>
<p>Stores.<code>sw, sb</code></p>
<div class="table-container">
<table>
<thead>
<tr>
<th>immed[11:5]</th>
<th>rs2</th>
<th>rs1</th>
<th>funct3</th>
<th>imme[4:0]</th>
<th>op</th>
</tr>
</thead>
<tbody>
<tr>
<td>7 bits</td>
<td>5 bits</td>
<td>5 bits</td>
<td>3 bits</td>
<td>5 bits</td>
<td>7 bits</td>
</tr>
</tbody>
</table>
</div>
<p><strong>SB-type instruction</strong>:</p>
<p>Conditional branch format.<code>beq, bge</code></p>
<div class="table-container">
<table>
<thead>
<tr>
<th>immed[12,10:5]</th>
<th>rs2</th>
<th>rs1</th>
<th>funct3</th>
<th>imme[4:1,11]</th>
<th>op</th>
</tr>
</thead>
<tbody>
<tr>
<td>7 bits</td>
<td>5 bits</td>
<td>5 bits</td>
<td>3 bits</td>
<td>5 bits</td>
<td>7 bits</td>
</tr>
</tbody>
</table>
</div>
<p><strong>UJ-type instruction</strong>:</p>
<p>Unconditional jump format.<code>jal</code></p>
<div class="table-container">
<table>
<thead>
<tr>
<th>immediate[20,10:1,11,19:12]</th>
<th></th>
<th>rd</th>
<th>op</th>
</tr>
</thead>
<tbody>
<tr>
<td>17 bits</td>
<td>3 bits</td>
<td>5 bits</td>
<td>7 bits</td>
</tr>
</tbody>
</table>
</div>
<p><strong>U-type instruction</strong>:</p>
<p>Upper immediate format.<code>lui</code></p>
<div class="table-container">
<table>
<thead>
<tr>
<th>immediate[31:12]</th>
<th></th>
<th>rd</th>
<th>op</th>
</tr>
</thead>
<tbody>
<tr>
<td>17 bits</td>
<td>3 bits</td>
<td>5 bits</td>
<td>7 bits</td>
</tr>
</tbody>
</table>
</div>
<p><strong>MIPS &amp; RISC-V Instruction Formats</strong>:</p>
<p><img src="https://s2.loli.net/2023/04/12/mU6LCchI438Orvo.png" alt="image.png"></p>
<h3 id="§2-10-More-ISAs"><a href="#§2-10-More-ISAs" class="headerlink" title="§2.10 More ISAs"></a>§2.10 More ISAs</h3><p>ARM v8, Intel x86</p>
<hr>
<h2 id="Chapter-3-Arithmetic-for-Computers"><a href="#Chapter-3-Arithmetic-for-Computers" class="headerlink" title="Chapter 3 - Arithmetic for Computers"></a>Chapter 3 - Arithmetic for Computers</h2><h3 id="§3-1-Addition-and-Subtraction"><a href="#§3-1-Addition-and-Subtraction" class="headerlink" title="§3.1 Addition and Subtraction"></a>§3.1 Addition and Subtraction</h3><p><strong>Integer Overflow</strong>:</p>
<ul>
<li><code>add( + , + ) = -</code></li>
<li><code>add( - , - ) = +</code></li>
<li><code>sub( + , - ) = -</code></li>
<li><code>sub( - , + ) = +</code></li>
</ul>
<p><strong>1-bit Adder</strong>:</p>
<p><img src="https://s2.loli.net/2023/04/13/ZDsigL6rwNOdK5z.png" alt="image.png" style="zoom:33%;" /></p>
<p><strong>1-bit ALU and 32-bit ALU</strong>:</p>
<ul>
<li>If op = 0, o = a &amp; b (and) </li>
<li>If op = 1, o = a | b (or) </li>
<li>If op = 2, o = a + b (add)</li>
</ul>
<p>To obtain 32-bit ALU, sequentially connect the 1-bit ALU via <code>Carry</code>, bind <code>op</code>  to the same operation.</p>
<p><strong>Dealing with Overflow</strong>:</p>
<ol>
<li>Use unsigned operations.</li>
<li>On overflow, raise exceptions:<ul>
<li>Save <code>pc</code> in exception program counter <code>epc</code>.</li>
<li>Jump to predefined handler address.</li>
<li><code>mfc0</code> (move from coprocessor reg) instruction can retrieve EPC value, to return after corrective action.</li>
</ul>
</li>
<li>Saturating operations:<ul>
<li>On overflow, result is largest representable value.</li>
</ul>
</li>
</ol>
<p><strong>SIMD</strong>: Single-instruction, multiple-data. See <a href="https://github.com/ShiqiYu/CPP/blob/main/week08/Lecture08.pdf">CS205 C/C++ Lecture 8: Speedup Your Program</a> (^^ ;</p>
<h3 id="§3-2-Multiplication"><a href="#§3-2-Multiplication" class="headerlink" title="§3.2 Multiplication"></a>§3.2 Multiplication</h3><p><strong>Naive version</strong>:</p>
<p><img src="https://s2.loli.net/2023/04/13/sdiNn6Oh9qX5BaW.png" alt="image.png" style="zoom: 33%;" /></p>
<p>If the least significant bit of the multiplier is 1, add the multiplicand to the product. If not, go to the next step. Shift the multiplicand left and the multiplier right in the next two steps. These three steps are repeated 32 times.</p>
<p><strong>Refined version</strong>:</p>
<p><img src="https://s2.loli.net/2023/04/13/45pRS9xjfK8ocCH.png" alt="image.png" style="zoom: 33%;" /></p>
<p>The Multiplicand register, ALU, and Multiplier register are all 32 bits wide, with only the Product register left at 64 bits.</p>
<p>Now the product is shifted right. The separate Multiplier register also disappeared. The multiplier is placed instead in the right half of the Product register.</p>
<p><strong>Signed Multiplication</strong>:</p>
<p><strong>Faster Multiplication</strong>:</p>
<p><img src="https://s2.loli.net/2023/01/01/8pS9IbAPfWXDOgt.png" alt=""></p>
<h2 id="Appendix"><a href="#Appendix" class="headerlink" title="Appendix"></a>Appendix</h2><h3 id="MIPS-Core-Architecture"><a href="#MIPS-Core-Architecture" class="headerlink" title="MIPS Core Architecture"></a>MIPS Core Architecture</h3><p><img src="https://s2.loli.net/2023/04/12/ohiHcDIxywB4Y3k.png" alt="image.png"></p>
<h3 id="MIPS-instruction-encoding"><a href="#MIPS-instruction-encoding" class="headerlink" title="MIPS instruction encoding"></a>MIPS instruction encoding</h3><p><img src="https://s2.loli.net/2023/04/12/RB23qK1zE5mJtTa.png" alt="image.png"></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Computer Organization</tag>
      </tags>
  </entry>
  <entry>
    <title>CS215 离散数学 期末复习</title>
    <url>/2023/01/10/CS215_Final_Review/</url>
    <content><![CDATA[<h1 id="Outline"><a href="#Outline" class="headerlink" title="Outline"></a>Outline</h1><ol>
<li>Counting</li>
<li>Relation</li>
<li>Graphs</li>
<li>Tree</li>
<li>P, NP and NPC Problems</li>
</ol>
<h1 id="Chapter-11-Counting"><a href="#Chapter-11-Counting" class="headerlink" title="Chapter 11 - Counting"></a>Chapter 11 - Counting</h1><p><strong>Basic Counting Rules</strong>： the Product Rule &amp; the Sum Rule</p>
<p><strong>Pigeonhole Principle</strong>：</p>
<p> If there are more objects than bins then there is at least one bin with more than one object.</p>
<p><strong>Generalized Pigeonhole Principle</strong>：</p>
<p>If $N$ objects are placed into $k$ bins, then there is at least one bin containing at least $⌈N/k⌉$ objects.</p>
<p><strong>Inclusion-Exclusion Principle</strong>：</p>
<p>$|A\cup B|=|A|+|B|-|A\cap B|$</p>
<p>$|\bigcup\limits_{i=1}^{n}E_i|=\sum\limits_{k=1}^{n}(-1)^{k+1}\sum\limits_{1\le i_1&lt;i_2&lt;\cdots&lt;i_k\le n}|E_{i_1}\cap E_{i_2}\cap\cdots \cap E_{i_k}|$</p>
<p><strong>Permutations</strong>：</p>
<p>$P(n,k)=\frac{n!}{(n-k)!}$</p>
<p><strong>Binomial Coefficient</strong>：</p>
<p>$\left(\begin{array}{c}<br>n \\<br>k<br>\end{array}\right)=C(n, k)=\frac{n!}{k!(n-k)!}$</p>
<p><strong>Some Properties of Binomial Coefficients</strong>：</p>
<p>$\left(\begin{array}{c}<br>n \\<br>k<br>\end{array}\right)=\left(\begin{array}{c}<br>n \\<br>n-k<br>\end{array}\right)$</p>
<p>$\sum\limits_{i=0}^{n}\left(\begin{array}{c}<br>n \\<br>i<br>\end{array}\right)=2^n$</p>
<p><strong>Pascal identity</strong>：</p>
<p>$\left(\begin{array}{c}<br>n \\<br>k<br>\end{array}\right)=\left(\begin{array}{c}<br>n-1 \\<br>k-1<br>\end{array}\right)+\left(\begin{array}{c}<br>n-1 \\<br>k<br>\end{array}\right)$</p>
<p><strong>Pascal’s Triangle</strong>：</p>
<p>$\begin{array}{l}<br>1 \\<br>1 \quad 1 \\<br>\begin{array}{lll}<br>1 &amp; 2 &amp; 1<br>\end{array} \\<br>\begin{array}{llll}<br>1 &amp; 3 &amp; 3 &amp; 1<br>\end{array} \\<br>\begin{array}{lllll}<br>1 &amp; 4 &amp; 6 &amp; 4 &amp; 1<br>\end{array} \\<br>\begin{array}{llllll}<br>1 &amp; 5 &amp; 10 &amp; 10 &amp; 5 &amp; 1<br>\end{array} \\<br>\begin{array}{lllllll}<br>1 &amp; 6 &amp; 15 &amp; 20 &amp; 15 &amp; 6 &amp; 1<br>\end{array} \\<br>\end{array}$</p>
<p><strong>The Binomial Theorem</strong>：</p>
<p>$(x+y)^n=\sum\limits_{i=0}^{n}\left(\begin{array}{c}<br>n \\<br>i<br>\end{array}\right)x^{n-i}y^i$.</p>
<p><strong>Trinomial Coefficients</strong>：</p>
<p>When $k_1+k_2+k_3=n$</p>
<p>$\left(\begin{array}{ccc}<br>&amp; n &amp; \\<br>k_{1} &amp; k_{2} &amp; k_{3}<br>\end{array}\right)=\frac{n!}{k_1!k_2!k_3!}$</p>
<p><strong>The Polynomial Theorem</strong>：</p>
<p>$(a_1+a_2+\cdots+a_m)^n=\sum\limits_{x_1+x_2+\cdots+x_m=n}\frac{n!}{x_1!x_2!\cdots x_m!}a_1^{x_1}a_2^{x_2}\cdots a_m^{x_m}$</p>
<p><strong>Solving Linear Recurrence Relations of degree 2</strong>：</p>
<p>$a_n=c_1a_{n-1}+c_2a_{n-2}$</p>
<p>characteristic equation: $r^2-c_1r-c_2=0$</p>
<p>If CE has 2 distinct roots $r_1\ne r_2$, the solution: $a_n=\alpha_1r_1^n+\alpha_2r_2^n$</p>
<p><strong>Solving Linear Recurrence Relations of degree k</strong>：</p>
<p>$a_n=\sum\limits_{i=1}^kc_ia_{n-i}$</p>
<p>CE: $r^k-\sum\limits_{i=1}^k c_ir^{k-i}=0$</p>
<p>If CE has $k$ distinct roots $r_i$, then the solution: $a_n=\sum\limits_{i=1}^k \alpha_ir_i^n$</p>
<p><strong>The Case of Degenerate Roots in General</strong>：</p>
<p>Suppose there are $t$ roots $r_1,\cdots, r_t$ with multiplicities $m_1,\cdots,m_t$. Then the solution: </p>
<script type="math/tex; mode=display">a_n=\sum\limits_{i=1}^t(\sum\limits_{j=0}^{m_i-1}\alpha_{i,j}n^j)r_i^n</script><p><strong>Linear Nonhomogeneous Recurrence Relations</strong>：</p>
<p>$a_n=F(n)+\sum\limits_{i=1}^kc_ia_{n-i}$</p>
<ol>
<li>Solve $a_n=\sum\limits_{i=1}^kc_ia_{n-i}$ and get $a_n=h(n)$</li>
<li>Solve particular solution $p(n)$</li>
<li>$a_n=p(n)+h(n)$</li>
</ol>
<p><strong>Generating Functions</strong>：</p>
<p>$G(x)=a_0+a_1x+\cdots+a_kx^k+\cdots=\sum\limits_{k=0}^{\infty}a_kx^k$</p>
<p><strong>Examples of Generating Functions</strong>：</p>
<p>$G(x)=1/(1-x)$ for $|x|&lt;1$</p>
<p>$1,1,1,1,1,\cdots$</p>
<p>$G(x)=1/(1-ax)$ for $|ax|&lt;1$</p>
<p>$1,a,a^2,a^3,a^4,\cdots$</p>
<p>$G(x)=1/(1-x)^2$ for $|x|&lt;1$</p>
<p>$1,2,3,4,5,\cdots$</p>
<p>$G(x)=1/(1-ax)^2$ for $|ax|&lt;1$</p>
<p>$1,2a,3a^2,4a^3,5a^4,\cdots$</p>
<p><strong>Operations of Generating Functions</strong>：</p>
<p>Let $f(x)=\sum\limits_{k=0}^{\infty}a_kx^k$, and $g(x)=\sum\limits_{k=0}^{\infty}b_kx^k$</p>
<p>Then</p>
<script type="math/tex; mode=display">f(x)+g(x)=\sum\limits_{k=0}^{\infty}(a_k+b_k)x^k</script><script type="math/tex; mode=display">f(x)g(x)=\sum\limits_{k=0}^{\infty}(\sum\limits_{j=0}^{k}a_jb_{k-j})x^k</script><p><strong>Convolution Rule</strong>：</p>
<p>Let $A(x)$ be the generating function for selecting items from a set $A$, and let $B(x)$ be the generating function for selecting items from a set $B$ disjoint from $A$. Then the generating function for selecting items from the union $A ∪ B$ is the product $A(x) \cdot B(x)$.</p>
<p>e.g. Number of ways to select $n$ balls with $k$ colors.</p>
<p>$D(x)=1/(1-x)^k$, $d_n=[x^n] (1/(1-x)^k)=\left(\begin{array}{c}n+k-1 \\n\end{array}\right)$</p>
<p><strong>Useful Generating Functions</strong>：</p>
<p>$\begin{aligned}<br>(1+x)^{n} &amp; = \sum_{k=0}^{n} C(n, k) x^{k} \\<br>(1+a x)^{n} &amp; = \sum\limits_{k=0}^{n} C(n, k) a^{k} x^{k} \\<br>\left(1+x^{r}\right)^{n} &amp; = \sum\limits_{k=0}^{n} C(n, k) x^{r k} \\<br>\frac{1-x^{n+1}}{1-x} &amp; = \sum\limits_{k=0}^{n} x^{k}  = 1+x+x^{2}+\cdots+x^{n} \\<br>\frac{1}{1-x} &amp; = \sum\limits_{k=0}^{\infty} x^{k}  = 1+x+x^{2}+\cdots \\<br>\frac{1}{1-a x} &amp; = \sum\limits_{k=0}^{\infty} a^{k} x^{k}  = 1+a x+a^{2} x^{2}+\cdots \\<br>\frac{1}{1-x^{r}} &amp; = \sum\limits_{k=0}^{\infty} x^{r k}  = 1+x^{r}+x^{2 r}+\cdots \\<br>\frac{1}{(1-x)^{2}} &amp; = \sum\limits_{k=0}^{\infty}(k+1) x^{k}  = 1+2 x+3 x^{2}+\cdots \\<br>\frac{1}{(1-x)^{n}} &amp; = \sum\limits_{k=0}^{\infty} C(n+k-1, k) x^{k} \\<br>\frac{1}{(1+x)^{n}} &amp; = \sum\limits_{k=0}^{\infty} C(n+k-1, k)(-1)^{k} x^{k} \\<br>\frac{1}{(1-a x)^{n}} &amp; = \sum\limits_{k=0}^{\infty} C(n+k-1, k) a^{k} x^{k} \\<br>e^{x} &amp; = \sum\limits_{k=0}^{\infty} \frac{x^{k}}{k !}  = 1+x+\frac{x^{2}}{2 !}+\frac{x^{3}}{3 !}+\cdots \\<br>\ln (1+x) &amp; = \sum\limits_{k=0}^{\infty} \frac{(-1)^{k+1} x^{k}}{k}  = x-\frac{x^{2}}{2}+\frac{x^{3}}{3}-\frac{x^{4}}{4}+\cdots<br>\end{aligned}$</p>
<p><strong>r-Combinations from a Set</strong>：</p>
<p>An n-combination with <strong>repetition allowed</strong>, or a multiset of size $n$, chosen from a set of $k$ elements, is an unordered selection of elements with repetition allowed.</p>
<p>number of n-combinations: $C(n+k-1,n)$</p>
<h1 id="Chapter-12-Relation"><a href="#Chapter-12-Relation" class="headerlink" title="Chapter 12 - Relation"></a>Chapter 12 - Relation</h1><p><strong>Properties of Relations</strong>：</p>
<ul>
<li><p>Reflexive Relation：$\forall a\in A$, $(a,a)\in R$</p>
</li>
<li><p>Irreflexive Relation：$\forall a\in A$, $(a,a)\notin R$</p>
</li>
<li>Symmetric Relation：$\forall a,b\in A$, $(a,b)\in R→(b,a)\in R$</li>
<li><p>Antisymmetric Relation：$\forall a,b\in A$, $(a,b)\in R\wedge (b,a)\in R→a=b$</p>
</li>
<li><p>Transitive Relation：$\forall a,b,c\in A$, $(a,b)\in R\wedge (b,c)\in R→(a,c)\in R$</p>
</li>
</ul>
<p><strong>Combining Relations</strong>：</p>
<p>Using set operations.</p>
<p><strong>Composite of Relations</strong>：</p>
<p>$(a,b)\in R$, $(b,c)\in S$, then $(a,c)\in S\circ R$</p>
<p>The powers $R^n$, for $n=1,2,3,\cdots$, is defined inductively by</p>
<p>$R^1=R$ and $R^{n+1}=R^n\circ R$</p>
<p>The relation $R$ on a set $A$ is transitive IFF $R^n\subseteq R$ for $n=1,2,3,\cdots$</p>
<p><strong>Number of Reflexive Relations</strong>：</p>
<p>The number of reflexive relations on a set $A$ with $|A|=n$ is $2^{n(n-1)}$</p>
<p>Proof: $n$ diagonal elements fixed, the other $n(n-1)$ elements are free to choose.</p>
<p><strong>Representing Relations</strong>：</p>
<p>explicit list/table, function $f:D→\{T,F\}$, 01 matrix, directed graph…</p>
<p><strong>Closures of Relations</strong>：</p>
<p>Let $R$ be a relation on a set $A$. A relation $S$ on $A$ with property $P$ is called the closure of $R$ with respect to $P$ if $S$ is subset of every relation $Q$ ($S\subseteq Q$) with property $P$ that contains $R$ ($R\subseteq Q$).</p>
<p>$S$ is the minimal set containing $R$ satisfying the property $P$.</p>
<ul>
<li>reflexive closures</li>
<li>symmetric closures</li>
<li>transitive closures</li>
</ul>
<p><strong>Path Length</strong>：</p>
<p>Let $R$ be relation on a set $A$. There is a path of length $n$ from $a$ to $b$ IFF $(a,b)\in R^n$.</p>
<p>Proof by induction.</p>
<p>Let $A$ be a set with $n$ elements, and $R$ a relation on $A$. If there exists a path from $a$ to $b$ with $a\ne b$, then there exists a path of length $\le n-1$.</p>
<p><strong>Connectivity Relation</strong>：</p>
<p>Let $R$ be a relation on a set $A$. The connectivity relation $R^\star$ consists of all pairs $(a,b)$ such that there is a path (of any length) between $a$ and $b$ in $R$.</p>
<script type="math/tex; mode=display">R^\star =\bigcup\limits_{k=1}^{\infty}R^k</script><p>The transitive closure of a relation $R$ equals the connectivity relation $R^\star$.</p>
<p>Proof:</p>
<ul>
<li><p>$R^\star$ is transitive.</p>
<p>$(a,b)\in R^\star$ and $(b,c)\in R^\star$, then there are paths from $a$ to $b$ and from $b$ to $c$ in $R$. Thus, there is a path from $a$ to $c$ in $R$. This means that $(a,c)\in R^\star$.</p>
</li>
<li><p>$R^\star\subseteq S$ whenever $S$ is a transitive relation containing $R$.</p>
<p>Suppose that $S$ is a transitive relation containing $R$.</p>
<p>Then $S^n$ is also transitive and $S^n\subseteq S$.</p>
<p>We have $S^\star\subseteq S$. Thus $R^\star\subseteq S^\star\subseteq S$.</p>
</li>
</ul>
<p><strong>Transitive Closure Algorithm</strong>：</p>
<p>Roy-Warshall Algorithm ($\Theta(n^3)$)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// computes R* ith zero-one matrices</span><br><span class="line">W := M_R;</span><br><span class="line">for k := 1 to n</span><br><span class="line">   for i := 1 to n</span><br><span class="line">      for j := 1 to n</span><br><span class="line">         w[i][j]=w[i][j] | (w[i][k] &amp; w[k][j]);</span><br><span class="line">return W;</span><br><span class="line">// W is the zero-one matrix for R*</span><br></pre></td></tr></table></figure>
<p><strong>n-ary Relations &amp; Relational Databases</strong>：</p>
<p>domains, degree, functional, primary key, composite key, selection, projection, join…</p>
<p><strong>Equivalence Relation</strong>：</p>
<p>A relation $R$ on a set $A$ is called an equivalence relation if it is <strong>reflexive</strong>, <strong>symmetric</strong> and <strong>transitive</strong>.</p>
<p><strong>Equivalence Class</strong>：</p>
<p>Let $R$ be an equivalence relation on a set $A$. The set of all elements that are related to an element $a$ of $A$ is called the equivalence class of $a$, denoted by $[a]_R$. When only on relation is considered, we use the notation $[a]$.</p>
<p>Let $R$ be an equivalence relation on a set $A$. The following statements are equivalent: </p>
<ol>
<li>$a\ R\ b$</li>
<li>$[a]=[b]$</li>
<li>$[a]\cap[b]\ne0$</li>
</ol>
<p>Proof: </p>
<p>1→2: Prove $[a]\subseteq[b]$ and $[b]\subseteq[a]$</p>
<p>2→3: $[a]$ is not empty ($R$ reflexive)</p>
<p>3→1: $\exists c$ s.t. $c\in[a]$ and $c\in [b]$</p>
<p><strong>Partition of a set</strong>：</p>
<p>Let $S$ be a set. A collection of nonempty subsets of $S$ $A_1,A_2,\cdots,A_k$ is called a partition of $S$ is</p>
<p>$A_i\cap A_j=\emptyset$, $i\ne j$ and $S=\bigcup\limits_{i=1}^{k}A_i$</p>
<p><strong>Equivalence Classes and Partitions</strong>：</p>
<p>Let $R$ be an equivalence relation on a set $A$. Then union of all th equivalence classes of $R$ is $A$: </p>
<script type="math/tex; mode=display">A=\bigcup \limits_{a\in A}[a]_R</script><p>The equivalence classes form a partition of $A$.</p>
<p>Let $\{A_1,A_2,\cdots,A_i,\cdots\}$ be a partition of $S$. Then there is an equivalence relation $R$ on $S$, that has the sets $A_i$ as its equivalence classes.</p>
<p><strong>Partial Ordering</strong>：</p>
<p>A relation $R$ on a set $S$ is called a partial ordering, if it is <strong>reflexive</strong>, <strong>antisymmetric</strong> and <strong>transitive</strong>. A set $S$ together with a partial ordering $R$ is called a poset, denoted by $(S,R)$. Members of $S$ are called elements of the poset.</p>
<p><strong>Comparability</strong>：</p>
<p>The elements $a$ and $b$ of a poset $(S,≼)$ are comparable if either $a≼b$ or $b≼a$. Otherwise, $a$ and $b$ are called incomparable.</p>
<p><strong>Total Ordering</strong>：</p>
<p>If $(S,≼)$ is a poset and every two elements of $S$ are comparable, $S$ is called a <strong>totally ordered</strong> or <strong>linearly ordered set</strong>, and $≼$ is called a <strong>total order</strong> or a <strong>linear order</strong>. A totally ordered set is also called a <strong>chain</strong>.</p>
<p><strong>Lexicographic Ordering</strong>：</p>
<p>Given two posets $(A_1,≼_1)$ and $(A_2,≼_2)$, the lexicographic ordering on $A_1\times A_2$ is defined by specifying that $(a_1,a_2)$ is less than $(b_1,b_2)$, i.e., $(a_1,a_2)≼(b_1,b_2)$, either if $a_1≺_1b_1$ or if $a_1=b_1$ then $a_2≼_2b_2$.</p>
<p><strong>Hasse Diagram</strong>：</p>
<p>……</p>
<p><strong>Maximal and Minimal Elements</strong>：</p>
<p>$a$ is a maximal (resp. minimal) element in poset $(S, ≼)$ is there is no $b\in S$ such that $a ≺ b$ (resp. $b ≺ a$).</p>
<p><strong>Greatest and Least Elements</strong>：</p>
<p>$a$ is the greatest (resp. least) element of the poset $(S, ≼)$ if $b ≼ a$ (resp. $a ≼ b$) for all $b\in S$.</p>
<p><strong>Upper Bound and Lower Bound</strong>：</p>
<p>$u\in S$ is called an upper bound (resp. lower bound) of $A$ if $a ≼ u$ (resp. $u ≼ a$) for all $a\in A$.</p>
<p>$x\in S$ is called the least upper bound (resp. greatest lower bound) of $A$ if $x$ is an upper bound (resp. lower bound) that is less than any other upper bound (resp. greater than any other lower bound) of $A$.</p>
<p><strong>Well-Ordered Set</strong>：</p>
<p>$(S, ≼)$ is a well-ordered set if it is a poset such that $≼$ is a total ordering and every non empty subset of $S$ has a least element.</p>
<p><strong>The Principle of Well-Ordered Induction</strong>：</p>
<p>Suppose that $S$ is a well-ordered set. Then $P(x)$ is true for all $x\in S$, if</p>
<p>Inductive Step: For every $y\in S$, if $P(x)$ is true for all $x\in S$ with $x ≺ y$, then $P(y)$ is true.</p>
<p><strong>The reason for no base step</strong>: For the least element $x_0$, the precedent “P(x) is true for all $x\in S$ with $x ≺ x_0$” is itself false, by <strong>vacuous proof</strong>, $P(x_0)$ is true.</p>
<p><strong>Lattices</strong>：</p>
<p>A poset in which every pair of elements has both a least upper bound and a greatest lower bound is called a lattice.</p>
<p><strong>Topological Sorting</strong>：</p>
<p>Given a partial ordering $R$, find a total ordering $≼$ such that $a≼b$ whenever $a\ R\ b$. $≼$ is said <strong>compatible</strong>  with $R$.</p>
<p><img src="https://s2.loli.net/2023/01/02/SmQ43Gcoi9Nlnk8.png" alt="image.png" style="zoom:50%;" /></p>
<h1 id="Chapter-13-Graph"><a href="#Chapter-13-Graph" class="headerlink" title="Chapter 13 - Graph"></a>Chapter 13 - Graph</h1><p><strong>Definition of a Graph</strong>：</p>
<p>A graph $G=(V,E)$ consists of a nonempty set $V$ of vertices and a set $R$ of edges. Each edge has either one or two vertices associated with it, called its endpoints. An edge is said to be incident to its endpoints.</p>
<p><strong>Simple graph</strong>：</p>
<p>A graph in which at most one edge joins each pair of distinct vertices and no edge joins a vertex to itself.</p>
<p><strong>multigraph</strong>：</p>
<p>Graphs that may have multiple edges connecting the same vertices.</p>
<p><strong>pseudograph</strong>：</p>
<p>Graphs that may include loops, and possibly multiple edges connecting the same pair of vertices or a vertex to itself.</p>
<p><strong>Undirected Graphs</strong>：</p>
<p>adjacent(neighbors), neighborhood, degree…</p>
<p> Handshaking Theorem: If $G=(V,E)$ is an undirected graph with $m$ edges, then $2m=\sum\limits_{v\in V}deg(v)$.</p>
<p>An undirected graph has an even number of vertices of odd degree.</p>
<p><strong>Directed Graphs</strong>：</p>
<p>adjacent from, adjacent to, in-degree $deg^-(v)$, out-degree $deg^+(v)$</p>
<p>$|E|=\sum\limits_{v\in V}deg^-(v)=\sum\limits_{v\in V}deg^+(v)$</p>
<p><strong>Complete Graphs</strong>：</p>
<p>A complete graph on $n$ vertices, denoted by $K_n$, is the simple graph that contains exactly one edge between each pair of distinct vertices.</p>
<p><img src="https://s2.loli.net/2023/01/02/FLgD3CjqZrykNEK.png" alt="image.png" style="zoom:50%;" /></p>
<p><strong>Cycles</strong>：</p>
<p>A cycle $C_n$ for $n \ge 3$ consists of $n$ vertices $v_1, v_2,\cdots, v_n$, and edges $\{v_1,v_2\},\{v_2,v_3\},\cdots,\{v_{n-1},v_n\},\{v_n,v_1\}$.</p>
<p><img src="https://s2.loli.net/2023/01/02/fvPKBXwR3t8JIyo.png" alt="image.png" style="zoom:50%;" /></p>
<p><strong>Wheels</strong>：</p>
<p>A wheel $W_n$ is obtained by adding an additional vertex to a cycle $C_n$.</p>
<p><img src="https://s2.loli.net/2023/01/02/FsuZT7cd2tvEbXQ.png" alt="image.png" style="zoom:50%;" /></p>
<p><strong>N-dimensional Hypercube</strong>：</p>
<p>An  n-cube $Q_n$ is a graph with $2^n$ vertices representing all bit strings of length $n$, where there is an edge between two vertices that differ in exactly one bit position.</p>
<p><img src="https://s2.loli.net/2023/01/02/LMvoapSku5HEOFB.png" alt="image.png" style="zoom:50%;" /></p>
<p><strong>Bipartite Graphs</strong>：</p>
<p>A simple graph $G$ is bipartite if $V$ can be partitioned into two disjoint subsets $V_1$ and $V_2$ such that every edge connects a vertex in $V_1$ and a vertex in $V_2$.</p>
<p><strong>Complete Bipartite Graphs</strong>：</p>
<p>A complete bipartite graph $K_{m,n}$ is a graph that has its vertex set partitioned into two subsets $V_1$ of size $m$ and $V_2$ of size $n$ such that there is an edge from every vertex in $V_1$ to every vertex in $V_2$.</p>
<p><strong>Bipartite Graphs and Matchings</strong>：</p>
<p>A matching is a subset of $E$ such that no two edges are incident with the same vertex.</p>
<p>A maximum matching is a matching with the largest number of edges.</p>
<p>A matching $M$ in a bipartite graph $G=(V,E)$ wth bipartition $(V_1,V_2)$ is a complete matching from $V_1$ to $V_2$ if every vertex in $V_1$ is the endpoint of an edge in the matching, i.e., $|M|=|V_1|$.</p>
<p><strong>Hall’s Marriage Theorem</strong>：</p>
<p>The bipartite graph $G=(V,E)$ with bipartition $(V_1,V_2)$ has a complete matching from $V_1$ to $V_2$ IFF $|N(A)|\ge |A|$ for all subsets $A$ of $V_1$.</p>
<ul>
<li><p>“only if”: For every vertex $v\in A$, there is an edge in $M$ connecting $v$ to a vertex in $V_2$. Thus, for all subsets $A$ of $V_1$, there are at least as many vertices in $V_2$ that are neigbors of vertices in $A$ as there are vertices in $A$, $|N(A)|\ge |A|$.</p>
</li>
<li><p>“if”: Use strong induction. </p>
</li>
<li><p>Base step: $|V_1|=1$</p>
</li>
<li><p>Inductive hypothesis: Let $k$ be a positive integer. If $G=(V,E)$  is a bipartite graph ith bipartition $(V_1,V_2)$, and $|V_1|=j\le k$, then there is a complete matching $M$ from $V_1$ to $V_2$ whenever the condition that $|N(A)|\ge |A|$ for all $A\subseteq V_1$ is met.</p>
</li>
<li><p>Inductive step: suppose that $H=(W,F)$ is a bipartite graph with bipartition $(W_1,W_2)$ and $|W_1|=k+1$</p>
</li>
<li><p>Case (Ⅰ): For all integers $j$ with $1\le j\le k$, the vertices in every set of $j$ elements from $W_1$ are adjacent to at least $j+1$ elements of $W_2$.</p>
<p>Find a complete matching from $W_1-\{v\}$ to $W_2-\{w\}$, then match $v$ to $w$.</p>
</li>
<li><p>Case (Ⅱ): For some integer $j$ with $1\le j\le k$, there is a subset $W_1’$ of $j$ vertices such that there are exactly $j$ neighbors of these vertices in $W_2$.</p>
<p>Let $W_2’$ be the set of these neighbors. Then by i.h., there is a complete matching from $W_1’$ to $W_2’$. Now consider the graph $K=(W_1-W_1’,W_2-W_2’)$. We will show that the condition $|N(A)|\ge |A|$ is met for all subsets $A$ of $W_1-W_1’$.</p>
<p>If not, there is a subset $B$ of $t$ vertices with $1\le t\le k+1-j$ such that $|N(B)|&lt;|B|$, contradiction.</p>
<p>Then there is a complete matching for $K$, and thus a complete matching for $G$.</p>
</li>
</ul>
<p><strong>Subgraphs</strong>：</p>
<p>A subgraph of a graph $G=(V,E)$ is a graph $(W,F)$, where $W\subseteq V$ and $F\subseteq E$. A subgraph $H$ of $G$ is a proper subgraph of $G$ if $H\ne G$.</p>
<p><strong>Union of Simple Graphs</strong>：</p>
<p>Simple graph: $G_1\cup G_2=(V_1\cup V_2, E_1\cup E_2)$</p>
<p><strong>Representation of Graphs</strong>：</p>
<p>adjacency lists, adjacency matrices, and incidence matrices.</p>
<p><strong>Isomorphism of Graphs</strong>：</p>
<p>The simple graphs $G_1=(V_1,E_1)$ and $G_2=(V_2,E_2)$ are isomorphic if there is a <strong>bijection</strong> from $V_1$ to $V_2$ with the property that $a$ and $b$ are adjacent in $G_1$ IFF $f(a)$ and $f(b)$ are adjacent in $G_2$, for all $a$ and $b$ in $V_1$. Such a function is called an isomorphism.</p>
<p>Useful graph invariants: the number of vertices, number of edges, degree sequence, etc.</p>
<p><strong>Path</strong>：</p>
<p>Let $n$ be a nonnegative integer and $G$ an undirected graph. A path of length $n$ from $u$ to $v$ in $G$ is a sequence of $n$ edges $e_1,e_2,\cdots,e_n$ of $G$ for which there exists a sequence $x_0=u,x_1,\cdots,x_{n-1},x_n=v$ of vertices such that $e_i$ has the endpoints $x_{i-1}$ and $x_i$ for $i=1,\cdots,n$.</p>
<p>A path is <strong>simple</strong> if it does not contain the same edge more than once.</p>
<p><strong>Circuit</strong>：</p>
<p>The path is a circuit if it begins and ends at the same vertex, i.e., if $u=v$ and has the length greater than $0$. </p>
<p><strong>Simple Path Existence Lemma</strong>：</p>
<p>If there is a path between two distinct vertices $x$ and $y$ in graph $G$, then there is a simple path between $x$ and $y$ in $G$. (Just delete cycles/loops.)</p>
<p><strong>Connected Components</strong>：</p>
<p>A connected component of a graph $G$ is a connected subgraph of $G$ that is not a proper subgraph of another connected subgraph of $G$.</p>
<p><strong>Connectedness in Directed Graphs</strong>：</p>
<p>A directed graph is strongly connected if there is a path from $a$ to $b$ and a path from $b$ to $a$ whenever $a$ and $b$ are vertices in the graph.</p>
<p>A directed graph is weakly connected if there is a path between every two vertices in the underlying undirected graph.</p>
<p><strong>Cut Vertices and Cut Edges</strong>：</p>
<p>……</p>
<p>A set of edges $E’$ is called an edge cut of $G$ if the subgraph $G-E’$ is disconnected. The edge connectivity $\lambda(G)$ is the minimum number of edges in an edge cut of $G$.</p>
<p><strong>Paths and Isomorphism</strong>：</p>
<p>The existence of a simple circuit of length $k$ is isomorphic invariant. In addition, paths can be used to construct mappings that may be isomorphisms.</p>
<p><strong>Counting Paths between Vertices</strong>：</p>
<p>Let $G$ be a graph with adjacency matrix $A$ with respect to the ordering $v_1, v_2,\cdots, v_n$ of vertices. The number of different paths of length r from $v_i$ to $v_j$ , where $r &gt; 0$ is positive, equals the $(i, j)$-th entry of $A^r$.</p>
<p>Proof by induction:</p>
<p>$A^{r+1}=A^rA$, the $(i,j)$-th entry of $A^{r+1}$ equals $b_{i1}a_{1j}+b_{i2}a_{2j}+\cdots+b_{in}a_{nj}$, where $b_{ik}$ is the $(i,k)$-th entry of $A^r$.</p>
<p><strong>Euler Paths and Circuits</strong>：</p>
<p>An Euler circuit in a graph $G$ is a simple circuit containing every edge of $G$.</p>
<p>A connected multigraph with at least two vertices has an Euler circuit IFF each of its vertices has even degree.</p>
<p>An Euler path in $G$ is a simple path containing every edge of $G$.</p>
<p>A connected multigraph has an Euler path but not an Euler circuit IFF it has exactly two vertices of odd degree.</p>
<p><strong>Hamilton Paths and Circuits</strong>：</p>
<p>A simple path in a graph $G$ that passes through every vertex exactly once is called a Hamilton path.</p>
<p>A simple circuit in a graph $G$ that passes through every vertex exactly once is called a Hamilton circuit.</p>
<p><strong>Sufficient Conditions for Hamilton Circuits</strong>：</p>
<p><strong>Dirac’s Theorem</strong>： If  $G$ is a simple graph with $n\ge 3$ vertices such that the degree of every vertex in $G$ is $\ge n/2$, then $G$ has a Hamilton circuit.</p>
<p><strong>Ore’s Theorem</strong>： If $G$ is a simple graph with $n\ge 3$ vertices such that $deg(u)+deg(v)\ge n$ for every pair of nonadjacent vertices, then $G$ has a Hamilton circuit.</p>
<p><strong>Shortest Path Problems</strong>：</p>
<p>Dijkstra-$O(v^2)$, Fredman &amp; Tarjan-$O(e+v\log v)$, Bellman-Ford-$O(ev)$…</p>
<p><strong>Planar Graphs</strong>：</p>
<p>A graph is called planar if it can be drawn in the plane without any edge crossing. Such a drawing is called a planar representation of the graph.</p>
<p><strong>Euler’s Formula</strong>：</p>
<p>Let $G$ be a connected planar simple graph with $e$ edges and $v$ vertices. Let $r$ be the number of regions ina planar representation of $G$. Then $r=e-v+2$.</p>
<p>Proof by induction.</p>
<p><strong>The Degree of Regions</strong>：</p>
<p>The degree of a region is defined to be the number of edges on the boundary of this region. When an edge occurs twice on the boundary, it contributes two to the degree.</p>
<p><strong>Corollaries of Planar Graphs</strong>：</p>
<p><strong>Corollary 1</strong>： If $G$ is a connected planar simple graph with $e$ edges and $v$ vertices, where $v\ge3$, then $e\le 3v-6$.</p>
<ul>
<li><p>The degree of every region is at least 3.</p>
</li>
<li><p>The sum of the degrees of the regions is exactly twice the number of edges in the graph.</p>
<script type="math/tex; mode=display">2e=\sum\limits_{\text{all regions R}}deg(R)\ge 3r=3e-3v+6</script></li>
</ul>
<p><strong>Corollary 2</strong>：If $G$ is a connected planar simple graph, then $G$ has a vertex of degree not exceeding 5.</p>
<ul>
<li>Proof by contradiction using Corollary 1 and Handshaking Theorem.</li>
</ul>
<p><strong>Corollary 3</strong>：In a connected planar simple graph has $e$ edges and $v$ vertices with $v\ge3$ and no circuits of length 3, then $e\le2v-4$.</p>
<ul>
<li>The degree of every region is at least 4. (no circuit of length 3)</li>
</ul>
<p><strong>Kuratowski’s Theorem</strong>：</p>
<p>If a graph is planar, so will be any graph obtained by removing an edge $\{u, v\}$ and adding a new vertex $w$ together with edges $\{u,w\}$ and $\{w, v\}$. Such an operation is called an <strong>elementary subdivision</strong>. </p>
<p>The graphs $G_1 = (V_1, E_1 )$ and $G_2 = (V_2, E_2 )$ are called <strong>homomorphic</strong> if they can be obtained from the same graph by a sequence of elementary subdivisions.</p>
<p>A graph is nonplanar IFF it contains a subgraph homomorphic to $K_{3,3}$ or $K_5$.</p>
<p><strong>Graph Coloring</strong>：</p>
<p>A coloring of a simple graph is the assignment of a color to each vertex of the graph so that no two adjacent vertices are assigned the same color.</p>
<p>The chromatic number of a graph is the least number of colors needed for a coloring of this graph, denoted by $\chi(G)$.</p>
<p><strong>Four-color theorem</strong>： </p>
<p>The chromatic number of a planar graph is no greater than 4.</p>
<p><strong>Six Color Theorem</strong>：</p>
<p>The chromatic number of a planar graph is no greater than 6.</p>
<p><strong>Proof by induction</strong>. (w.l.o.g., assume that the graph is connected)</p>
<p><strong>Basic step</strong>: For a single vertex, pick an arbitrary color.</p>
<p><strong>Inductive hypothesis</strong>: Assume that every planar graph with $k\ge1$ or fewer vertices can be 6-colored.</p>
<p><strong>Inductive step</strong>: Consider a planar graph with $k+1$ vertices. Using <strong>Corollary 2</strong> (the graph has a vertex of degree 5 or fewer). Remove this vertex, by i.h., we can color the remaining graph with 6 colors. Put the vertex back in. Since there are at most 5 colors adjacent, so we have at least one color left.</p>
<p><strong>Five Color Theorem</strong>：</p>
<p>The chromatic number of a planar graph is no greater than 5.</p>
<p><strong>Proof by induction</strong>. (w.l.o.g., assume that the graph is connected)</p>
<p><strong>Basic step</strong>: For a single vertex, pick an arbitrary color.</p>
<p><strong>Inductive hypothesis</strong>: Assume that every planar graph with $k\ge1$ or fewer vertices can be 5-colored.</p>
<p><strong>Inductive step</strong>: Consider a planar graph with k + 1 vertices. Using <strong>Corollary 2</strong> (the graph has a vertex of degree 5 or fewer). Remove this vertex, by i.h., we can color the remaining graph with 5 colors. Put the vertex back in.</p>
<p>Case (Ⅰ): If the vertex has degree less than 5, or if it has degree 5 and only $\le 4$ colors are used for vertices connected to it, we can pick an available color for it.</p>
<p>Case (Ⅱ): We make a subgraph out of all the vertices colored 1 or 3. If the adjacent vertex colored 1 and the adjacent vertex colored 3 are not connected by a path in the subgraph.</p>
<p>On the other hand, if the vertices colored 1 and 3 are connected via a path in the subgraph, we do the the same for the vertices colored 2 and 4. Note that this will be a disconnected pair of subgraphs, separated by a path connecting the vertices colored 1 and 3.</p>
<h1 id="Chapter-14-Tree"><a href="#Chapter-14-Tree" class="headerlink" title="Chapter 14 - Tree"></a>Chapter 14 - Tree</h1><p><strong>Tree</strong>：</p>
<p>A tree is a connected undirected graph with no simple circuits.</p>
<p>An undirected graph is a tree IFF there is a unique simple path between any two of its vertices.</p>
<p>A rooted tree is a tree in which one vertex has been designated as the root and every edge is directed away from the root.</p>
<p>parent, child, sibling, ancestor, descendant, leaf, internal vertex, subtree…</p>
<p><strong>m-Ary Trees</strong>：</p>
<p>A rooted tree is called an m-ary tree if every internal vertex has no more than $m$ children.</p>
<p>The tree is called a <strong>full</strong> m-ary tree if every internal vertex has exactly $m$ children.</p>
<p>In particular, an m-ary tree with $m = 2$ is called a binary tree.</p>
<p>A binary tree is an ordered rooted tree where the children of each internal vertex are ordered.</p>
<p>In a binary tree, the first child is called the left child, and the second child is called the right child.</p>
<p>left subtree, right subtree</p>
<p><strong>Counting Vertices in a Full m-Ary Trees</strong>：</p>
<p>A full m-ary tree with $i$ internal vertices has $n = mi + 1$ vertices. Leaves number $ℓ=n-i$.</p>
<p><strong>Level and Height</strong>：</p>
<p>The level of a vertex $v$ in a rooted tree is the length of the unique path from the root to this vertex.</p>
<p>The height of a rooted tree is the maximum of the levels of the vertices.</p>
<p>A rooted m-ary tree of height $h$ is balanced if all leaves are at levels $h$ or $h − 1$. (differ no greater than 1)</p>
<p><strong>The Number of Leaves</strong>：</p>
<p>There are at most $m^h$ leaves in an m-ary tree of height $h$.</p>
<p>If an m-ary tree of height $h$ has ℓ leaves, then $h \ge ⌈\log_m ℓ⌉$. If the m-ary tree is full and balanced, then h = $⌈\log_mℓ⌉$.</p>
<p><strong>Tree Traversal</strong>：</p>
<p>preorder traversal, inorder traversal, postorder traversal.</p>
<p>expression trees, prefix notation, infix notation, postfix notation.</p>
<p><strong>Catalan Numbers</strong>：</p>
<p>$C_0=C_1=1$</p>
<p>$C_n=\sum\limits_{i=0}^{n-1}C_iC_{n-i-1}=\frac{1}{n+1}\left(\begin{array}{c}2n \\n\end{array}\right)=\left(\begin{array}{c}2n \\n\end{array}\right)-\left(\begin{array}{c}2n \\n-1\end{array}\right)$</p>
<p>The number of 01 sequences using $n$ ones and $n$ zeros such that the number of ones is no less than the number of zeros in any prefix subsequence.</p>
<p>The number of full binary trees with $2n+1$ vertices.</p>
<p>The number of binary trees with $n$ vertices.</p>
<p><strong>Spanning Trees</strong>：</p>
<p>Let $G$ be a simple graph. A spanning tree of $G$ is a subgraph of $G$ that is a tree containing every vertex of $G$.</p>
<p>A simple graph is connected IFF it has a spanning tree.</p>
<p><strong>DFS, BFS</strong>：</p>
<p>……</p>
<p><strong>Minimum Spanning Trees</strong>：</p>
<p>Prim’s Algorithm($O(e\log v)$), Kruskal’s Algorithm($O(e\log e)$).</p>
<h1 id="Chapter-15-P-NP-and-NPC-Problems"><a href="#Chapter-15-P-NP-and-NPC-Problems" class="headerlink" title="Chapter 15 - P, NP and NPC Problems"></a>Chapter 15 - P, NP and NPC Problems</h1><p><strong>Class NP vs. Class P</strong>：</p>
<p><strong>P</strong>： decision problems solvable in polynomial time</p>
<p><strong>NP</strong>： decision problems with certificates verifiable in polynomial time (polynomial time verification)</p>
<p><strong>Satisfiability Problem(NP)</strong>：</p>
<p>To determine whether a Boolean formula is satisfiable or not.</p>
<p><strong>2SAT Problem(P)</strong>：</p>
<p>To determine whether a 2-CNF formula is satisfiable or not.</p>
<p>Using path searching (polynomial-time decidable), construct edges using “→”.</p>
<p>A 2-CNF formula is <strong>unsatisfiable</strong> IFF there exists a variable $x$ such that: </p>
<ul>
<li>there is a path from $x$ to $\neg x$ in the graph $G$</li>
<li>there is a path from $\neg x$ to $x$ in the graph $G$</li>
</ul>
<p><strong>Polynomial-Time Reduction &amp; The Class NP-Complete</strong>：</p>
<p>see <a href="https://gutaozi.github.io/2022/11/05/CS215_Midterm_Review/">Chapter 6</a>.</p>
<p><strong>Cook’s Theorem</strong>：</p>
<p>SAT $\in$ NPC.</p>
<p>3SAT $\le_P$ DCLIQUE $\le_P$ DVC</p>
<p><strong>Clique</strong>：</p>
<p>A clique is a complete subgraph of $G$.</p>
<ul>
<li><p>The Problem CLIQUE</p>
<p>Find a clique of maximum size in a graph $G$.</p>
</li>
<li><p>The Problem DCLIQUE</p>
<p>Given an undirected graph G and an integer $k$, determine whether $G$ has a clique of size $k$.</p>
</li>
</ul>
<p>DCLIQUE $\in$ NP： certificate $O(|V^2|)$</p>
<p><strong>3SAT $\le_{P}$ DCLIQUE</strong>：</p>
<p>For the $k$ clauses input to 3SAT, draw literals as vertices, and all edges between vertices such that:</p>
<ul>
<li>across clauses only</li>
<li>not between $x$ and $\neg x$</li>
</ul>
<p>The reduction takes polynomial time: A satisfiable assignment $⇌$ a clique of size $k$</p>
<p><strong>Vertex Cover</strong>：</p>
<p>A vertex cover of $G$ is a set of vertices such that every edge in $G$ is incident at at least one of these vertices. </p>
<ul>
<li><p>The Vertex Cover Problem (VC) </p>
<p>Given a graph $G$, find a vertex cover of $G$ of minimum size.</p>
</li>
<li><p>The Problem DVC</p>
<p>Given a graph $G$ and an integer $k$, determine whether $G$ has a vertex cover of with $k$ vertices.</p>
</li>
</ul>
<p>DVC $\in$ NP： certificate $O(ke)=O((n+e)^2)$</p>
<p><strong>DCLIQUE $\le_{P}$ DVC</strong>：</p>
<p>Start with the graph $G=(V,E)$ input of the DCLIQUE problem.</p>
<p>Construct the complement graph $\bar G=(V,\bar E)$ by only considering the missing edges from $E$.</p>
<p>The reduction takes polynomial time: A clique of size $k$ in $G$ $⇌$ a vertex cover of size $|V|-k$ in $\bar G$</p>
<p><strong>Approximate Vertex Cover</strong>：</p>
<p>Approx-Vertex-Cover is a 2-approximation algorithm, i.e., $\frac{|C|}{|C^\star|}\le 2$.</p>
<p>Proof:</p>
<p>The set of edges picked by this algorithm is a maximal-maching $M$: no two edges touch each other.</p>
<p>The potimal vertex cover $C^\star$ must cover every edge in $M$, so $|C^\star|\ge |M|$. The algorithm returns a vertex set of size $2|M|$. Therefore, we have</p>
<p><script type="math/tex">|C|=2|M|\le 2|C^\star|</script>.</p>
<p><img src="https://s2.loli.net/2023/01/01/8pS9IbAPfWXDOgt.png" alt=""></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Discrete Math</tag>
      </tags>
  </entry>
  <entry>
    <title>CS211 数字逻辑 (H) 项目设计报告 Flappy Bird</title>
    <url>/2022/11/06/CS211_%E9%A1%B9%E7%9B%AE%E8%AE%BE%E8%AE%A1%E6%8A%A5%E5%91%8A_Flappy_Bird/</url>
    <content><![CDATA[<p><img src="https://www.android-digital.de/wp-content/uploads/flappy_bird-600x337.jpg" alt=""></p>
<h2 id="Part-I-团队成员"><a href="#Part-I-团队成员" class="headerlink" title="Part I. 团队成员"></a>Part I. <del>团队</del>成员</h2><div class="table-container">
<table>
<thead>
<tr>
<th>姓名</th>
<th>学号</th>
<th><del>贡献率</del></th>
</tr>
</thead>
<tbody>
<tr>
<td>咕桃</td>
<td>-</td>
<td><del>100%</del></td>
</tr>
</tbody>
</table>
</div>
<h2 id="Part-II-系统功能"><a href="#Part-II-系统功能" class="headerlink" title="Part II. 系统功能"></a>Part II. 系统功能</h2><p>​        在本项目中，本人基于EGO1开发板的VGA模块，使用<code>Verilog</code>语言设计了一个模仿<strong>Flappy Bird</strong>的小游戏项目。项目中，玩家可以通过按键控制小鸟向上跳动以通过水管的间隙来得分。项目实现了基本的用户交互界面、开始、暂停、重置等游戏功能，也添加了最高记录、调整难度、开发者模式等新特性，在保证高还原度的前提下，提供了更舒适的玩家体验。</p>
<h2 id="Part-III-系统设计"><a href="#Part-III-系统设计" class="headerlink" title="Part III. 系统设计"></a>Part III. 系统设计</h2><ol>
<li><p><strong>工作原理</strong></p>
<ul>
<li><p><strong>(a)</strong> 连接显示器后按下总控重置按钮，显示器显示640*480游戏画面，此时小鸟静止，水管在右侧“屏外”。</p>
</li>
<li><p><strong>(b)</strong> 通过拨码开关选择难度后游戏开始，小鸟将在模拟重力和跳跃键下开始运动，同时随机高度的水管从右侧屏幕生成并向左移动，跳跃键支持短按短跳、长按连飞功能。</p>
</li>
<li><p><strong>(c)</strong> 玩家操作小鸟通过水管后将获得一分，右侧四位数码管显示当前得分，左侧四位数码管显示最高记录，当得分突破最高记录时最高记录会自动更新。</p>
</li>
<li><strong>(d)</strong> 当操作不当，小鸟与水管或地面碰撞时游戏结束，小鸟以匀速落地，水管停止运动，跳跃键和难度调整键功能被禁用，游戏结束指示LED亮起。</li>
<li><strong>(e)</strong> 游戏结束后将难度调整键归零，按下restart按钮选择难度后重新开始游戏。在EGO1开发板未断开连接时，高分榜将被保留。游戏过程中将难度调整键归零可以暂停游戏。</li>
<li><strong>(f)</strong> 最右侧小拨码开关设置为开发者模式，用于观察游戏难度和调试特性，开启后开发者模式指示LED亮起，小鸟将从水管层被剥离到更高维度，从水管侧面飞过而不会因撞击导致游戏结束。</li>
<li><strong>(g)</strong> 游戏同时支持640*480和800*600两种分辨率的热切换，并且会适配不同分辨率生成适宜难度的地图。</li>
</ul>
</li>
<li><p><strong>系统工作流程图</strong></p>
<p><img src="https://s2.loli.net/2022/08/04/tRlj5IZaWAVKTJ3.png" alt="System work flow chart" style="zoom: 67%;" /></p>
</li>
<li><p><strong>系统框图</strong></p>
<p><img src="https://s2.loli.net/2022/08/04/eb5SPRATqdhuMEf.png" alt="System frame diagram" style="zoom: 80%;" /></p>
</li>
<li><p><strong>端口描述</strong></p>
</li>
</ol>
<div class="table-container">
<table>
<thead>
<tr>
<th>端口</th>
<th>方向</th>
<th>位宽</th>
<th>功能简介</th>
</tr>
</thead>
<tbody>
<tr>
<td>R</td>
<td>OUT</td>
<td>4</td>
<td>VGA红色信号</td>
</tr>
<tr>
<td>G</td>
<td>OUT</td>
<td>4</td>
<td>VGA绿色信号</td>
</tr>
<tr>
<td>B</td>
<td>OUT</td>
<td>4</td>
<td>VGA蓝色信号</td>
</tr>
<tr>
<td>hsync</td>
<td>OUT</td>
<td>1</td>
<td>横向同步信号</td>
</tr>
<tr>
<td>vsync</td>
<td>OUT</td>
<td>1</td>
<td>纵向同步信号</td>
</tr>
<tr>
<td>cho</td>
<td>OUT</td>
<td>8</td>
<td>亮起数码管序列</td>
</tr>
<tr>
<td>lseg</td>
<td>OUT</td>
<td>8</td>
<td>左侧数码管示数</td>
</tr>
<tr>
<td>rseg</td>
<td>OUT</td>
<td>8</td>
<td>右侧数码管示数</td>
</tr>
<tr>
<td>overled</td>
<td>OUT</td>
<td>1</td>
<td>游戏结束LED</td>
</tr>
<tr>
<td>stateled</td>
<td>OUT</td>
<td>1</td>
<td>分辨率模式LED</td>
</tr>
<tr>
<td>cheatled</td>
<td>OUT</td>
<td>1</td>
<td>开发者模式LED</td>
</tr>
<tr>
<td>rst</td>
<td>IN</td>
<td>1</td>
<td>刷新显示器</td>
</tr>
<tr>
<td>restart</td>
<td>IN</td>
<td>1</td>
<td>重开游戏</td>
</tr>
<tr>
<td>flap</td>
<td>IN</td>
<td>1</td>
<td>跳跃键</td>
</tr>
<tr>
<td>reso</td>
<td>IN</td>
<td>1</td>
<td>分辨率开关</td>
</tr>
<tr>
<td>cheatmode</td>
<td>IN</td>
<td>1</td>
<td>开发者模式开关</td>
</tr>
<tr>
<td>clk</td>
<td>IN</td>
<td>1</td>
<td>默认时钟</td>
</tr>
<tr>
<td>sw</td>
<td>IN</td>
<td>3</td>
<td>难度开关(0难度暂停)</td>
</tr>
</tbody>
</table>
</div>
<ol>
<li><p><strong>子模块设计</strong></p>
<p>本项目分为11个子模块，各模块之间的关系如下图所示。</p>
<p><img src="https://s2.loli.net/2022/08/04/j7Kgtlx3wiH1PD9.png" alt="submodule design" style="zoom: 33%;" /></p>
<ul>
<li><p><strong>(a) Main module</strong></p>
<p>​        总控模块，集成各个子模块，获取时钟信号、数码管信号、坐标信息，同时负责VGA显示信号的输出、游戏难度选择、游戏结束判断、重启游戏、切换分辨率等功能，是所有输入端口和输出端口的集成模块。</p>
</li>
<li><p><strong>(b) Clock divider &amp; clock wizard module</strong></p>
<p>​        分频模块，手动实现了游戏时钟分频，将EGO1开发板100MHz的时钟频率降低两百万倍得到50帧的游戏时钟频率，手动分频器的原理为：利用计数器t%2000000=0的条件输出1ns的高电平游戏时钟并归零计数器；利用clock wizard IP核实现了两种分辨率下VGA同步时钟分频，640*480对应25.175MHz，800*600对应40MHz。</p>
</li>
<li><p><strong>(c) Random generator module</strong></p>
<p>​        本随机数生成器引用自@nguthrie在<code>stackoverflow</code>社区中的回答： <a href="https://stackoverflow.com/questions/14497877"> how to implement a pseudo hardware random number generator?</a></p>
</li>
<li><p><strong>(d) Segment &amp; Converter module</strong></p>
<p>​        数码管显示与转换器模块，转换器模块负责对输入的十进制得分转换为BCD码形式，进而根据参数表输出数码管序列；数码管显示模块负责从转换器模块读取序列，并通过分频显示的方式将最高分和目前得分显示于八位八段数码管。</p>
</li>
<li><p><strong>(e) Bird position module</strong></p>
<p>​        鸟坐标计算模块负责对输入的当前纵坐标和跳跃键信息进行处理并得到下一瞬间的纵坐标。当跳跃键按下时，鸟被给予一个向上初速度，否则鸟将受到向下的模拟重力加速度。计算坐标时为了流畅性，使用了右移位运算一定程度上模拟了小数，较好地模拟了重力。</p>
</li>
<li><p><strong>(f) Display module (is_bird &amp; is_tube module)</strong></p>
<p>​        显示模块负责对输入的查询坐标和各元素位置信息进行处理，并输出查询坐标对应的颜色信息。同一坐标的显示优先级：鸟&gt;水管&gt;背景，<code>is_bird</code>和<code>is_tube</code>模块对输入坐标传出其与最左上角像素的相对坐标，并在显示模块中利用<code>Block Memory Generator</code> IP核取出对应的颜色值，决定优先级后输出当前查询位置的颜色。</p>
</li>
<li><p><strong>(g) Block Memory Generator</strong></p>
<p>本项目使用此IP核连接<code>bird.coe</code>, <code>tube_body.coe</code>, <code>tube_head.coe</code>, <code>bg.coe</code>，进行鸟、水管、背景的图像显示，具体原理在帮助文档中已有详细介绍，此处不再赘述。</p>
</li>
</ul>
</li>
<li><p><strong>模拟结果(波形图)</strong></p>
<p>由于有些模块有一吨的输入输出端口，过于复杂不便模拟调试，且在开发过程中并未进行模拟过程，因此部分模块的模拟结果并未在此展示<del>(实际上整个过程非常自信，没有用一次模拟)</del></p>
<ul>
<li><p><strong>(a) Converter simulation</strong></p>
<p><img src="https://s2.loli.net/2022/08/04/l67RJGQOLdvVicT.png" alt="counter_sim"></p>
</li>
<li><p><strong>(b) Random generator simulation</strong></p>
<p><img src="https://s2.loli.net/2022/08/04/5MlnNjHiLtDUqkT.png" alt="random_generator_sim"></p>
</li>
<li><p><strong>(c) Clock divider module</strong> (Mod factor shrunk for better simulation)</p>
<p><img src="https://s2.loli.net/2022/08/04/2XM1CEdf5PeFqo4.png" alt="clk_div_sim"></p>
</li>
<li><p><strong>(d) Segment module</strong> (Higher shifting frequency for better simulation)</p>
<p><img src="https://s2.loli.net/2022/08/04/oAEKzSFUw5aDCBd.png" alt="seg_sim"></p>
</li>
</ul>
</li>
</ol>
<h2 id="Part-IV-开发中遇到的困难与解决方案"><a href="#Part-IV-开发中遇到的困难与解决方案" class="headerlink" title="Part IV. 开发中遇到的困难与解决方案"></a>Part IV. 开发中遇到的困难与解决方案</h2><h3 id="Question1-如何显示精美的图像而非矩形正方形？"><a href="#Question1-如何显示精美的图像而非矩形正方形？" class="headerlink" title="Question1.  如何显示精美的图像而非矩形正方形？"></a><strong>Question1</strong>.  如何显示精美的图像而非矩形正方形？</h3><p><strong>Reason</strong>: 项目开发第一步，保护自己的双眼，精美的界面能让开发过程更舒适，因此我开发第一步就实现了图像显示功能。</p>
<p><strong>Solution</strong>: 通过阅读<del>隔壁边缘检测Project的</del>帮助文档和向同学寻求帮助，获悉Block memory generator的用法。顺带一提，我刚实现图像显示的时候屏幕上是黑暗风的火烧云界面，用一条RGB为<code>12&#39;hfff</code>的 检测条发现竟然是渐变色。这种现象是因为屏外未显示的部分被意外赋上了非零值，显示器把它们当作噪声减掉了，导致屏内的正常颜色发生了色差偏移。</p>
<p><img src="https://s2.loli.net/2022/08/04/lVepHaoWziFyrcq.jpg" alt="A4E63FBDF6897343FF0B9C709AD6EBE5.jpg" style="zoom: 25%;" /></p>
<h3 id="Question2-如何生成随机高度的水管？"><a href="#Question2-如何生成随机高度的水管？" class="headerlink" title="Question2.  如何生成随机高度的水管？"></a><strong>Question2</strong>.  如何生成随机高度的水管？</h3><p><strong>Reason</strong>: 给游戏加点难度。</p>
<p><strong>Solution</strong>: 从 _stackoverflow_ 社区寻求帮助,  找到的五位伪随机数生成器对我的项目来说就够用了。</p>
<h3 id="Question3-怎么针对不同分辨率创建对应的地图？"><a href="#Question3-怎么针对不同分辨率创建对应的地图？" class="headerlink" title="Question3.  怎么针对不同分辨率创建对应的地图？"></a><strong>Question3</strong>.  怎么针对不同分辨率创建对应的地图？</h3><p><strong>Reason</strong>: 开发时了解到有同学在调整到高分辨率时碰到了麻烦，因此我防患于未然。</p>
<p><strong>Solution</strong>: 用当前分辨率当作参数在模块间传递，用于代替常数来生成地图，保证了管子的高度和管子间的距离会自适应不同分辨率，也为热切换分辨率打好了基础。</p>
<h3 id="Question4-怎么模拟重力？"><a href="#Question4-怎么模拟重力？" class="headerlink" title="Question4.  怎么模拟重力？"></a><strong>Question4</strong>.  怎么模拟重力？</h3><p><strong>Reason</strong>: 为了让跳跃过程更丝滑。</p>
<p><strong>Solution</strong>: 使用右移位运算来模拟小数运算，引入了速度和加速度来计算鸟的坐标，并以50Hz的频率更新坐标。</p>
<h3 id="Question5-如何判定游戏结束？-如何判定各元素显示优先级？"><a href="#Question5-如何判定游戏结束？-如何判定各元素显示优先级？" class="headerlink" title="Question5.  如何判定游戏结束？ / 如何判定各元素显示优先级？"></a><strong>Question5</strong>.  如何判定游戏结束？ / 如何判定各元素显示优先级？</h3><p><strong>Reason</strong>: 为了优化视觉体验，鸟在创上水管的时候会徐徐落地，此时可能出现鸟和水管有重合的情况，需要判定此时该显示哪个元素。</p>
<p><strong>Solution</strong>: 鸟&gt;水管&gt;背景, 有些鸟的像素是透明的，这些像素在显示的时候就该显示鸟下面的图层信息。同时，利用显示逻辑可以很轻松的判定游戏结束：当一个像素同时要显示鸟和水管的时候，那就说明鸟创上水管了，游戏结束。</p>
<p><img src="https://s2.loli.net/2022/08/05/molDeZp2Fgdb6hP.jpg" alt="255B0D0A848EB7FA08864668093A2855.jpg" style="zoom:50%;" /></p>
<h2 id="Part-V-总结与感想"><a href="#Part-V-总结与感想" class="headerlink" title="Part V. 总结与感想"></a>Part V. 总结与感想</h2><p>​        本次项目我利用本学期所学知识，基于EGO1开发板使用Verilog复现了经典小游戏Flappy Bird，项目中熟悉了VGA显示原理、数码管显示原理、状态机的转移和设计、简单游戏逻辑设计、硬件语言开发流程等内容。</p>
<p>​        特别感谢xjc等同学提供了若干踩坑的经验，开发过程中预防了很多问题，整个开发过程实际用时不到24h，不过我在开发过程中还是遇到了花式的问题和困难，但最终也都得到了不错的解决。同时我也为其他同学提供了多次帮助，例如屏外噪声、图像导入、分辨率切换、游戏逻辑等问题。</p>
<p>​        项目中最大的收获是模块化设计的思想，本次开发前我先在纸上设计好了各个模块的大致功能和模块间互相调用的关系，在实际开发时按部就班达到了很高的效率，比较java项目边写边加的模式更为从容有条理。</p>
<p>​        实际上，本次项目由于开发周期短(同期的数据库项目对时间占用较大)还存在较多的不足，在本学期课程结束后我会将GitHub上的项目同步并继续开发，优化界面、调整重力等参数，因为我对本项目抱有较大的兴趣，所以我会继续做下去。</p>
<p>​        报告的最后，非常感谢为本学期课程和项目提供指导帮助的老师、助教和图班优秀的同学们，让我从一个对硬件一无所知甚至抱有胆怯的小白变成了对硬件编程、电路设计感兴趣的人，受益匪浅。  </p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Digital Logic</tag>
      </tags>
  </entry>
  <entry>
    <title>CS215 离散数学 半期复习</title>
    <url>/2023/01/10/CS215_Midterm_Review/</url>
    <content><![CDATA[<h1 id="Outline"><a href="#Outline" class="headerlink" title="Outline"></a>Outline</h1><ol>
<li><p>Propositional Logic</p>
</li>
<li><p>Predicate Logic</p>
</li>
<li><p>Mathematical Proofs</p>
</li>
<li><p>Sets</p>
</li>
<li><p>Functions</p>
</li>
<li><p>Complexity  of Algorithms</p>
</li>
<li><p>Number Theory</p>
<p>Groups, Rings and Fields</p>
</li>
<li><p>Cryptography</p>
</li>
<li><p>Mathematical Induction</p>
</li>
<li><p>Recursion</p>
</li>
</ol>
<h1 id="Chapter-1-Propositional-Logic"><a href="#Chapter-1-Propositional-Logic" class="headerlink" title="Chapter 1 - Propositional Logic"></a>Chapter 1 - Propositional Logic</h1><p><strong>Logical connectives</strong>：</p>
<p>$\neg p$，$p\vee q$，$p\wedge q$，$p\oplus q$，$p→q$，$p\leftrightarrow q$</p>
<p><strong>Logical equivalence</strong>：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>Name</th>
<th>Content</th>
</tr>
</thead>
<tbody>
<tr>
<td>Identity laws</td>
<td>$p \vee T \equiv p $，$ p \wedge F \equiv p$</td>
</tr>
<tr>
<td>Domination laws</td>
<td>$p \wedge T \equiv T$，$p \vee F \equiv F $</td>
</tr>
<tr>
<td>Idempotent laws</td>
<td>$p \wedge p \equiv p$ ，$p \vee p \equiv p$</td>
</tr>
<tr>
<td>Double negation laws</td>
<td>$\neg\neg p\equiv p$</td>
</tr>
<tr>
<td>Commutative laws</td>
<td>$p \wedge q \equiv q \wedge p$，$ p \vee q \equiv q \vee p$</td>
</tr>
<tr>
<td>Associative laws</td>
<td>$(p \wedge q) \wedge r \equiv p \wedge (q \wedge r) $，$ (p \vee q) \vee r \equiv p \vee (q \vee r)$</td>
</tr>
<tr>
<td>Distributive laws</td>
<td>$(p \wedge q) \vee r \equiv (p\vee r) \wedge (q \wedge r) $，$ (p \vee q) \wedge r \equiv (p\wedge r) \vee (q\wedge r)$</td>
</tr>
<tr>
<td>De Morgan’s laws</td>
<td>$\neg(p\vee q) \equiv \neg p \wedge \neg q$，$\neg(p \wedge q)\equiv \neg p \vee \neg q$</td>
</tr>
<tr>
<td>Absorption laws</td>
<td>$p\wedge(p\vee q) \equiv p$，$p\vee(p\wedge q)\equiv p$</td>
</tr>
<tr>
<td>Negation laws</td>
<td>$p\vee\neg p \equiv F$，$p\wedge\neg p \equiv T$</td>
</tr>
<tr>
<td>Useful law</td>
<td>$p→q \equiv \neg p \wedge q$</td>
</tr>
</tbody>
</table>
</div>
<p>e.g. Show that $p → q ≡ ¬q → ¬p $ .</p>
<p>$\begin{aligned}<br>\neg q \rightarrow \neg p &amp; \equiv \neg(\neg q) \vee(\neg p) &amp; &amp; \text { Useful } \\<br>&amp; \equiv q \vee(\neg p) &amp; &amp; \text { Double negation } \\<br>&amp; \equiv(\neg p) \vee q &amp; &amp; \text { Communtative } \\<br>&amp; \equiv p \rightarrow q &amp; &amp; \text { Useful }<br>\end{aligned}$</p>
<p><strong>Rules of Inference</strong>：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">modus ponens</th>
<th style="text-align:center">modus tollens</th>
<th style="text-align:center">hypothetical syllogism</th>
<th style="text-align:center">disjunctive syllogism</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">$\begin{array}{r}p \rightarrow q \\p \\\hline \therefore q\end{array}$</td>
<td style="text-align:center">$\begin{array}{r}p \rightarrow q \\\ \neg q\\\hline \therefore \neg p\end{array}$</td>
<td style="text-align:center">$\begin{array}{r}p \rightarrow q \\q \rightarrow r \\\hline \therefore p \rightarrow r\end{array}$</td>
<td style="text-align:center">$\begin{array}{r}p \vee q \\\neg p\\\hline \therefore q\end{array}$</td>
</tr>
<tr>
<td style="text-align:center"><strong>Addition</strong></td>
<td style="text-align:center"><strong>Simplification</strong></td>
<td style="text-align:center"><strong>Conjunction</strong></td>
<td style="text-align:center"><strong>Resolution</strong></td>
</tr>
<tr>
<td style="text-align:center">$\begin{array}{r}p\\\hline\therefore p\vee q\end{array}$</td>
<td style="text-align:center">$\begin{array}{r}p\wedge q\\\hline\therefore q\end{array}$</td>
<td style="text-align:center">$\begin{array}{r}p\\q\\\hline\therefore p\wedge q\end{array}$</td>
<td style="text-align:center">$\begin{array}{r}\neg p\vee r\\p\vee q\\\hline\therefore q\vee r\end{array}$</td>
</tr>
</tbody>
</table>
</div>
<h1 id="Chapter-2-Predicate-Logic"><a href="#Chapter-2-Predicate-Logic" class="headerlink" title="Chapter 2 - Predicate Logic"></a>Chapter 2 - Predicate Logic</h1><p><strong>Truth set</strong>：$\{(x_1,x_2,\cdots,x_n)\in D|P(x_1,x_2,\cdots,x_n)=T\}$</p>
<p><strong>Quantifier</strong>: $\forall$(Universal)， $\exists$(Existential)</p>
<p><strong>De Morgan laws for quantifiers</strong>：</p>
<p>$\neg\exists P(x)\equiv \forall\neg P(x)$，$\neg\forall P(x)\equiv\exists\neg P(x)$</p>
<p><strong>Order of Quantifiers</strong>：</p>
<ul>
<li>matters if quantifiers are of <strong>different type</strong></li>
<li>does no matter if quantifiers are of the <strong>same type</strong></li>
</ul>
<p><strong>Negating Nested Quantifiers</strong>：</p>
<p>Swap every quantifier, and negation the inner proposition.</p>
<p><strong>Rules of Inference</strong>：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>Universal Instantiation</th>
<th>Universal Generalization</th>
<th>Existential Instantiation</th>
<th>Existential Generalization</th>
</tr>
</thead>
<tbody>
<tr>
<td>$\begin{array}{r}\forall xP(x)\\\hline\therefore P(c)\end{array}$</td>
<td>$\begin{array}{r}P(c)\text{ for an arbitrary }c\\\hline\therefore \forall x P(x)\end{array}$</td>
<td>$\begin{array}{r}\exists x P(x)\\\hline\therefore P(c)\text{ for some element }c\end{array}$</td>
<td>$\begin{array}{r}P(c)\text{ for some element }c\\\hline\therefore \exists x P(x)\end{array}$</td>
</tr>
</tbody>
</table>
</div>
<h1 id="Chapter-3-Mathematical-Proofs"><a href="#Chapter-3-Mathematical-Proofs" class="headerlink" title="Chapter 3 - Mathematical Proofs"></a>Chapter 3 - Mathematical Proofs</h1><p><strong>Methods of Proving Theorems</strong>：</p>
<ul>
<li>direct proof<ul>
<li>$p → q$ is proved by showing that if $p$ is true then $q$ follows</li>
</ul>
</li>
<li>proof by contrapositive<ul>
<li>show the contrapositive $¬q → ¬p$</li>
</ul>
</li>
<li>proof by contradiction<ul>
<li>show that $(p ∧ ¬q)$ contradicts the assumptions</li>
</ul>
</li>
<li>proof by cases<ul>
<li>give proofs for all possible cases</li>
</ul>
</li>
<li><p>proof of equivalence</p>
<ul>
<li>$p ↔ q$ is replaced with $(p → q) ∧ (q → p)$</li>
</ul>
</li>
<li><p>vacuous proof</p>
<ul>
<li>$p→q$ is always true if $p$ (the hypothesis) is always false</li>
</ul>
</li>
<li>trivial proof<ul>
<li>$p→q$ is always true if $q$ (the conclusion) is always true</li>
</ul>
</li>
</ul>
<p><strong>Proofs with Quantifiers</strong>：</p>
<ul>
<li><p>Universal</p>
<ul>
<li><p>prove the property holds for all examples</p>
<p>– proof by cases to divide the proof into different parts</p>
</li>
<li><p>counterexamples</p>
<p>– disprove universal statement</p>
</li>
</ul>
</li>
<li><p>Existential</p>
<ul>
<li><p>constructive</p>
<p>– find a specific example to show the statement holds</p>
</li>
<li><p>nonconstructive</p>
<p>– proof by contradiction</p>
</li>
</ul>
</li>
</ul>
<h1 id="Chapter-4-Sets"><a href="#Chapter-4-Sets" class="headerlink" title="Chapter 4 - Sets"></a>Chapter 4 - Sets</h1><p><strong>Important sets</strong>：</p>
<p>$\mathbf {N, Z, Z^+, Q, R, C}$</p>
<p><strong>Russell’s Paradox</strong>：</p>
<p>Let $S=\{x|x\notin x\}$, is a set of sets that are not member of themselves. Is $S\in S$ or $S\notin S$?</p>
<p><strong>Set Operations</strong>：</p>
<p>$A\times B, A\cup B,A\cap B,\bar{A},A-B$</p>
<p><strong>Cardinality</strong>：</p>
<p>The sets $A$ and $B$ have the same cardinality if there is a <strong>bijection</strong> between elements in $A$ and $B$.</p>
<p>$|A|\le|B|$ if there is an <strong>injection</strong> from $A$ to $B$, if they have different cardinalities then $|A|&lt;|B|$.</p>
<p><strong>Countable Sets</strong>：</p>
<p>A set that is either <strong>finite</strong> or <strong>has the same cardinality as the set of</strong> $\mathbf Z^+$ is called countable.</p>
<p><strong>Cantor diagonalization argument</strong>：</p>
<p>“Every part is different from some of the previous ones.”</p>
<p><strong>Schröder-Bernstein Theorem</strong>：</p>
<p>$|A|\le |B|$, $|B|\le |A|$, then $|A|=|B|$.</p>
<p><strong>Cantor’s Theorem</strong>：</p>
<p>If $S$ is a set, then $|S| &lt; |\mathcal P(S)|$ .</p>
<h1 id="Chapter-5-Functions"><a href="#Chapter-5-Functions" class="headerlink" title="Chapter 5 - Functions"></a>Chapter 5 - Functions</h1><p><strong>Functions</strong>：</p>
<p> A function from $A$ to $B$, denoted by $f : A → B$, is an assignment of exactly one element of $B$ to each element of $A$. </p>
<p>domain, codomain, image, preimage, range.</p>
<p>Injective (One-to-one) Function</p>
<p>Surjective (Onto) Function</p>
<p>Bijective (One-to-one Correspondence) Function</p>
<p>Invert Function (Exists IFF bijection)</p>
<p>Composition of Functions</p>
<p><strong>Sequence</strong>：</p>
<p>A sequence is a function from a subset of the set of integers.</p>
<p>arithmetic progression, geometric progression</p>
<p><strong>Some Useful Summation Formulas</strong>：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Sum</th>
<th style="text-align:center">Closed Form</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">$\sum\limits_{k=0}^{n}ar^k(r\ne0,1)$</td>
<td style="text-align:center">$\frac{ar^{n+1}-a}{r-1}$</td>
</tr>
<tr>
<td style="text-align:center">$\sum\limits_{k=1}^{n}k$</td>
<td style="text-align:center">$\frac{n(n+1)}{2}$</td>
</tr>
<tr>
<td style="text-align:center">$\sum\limits_{k=1}^{n}k^2$</td>
<td style="text-align:center">$\frac{n(n+1)(2n+1)}{6}$</td>
</tr>
<tr>
<td style="text-align:center">$\sum\limits_{k=1}^{n}k^3$</td>
<td style="text-align:center">$\frac{n^2(n+1)^2}{4}$</td>
</tr>
<tr>
<td style="text-align:center">$\sum\limits_{k=0}^{\infty}x^k,-1&lt;x&lt;1$</td>
<td style="text-align:center">$\frac{1}{1-x}$</td>
</tr>
<tr>
<td style="text-align:center">$\sum\limits_{k=1}^{\infty}kx^{k-1},-1&lt;x&lt;1$</td>
<td style="text-align:center">$\frac{1}{(1-x)^2}$</td>
</tr>
</tbody>
</table>
</div>
<h1 id="Chapter-6-Complexity-of-Algorithms"><a href="#Chapter-6-Complexity-of-Algorithms" class="headerlink" title="Chapter 6 - Complexity  of Algorithms"></a>Chapter 6 - Complexity  of Algorithms</h1><p><strong>Big-O Notation</strong>：</p>
<p>$f(n)=O(g(n))$, if $\exists C&gt;0,x_0&gt;0$ s.t. $\forall n&gt;x_0,\ |f(n)|\le C|g(n)|$</p>
<p><strong>Combinations of Functions</strong>：</p>
<p>$(f_1+f_2)(x)=O(\max(|g_1(x)|,|g_2(x)|))$</p>
<p>$(f_1f_2)(x)=O(g_1(x)g_2(x))$</p>
<p><strong>Big-Omega Notation</strong>：</p>
<p>$f(n)=\Omega(g(n))$, if $\exists C&gt;0,x_0&gt;0$ s.t. $\forall n&gt;x_0, |f(n)|\ge C|g(n)|$</p>
<p>$f(n)=O(g(n))$ IFF $g(n)=\Omega(f(n))$</p>
<p><strong>Big-Theta Notation</strong>：</p>
<p>$f(n)=\Theta(g(n))$, if $f(n)=O(g(n))$ and $g(n)=O(f(n))$</p>
<p><strong>The Input Size of Problems</strong>：</p>
<p>The input size of a problem is the minimum number of bits ($\{0,1\}$) needed to encode the input of the problem.</p>
<p><strong>Same type functions</strong>：</p>
<p>Two positive functions $f(n)$ and $g(n)$ are of the <strong>same type</strong> if</p>
<script type="math/tex; mode=display">c_1g(n^{a_1})^{b_1}\le f(n)\le c_2g(n^{a_2})^{b_2}</script><p>for all large $n$, where $a_1,b_1,c_1,a_2,b_2,c_2$ are some positive constants.</p>
<p>All <strong>polynomials</strong> are of the same type, but <strong>polynomials</strong> and <strong>exponentials</strong> are of different types.</p>
<p><strong>Polynomial-Time Algorithms</strong>：</p>
<p>An algorithm is polynomial-time if its running time is $O(n^k)$, where $k$ is a constant independent of $n$, and $n$ is the <strong>input size</strong> of the problem that the algorithm solves.</p>
<p><strong>The class P</strong>：</p>
<p>The class P consists of all <strong>decision problems</strong> that are solvable in polynomial time. That is, there exists an algorithm that will <strong>decide in polynomial time</strong> if any given input is a yes-input or a no-input.</p>
<p><strong>The class NP</strong>：</p>
<p>The class NP consists of all <strong>decision problems</strong> such that, for each yes-input, there exists a <strong>certificate</strong> which allows one to <strong>verify in polynomial time</strong> that the input is indeed a yes-input.</p>
<p><strong>Reduction</strong>：</p>
<p>Problem $Q$ can be reduced to $Q’$ if every instance of $Q$ can be “rephrased” to an instance of $Q’$.</p>
<p>“$Q$ is no harder to solve than $Q’$”</p>
<p><strong>Polynomial-Time Reductions</strong>：</p>
<ol>
<li><p>$f$ transforms an input $x$ for $L_1$ into an input $f(x)$ for $L_2$</p>
</li>
<li><p>$f$ is computable in polynomial time in size($x$)</p>
</li>
</ol>
<p>If such an $f$ exists, we say that $L_1$ is <strong>polynomial-time reducible</strong> to $L_2$, and write $L_1 \le_P L_2$.</p>
<p>“$L_1$ is no harder than $L_2$”</p>
<p><strong>Polynomial-Time Reduction $f : L_1 → L_2$</strong>：</p>
<p>If $L_1\le_P L_2$ and $L_2\in P$, then $L_1\in P$.</p>
<p>If $L_1\le_P L_2$, $L_2\le_P L_3$, then $L_1\le_P L_3$.</p>
<p><strong>The class NP-Complete</strong>：</p>
<ol>
<li>$L\in NP$</li>
<li>$\forall L’\in NP$, $L’\le_P L$</li>
</ol>
<p>$NPC$ consists of all the hardest problems in $NP$.</p>
<p><strong>NP-Completeness and Its Properties</strong>：</p>
<p>Let $L$ be any problem in $NPC$.</p>
<ol>
<li><p>If there is a polynomial-time algorithm for $L$, then there is a polynomial-time algorithm for every $L’\in NP$</p>
</li>
<li><p>If there is no polynomial-time algorithm for $L$, then there is no polynomial-time algorithm for every $L’\in NPC$</p>
</li>
</ol>
<p>Either all NP-Complete problems are polynomial time solvable, or all NP-Complete problems are not polynomial time solvable.</p>
<h1 id="Chapter-7-Number-Theory"><a href="#Chapter-7-Number-Theory" class="headerlink" title="Chapter 7 - Number Theory"></a>Chapter 7 - Number Theory</h1><p><strong>Properties of Divisibility</strong>：</p>
<ul>
<li>if $a|b$ and $a|c$, then $a|(b+c)$</li>
<li>if $a|b$ then $a|bc$ for all integers $c$</li>
<li>if $a|b$ and $b|c$, then $a|c$</li>
</ul>
<p><strong>Congruence Relation</strong>：</p>
<p>$a\equiv b\mod m$ IFF $m|(a-b)$</p>
<p>$a\equiv b\mod m$ IFF $a\mod m = b\mod m$</p>
<p>If $a\equiv b \mod m$ and $c\equiv d\mod m$, then $a+c\equiv b+d \mod m$ and $ac\equiv bd\mod m$</p>
<p>$(a+b)\mod m=((a\mod m)+(b\mod m))\mod m$</p>
<p>$ab\mod m=((a\mod m)(b\mod m))\mod m$</p>
<p><strong>Arithmetic Modulo m</strong>：</p>
<p>$(\mathbf Z_m,+_m,\cdot_m)$</p>
<ul>
<li><p>Closure: if $a,b\in \mathbf Z_m$, then $a+_mb,a\cdot_mb\in \mathbf Z_m$</p>
</li>
<li><p>Associativity: if $a,b,c\in \mathbf Z_m$, then</p>
<p>$(a+_mb)+_mc=a+_m(b+_mc)$</p>
<p>$(a\cdot_mb)\cdot_mc=a\cdot_m(b\cdot_mc)$</p>
</li>
<li><p>Identity elements: $a+_m0=a$ and $a\cdot_m1=a$</p>
</li>
<li><p>Additive inverses: if $a\ne0$ and $a\in \mathbf Z_m$, then $m-a$ is an additive inverse of $a$ modulo $m$</p>
</li>
<li><p>Commutativity: if $a,b\in \mathbf Z_m$, then $a+_mb=b+_ma$</p>
</li>
<li><p>Distributivity: if $a,b,c\in \mathbf Z_m$, then</p>
<p>$a\cdot_m(b+_mc)=(a\cdot_mb)+_m(a\cdot_mc)$</p>
<p>$(a+_mb)\cdot_mc=(a\cdot_mc)+_m(b\cdot_mc)$</p>
</li>
</ul>
<p><strong>Group</strong>：</p>
<p>$(G,\star)$</p>
<ul>
<li>Closure</li>
<li>Associativity</li>
<li>Identity element</li>
<li>Inverse</li>
</ul>
<p>e.g. Permutation Group：$(P_n,\circ )$</p>
<p><strong>Abelian Group</strong>：</p>
<p>$(G,\star)$</p>
<ul>
<li>Group</li>
<li>Commutativity</li>
</ul>
<p><strong>Ring</strong>：</p>
<p>$(R,+,\times)$</p>
<ul>
<li>Abelian Group $(R,+)$</li>
<li>Associativity of $\times$</li>
<li>Distributivity</li>
</ul>
<p><strong>Commutative Ring</strong>：</p>
<p>$(R,+,\times)$</p>
<ul>
<li>Ring</li>
<li><p>Commutativity of $\times$</p>
<p><strong>Integral Domain</strong>：</p>
</li>
</ul>
<p>$(R,+,\times)$</p>
<ul>
<li>Commutative Ring</li>
<li>Identity element of $\times$</li>
<li>Nonzero product</li>
</ul>
<p><strong>Field</strong>：</p>
<p>$(\mathbb F,+,\times)$</p>
<ul>
<li>Integral Domain</li>
<li>Inverse of $\times$</li>
</ul>
<p><strong>Prime Field and Characteristic</strong>：</p>
<p>Consider a finite field $\mathbb F$, define</p>
<p>$S_r=1+1+\cdots+1$ as sum of $r$ 1’s for a positive integer $r$.</p>
<ul>
<li><p>Let $p$ be the smallest positive number with $S_p=0$.</p>
<p>If such a $p$ exists, it must be prime.</p>
</li>
<li><p>If $p=a\cdot b$ with $0&lt;a,b&lt;p$, then by distributivity, $0=S_p=S_a\cdot S_b$. Then one of $S_a,\ S_b$ must be 0, contradicting the minimality of $p$.</p>
</li>
</ul>
<p>This $p$ is called the characteristic of the field $\mathbb F$.</p>
<p>The subset $\{0,S_1,S_2,\cdots,S_{p-1}\}$ is isomorphic to $\mathbb F$(prime field).</p>
<p>Any finite field $\mathbb F$ is a finite dimensional vector space over $\mathbb F_p$, with $n=dim_{\mathbb F_p}(\mathbb F)$, $|\mathbb F|=p^n$, i.e., the cardinality of $\mathbb F$ must be a prime power.</p>
<p><strong>Uniqueness of finite fields</strong>：</p>
<p>For any prime power $q$, there is essentially only one finite field of order $q$. Any two finite fields of order $q$ are the same except that the labelling used to represent the field elements may be different.</p>
<p><strong>Binary field</strong>：</p>
<p>characteristic-2 finite fields $\mathbb F_{2^m}$</p>
<p>Elements are polynomials over $\mathbb F_2$ of degree $\le m-1$</p>
<p>$\mathbb F_{2^m}:=\{a_{m-1}x^{m-1}+a_{m-2}x^{m-2}+\cdots+a_2x^2+a_1x+a_0:\ a_i\in \mathbb F_2\}$</p>
<p>An irreducible polynomial $f (x)$ of degree $m$ is chosen:</p>
<p>$f (x)$ cannot be factered as a product of binary polynomials each of degree less than $m$</p>
<ul>
<li>Addition: usual</li>
<li>Multiplication: modulo $f(x)$</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th>$\alpha^{0}=1$</th>
<th>$\alpha^{1}=\alpha$</th>
<th>$\alpha^{2}$</th>
<th>$\alpha^3$</th>
</tr>
</thead>
<tbody>
<tr>
<td>$\alpha^{4}=\alpha+1$</td>
<td>$\alpha^{5}=\alpha^{2}+\alpha$</td>
<td>$\alpha^{6}=\alpha^{3}+\alpha^{2}$</td>
<td>$\alpha^{7}=\alpha^{3}+\alpha+1$</td>
</tr>
<tr>
<td>$\alpha^{8}=\alpha^{2}+1$</td>
<td>$\alpha^{9}=\alpha^{3}+\alpha$</td>
<td>$\alpha^{10}=\alpha^{2}+\alpha+1$</td>
<td>$\alpha^{11}=\alpha^{3}+\alpha^{2}+\alpha$</td>
</tr>
<tr>
<td>$\alpha^{12}=\alpha^{3}+\alpha^{2}+\alpha+1$</td>
<td>$\alpha^{13}=\alpha^{3}+\alpha^{2}+1$</td>
<td>$\alpha^{14}=\alpha^{3}+1$</td>
<td>$\alpha^{15}=1$</td>
</tr>
</tbody>
</table>
</div>
<p>$&lt;\alpha^3,\alpha^2,\alpha,1&gt;$ is a basis for $\mathbb F_{2^4}$ over $\mathbb F_2$.</p>
<p>The finite field $\mathbb F_{q^n}$ can be viewed as a vector space over $\mathbb F_q$.</p>
<p><strong>Isomorphism of Finite Fields</strong>：</p>
<p>For a fixed $q$, the finite field $\mathbb F_q$ is unique.</p>
<p>if $\psi: z\mapsto c$ is an isomorphism between $K_1$ and $K_2$, then $f_1(c)\equiv 0\mod f_2(c)$ for some $c\in K_2$.</p>
<p><strong>Extension Fields and Subfields</strong>：</p>
<p>Let $p$ be a prime and $m\ge2$. Let $\mathbb F_p[z]$ denote the set of all polynomials in the variable $z$ with coefficients from $\mathbb F_p$. Let $f(z)$ be an irreducible polynomial of degree $m$ in $\mathbb F_p[z]$.</p>
<p>The elements of $\mathbb F_{p^m}$ are the polynomials in $\mathbb F_p[z]$ of degree $\le m-1$: </p>
<script type="math/tex; mode=display">\mathbb F_{p^m}:=\{a_{m-1}z^{m-1}+a_{m-2}z^{m-2}+\cdots+a_2z^2+a_1z+a_0:\ a_i\in \mathbb F_p\}</script><ul>
<li>Addition:  usual addition of polynomials, with coefficients arithmetic performed in $\mathbb F_p$.</li>
<li>Multiplication:  performed modulo the polynomial $f(z)$.</li>
</ul>
<p>A finite field $\mathbb F_{p^m}$ has precisely one subfield of order $p^ℓ$ for each positive divisor $ℓ$ of $m$.</p>
<p>The elements of this subfield are the elements $a\in \mathbb F_{p^m}$ satisfying $a^{p^ℓ}=a$; Conversely, every subfield of $\mathbb F_{p^m}$ has order $p^ℓ$ for some positive divisor $$</p>
<p><strong>Base-b Expansions </strong>：</p>
<p><img src="https://s2.loli.net/2023/01/01/4MF6VOsPHNdRLWv.png" alt="image.png" style="zoom:50%;" /></p>
<p>$O(\log n)$</p>
<p><strong>Binary Addition of Integers</strong></p>
<p><img src="https://s2.loli.net/2023/01/01/fX4BUCMSb8daslh.png" alt="image.png" style="zoom:50%;" /></p>
<p>$O(n)$ bit additions</p>
<p><strong>Binary Multiplication of Integers</strong></p>
<p><img src="https://s2.loli.net/2023/01/01/5VfLZkEC8MuaYxX.png" alt="image.png" style="zoom:50%;" /></p>
<p>$O(n^2)$ shifts and $O(n^2)$ bit additions</p>
<p><strong>Computing div and mod</strong></p>
<p><img src="https://s2.loli.net/2023/01/01/1vSPrNWfLFw9KkZ.png" alt="image.png" style="zoom:50%;" /></p>
<p>$O(\log q\log a)$ bit operations</p>
<p><strong>Binary Modular Exponentiation</strong>：</p>
<p><img src="https://s2.loli.net/2023/01/01/mO8rTNgWoRHSniB.png" alt="image.png" style="zoom:50%;" /></p>
<p>$O((\log m)^2\log n)$ bit operations</p>
<p><strong>Primes &amp; Composites</strong>：</p>
<p>If $n$ is composite, then $n$ has a prime divisor less than or equal to $\sqrt n$.</p>
<ul>
<li><p>if $n$ is composite, then it has a positive integer factor a such that $1 &lt; a &lt; n$ by definition. This means that $n = ab$, where $b$ is an integer greater than 1. </p>
</li>
<li><p>assume that $a&gt;\sqrt n$ and $b&gt;\sqrt n$. Then ab &gt; n, contradiction. So either $a\le \sqrt n$ or $b\le \sqrt n$. </p>
</li>
<li><p>Thus, $n$ has a divisor less than $\sqrt n$. </p>
</li>
<li><p>By the Fundamental Theorem of Arithmetic, this divisor is either prime, or is a product of primes. In either case, n has a prime divisor less than $\sqrt n$.</p>
</li>
</ul>
<p>There are infinitely many primes.</p>
<ul>
<li>assume that there are finite primes $\{a_n\}$, where $a_n$ is the largest one.</li>
<li>then we construct $a_{n+1}=(\prod\limits_{i=1}^{n}a_i)+1$</li>
<li>$a_{n+1}$ cannot be divided by any primes smaller than itself, so it is a prime number larger than $a_n$, contradiction.</li>
</ul>
<p><strong>GCD &amp; LCM Using Factorization</strong>：</p>
<p>$a=\prod\limits_{i=1}^{n}p_i^{a_i}$, $b=\prod\limits_{i=1}^{n}p_i^{b_i}$</p>
<p>$gcd(a,b)=\prod\limits_{i=1}^{n}p_i^{min(a_i,b_i)}$</p>
<p>$lcm(a,b)=\prod\limits_{i=1}^{n}p_i^{max(a_i,b_i)}$</p>
<p><strong>Euclidean algorithm ($O(\log b)$)</strong>：</p>
<p><img src="https://s2.loli.net/2023/01/01/n6vDqzNV9es2PXt.png" alt="image.png" style="zoom:50%;" /></p>
<p><strong>Lemma</strong> Let $a=bq+r$, where $a,b,q,r$ are integers. Then $gcb(a,b)=gcd(b,r)$</p>
<ul>
<li>Suppose $d|a$ and $d|b$, then $d|(a-bq)$ i.e. $d|r$. </li>
<li>Suppose $d|b$ and $d|r$, then $d|(bq+r)$ i.e. $d|a$.</li>
</ul>
<p>Therefore, $gcd(a,b)=gcd(b,r)$.</p>
<p><strong>Bezout’s Theorem</strong>：</p>
<p>If $a$ and $b$ are positive integers, then there exist integers $s$ and $t$ such that $gcd(a,b)=sa+tb$.</p>
<p>$\begin{aligned}<br>503 &amp; = 1 \cdot 286+217 \\<br>286 &amp; = 1 \cdot 217+69 \\<br>217 &amp; = 3 \cdot 69+10 \\<br>69 &amp; = 6 \cdot 10+9 \\<br>10 &amp; = 1 \cdot 9+1<br>\end{aligned}$</p>
<p>$\begin{aligned}<br>1 &amp; =10-1 \cdot 9 \\<br>&amp; =7 \cdot 10-1 \cdot 69 \\<br>&amp; =7 \cdot 217-22 \cdot 69 \\<br>&amp; =29 \cdot 217-22 \cdot 286 \\<br>&amp; =29 \cdot 503-51 \cdot 286<br>\end{aligned}$</p>
<p><strong>Corollaries of Bezout’s Theorem</strong>：</p>
<p>If $a,b,c$ are positive integers such that $gcd(a,b)=1$ and $a|bc$, then $a|c$.</p>
<ul>
<li>$1=sa+tb$, $c=sac+tbc$, $a|bc$, $a|(sac+tbc)$, i.e. $a|c$.</li>
</ul>
<p>If $p$ is prime and $p|\prod\limits_{i=1}^n a_i$, then $p|a_i$ for some $i$.</p>
<ul>
<li>by induction. Will be given later</li>
</ul>
<p><strong>Uniqueness of Prime Factorization</strong>：</p>
<p>Suppose that the positive integer $n$ can be written as a product of primes in 2 distinct ways:</p>
<p>$n=\prod\limits_{i=1}^sp_i$ and $n=\prod\limits_{j=1}^t q_j$</p>
<p>Remove all common primes from the factorizations to get</p>
<p>$\prod\limits_{k=1}^{u}p_{i_k}=\prod\limits_{k=1}^{v}q_{j_k}$</p>
<p>It then follows that $p_{i_1}|q_{j_k}$ for some $k$, contradicting the assumption that $p$ and $q$ are distinct primes.</p>
<p><strong>Dividing Congruences by an Integer</strong>：</p>
<p>Let $m$ be a positive integer and let $a,b,c$ be integers. If $ac\equiv bc\mod m$ and $gcd(c,m)=1$, then $a\equiv b \mod m$.</p>
<p><strong>Modular Inverse</strong>：</p>
<p>An integer $\bar a$ such that $\bar aa\equiv 1 \mod m$ is said to be an inverse of $a$ modulo $m$</p>
<p>If $a$ and $m$ are relatively prime integers and $m&gt;1$, then and inverse of $a$ modulo $m$ exists. Furthermore, the inverse is unique modulo $m$.</p>
<ul>
<li><p>Existence: $gcd(a,m)=1$, $sa+tm=1$, $sa+tm\equiv 1\mod m$, $sa\equiv 1\mod m$.$s$ is an inverse of $a$ modulo $m$.</p>
</li>
<li><p>Uniqueness: $sa\equiv 1\mod m$, $ta\equiv 1 \mod m$, $(t-s)a\equiv 0\mod m$, $a\mod m\ne0$, so $(s-t)\equiv 0 \mod m$. Since $s,t\in\mathbf Z_m$, $s-t=0$, i.e. $s=t$</p>
</li>
</ul>
<p><strong>Find inverses: extended Euclidean algorithm</strong>：</p>
<p>$\begin{align}<br>4620 &amp; = 45 \cdot 101+75 \\<br>101 &amp; = 1 \cdot 75+26 \\<br>75 &amp; = 2 \cdot 26+23 \\<br>26 &amp; = 1 \cdot 23+3 \\<br>23 &amp; = 7 \cdot 3+2 \\<br>3 &amp; = 1 \cdot 2+1 \\<br>2 &amp; = 2 \cdot 1<br>\end{align}$</p>
<p>$\begin{aligned}<br>1 &amp; =3-1 \cdot 2 \\<br>1 &amp; =3-1 \cdot(23-7 \cdot 3)=-1 \cdot 23+8 \cdot 3 \\<br>1 &amp; =-1 \cdot 23+8 \cdot(26-1 \cdot 23)=8 \cdot 26-9 \cdot 23 \\<br>1 &amp; =8 \cdot 26-9 \cdot(75-2 \cdot 26)=26 \cdot 26-9 \cdot 75 \\<br>1 &amp; =26 \cdot(101-1 \cdot 75)-9 \cdot 75 \\<br>&amp; =26 \cdot 101-35 \cdot 75 \\<br>1 &amp; =26 \cdot 101-35 \cdot(4620-45 \cdot 101) \\<br>&amp; =-35 \cdot 4620+1601 \cdot 101<br>\end{aligned}$</p>
<p><strong>Number of Solutions to Congruences</strong>：</p>
<p>Let $d = gcd(a, m)$ and $m’ = m/d$. The congruence $ax \equiv b \mod m$ has solutions <strong>if and only if</strong> $d|b$. If $d|b$, then there are exactly $d$ solutions. If $x_0$ is a solution, then the other solutions are given by $x_0 + m’ , x_0 + 2m’ ,\cdots, x_0 + (d − 1)m’ $.</p>
<ul>
<li>“only if”: If $x_0$ is a solution, then $ax_0-b=km$. Thus, $ax_0-km=b$, Since $d|(ax_0-km)$, we must have $d|b$.</li>
<li>“if”: Suppose that $d|b$. Let $b=kd$. There exist integers $s,t$ such that $d=sa+tm$. Then $b=kd=ask+mtk$. Let $x_0=sk$, then $ax_0\equiv b\mod m$.</li>
<li>“#=d”: $m|a(x_1-x_0)$, and $m’|a’(x_1-x_0)$, $x_1=x_0+km’$, where $k=0,1,\cdots,d-1$.</li>
</ul>
<p><strong>The Chinese Remainder Theorem</strong>：</p>
<p>$\{m_n\}$ are pairwise relatively prime positive integers greater than 1 and $\{a_n\}$ be arbitrary integers. Then the system</p>
<script type="math/tex; mode=display">\begin{array}{ll}
x \equiv a_{1} & \left(\bmod m_{1}\right) \\
x \equiv a_{2} & \left(\bmod m_{2}\right) \\
\cdots \\
x \equiv a_{n} & \left(\bmod m_{n}\right)
\end{array}</script><p>has a unique solution modulo $m=\prod\limits_{i=1}^{n}m_i$.</p>
<p>Let $M_k=m/m_k$ for $k=1,2,\cdots,n$ and $m=\prod\limits_{i=1}^{n}m_i$. Since $gcd(m_k,M_k)=1$, there is an integer $y_k$, an inverse of $M_k$ modulo $m_k$ such that $M_ky_k\equiv 1\mod m_k$. Let</p>
<script type="math/tex; mode=display">x=\sum\limits_{i=1}^{n}a_iM_iy_i</script><p>It is checked that $x$ is a solution to the $n$ congruences.</p>
<p>Uniqueness: Suppose there are two solutions $u$ and $v$ to the system, then $m_i|(u-v),\ i=1,2,\cdots,n$, then $m|(u-v)$, i.e. $u\equiv v\mod m$.</p>
<p><strong>Back Substitution</strong>：</p>
<p>……</p>
<p><strong>Pseudorandom Number Generators</strong>：</p>
<p>$x_{n+1}=(ax_n+c)\mod m$</p>
<p><strong>Hash Functions</strong>：</p>
<p>……</p>
<h1 id="Chapter-8-Cryptography"><a href="#Chapter-8-Cryptography" class="headerlink" title="Chapter 8 - Cryptography"></a>Chapter 8 - Cryptography</h1><p><strong>Fermat’s Little Theorem</strong>：</p>
<p>Let $p$ be a prime, and let $x$ be an integer such that $x\not\equiv0\mod p$. Then $x^{p-1}\equiv 1\mod p$.</p>
<p><strong>Proof of Fermat’s Little Theorem</strong>：</p>
<p><strong>Lemma</strong>(Dividing Congruences by an Integer)</p>
<p>Let $m$ be a positive integer and let $a,b,c$ be integers. If $ac\equiv bc\mod m$ and $gcd(c,m)=1$, then $a\equiv b \mod m$.</p>
<ul>
<li>Pick distinct $u,v$ from $\mathbf Z_m$, suppose $ux\equiv vx \mod m$, $gcd(x,m)=1$, then $u\equiv v\mod m$, contradiction.</li>
<li>So $\{1,2,\cdots,p-1\}=\{x,2x,\cdots,(p-1)x \mod p\}$</li>
<li>$(p-1)!x^{p-1}\equiv(p-1)!\mod p$</li>
<li>Since $gcd((p-1)!,p)=1$, $x^{p-1}\equiv 1\mod m$</li>
</ul>
<p><strong>Euler’s totient function</strong>：</p>
<p>$\phi(n)$: the number of positive integers coprime to $n$ in $\mathbf Z_m$.</p>
<p>For prime numbers $p$</p>
<ul>
<li><p>$\phi(p)=p-1$</p>
</li>
<li><p>$\phi(p^i)=p^i-p^{i-1}$</p>
</li>
</ul>
<p>For positive integer $n&gt;1$, it has factorization $n=p_1^{k_1}p_2^{k_2}\cdots p_r^{k_r}$</p>
<ul>
<li>$\phi(n)=\prod\limits_{i=1}^{r}(p^{k_i}-p^{k_i-1})$</li>
<li>$m&gt;1$ and $gcd(m,n)=1$，$\phi(mn)=\phi(m)\phi(n)$</li>
</ul>
<p><strong>Euler’s Theorem</strong>： </p>
<p>Let $n$ be a positive integer, and let $x$ be an integer such that $gcd(x,n)=1$. Then</p>
<script type="math/tex; mode=display">x^{\phi(n)}\equiv 1\mod n</script><ul>
<li><p>Denote the set of numbers coprime to n in $\mathbf Z_n$ as $\{X_{\phi(n)}\}$.</p>
</li>
<li><p>Pick $u,v$ from $\{X_{\phi(n)}\}$, suppose $ux\equiv vx\mod n$, $gcd(x,n)=1$, then $u\equiv v\mod n$.</p>
<p>So the cardinality $|\{X_{\phi(n)}\}|=|\{x\cdot X_{\phi(n)}\}|$</p>
</li>
<li><p>Now prove that  for $X_i\in\{X_{\phi(n)}\}$, $gcd(x\cdot X_i,n)=1$.</p>
</li>
<li><p>Assume that $x\cdot X_i\equiv r \mod n$, and $t=gcd(r,n)\ne1$, i.e. $x\cdot X_i=kn+r$</p>
</li>
<li><p>Since $t|n,\ t|r$, $t|x\cdot X_i$, $gcd(X_i, n)=1$</p>
<p>So $t|x$, $gcd(x,n)\ge t&gt;1$, contradiction.</p>
</li>
<li><p>So multiplying $x$ to $\{X_{\phi(n)}\}$ is actually a bijection $f: \{X_{\phi(n)}\}→\{X_{\phi(n)}\}$</p>
</li>
<li><p>$\prod\limits_{i=1}^{\phi(n)}x\cdot X_i\equiv\prod\limits_{i=1}^{\phi(n)}X_i\mod n$</p>
</li>
<li><p>Eliminate the product of $X_i$ (which is coprime to n), we get $x^{\phi(n)}\equiv 1\mod n$</p>
</li>
</ul>
<p><strong>Primitive Roots</strong>：</p>
<p>There is a primitive root modulo $n$ IFF $n=2,4,p^e \text{ or }2p^e$,where $p$ is an odd prime.</p>
<p>If $n$ has primitive roots, then it has $\phi(\phi(n))$ primitive roots.</p>
<p><strong>RSA Public Key Cryptosystem</strong>：</p>
<p>Pick two large primes $p$ and $q$. Let $n=pq$, then $\phi(n)=(p-1)(q-1)$. Encryption and decryption keys $e$ and $d$ are selected such that</p>
<ul>
<li>$gcd(e,\phi(n))=1$</li>
<li>$ed\equiv 1\mod \phi(n)$</li>
</ul>
<p>RSA encryption: $C=M^e\mod n$</p>
<p>RSA decryption: $M=C^d\mod n$</p>
<p>For each integer $x$ such that $0\leq x&lt;n$, $x^{ed}\equiv x\mod n$.</p>
<p>$p,q,\phi(n)$ must be kept secret!</p>
<p>Let $(e,d)$ be a key pair for the RSA. Define $\lambda(n)=lcm(p-1,q-1)$, and compute $d’=e^{-1}\mod \lambda(n)$, decryption using $d’$ still works!</p>
<p><strong>Discrete Logarithm Problem</strong>：</p>
<p>For $b^x\equiv y\mod n$, given $n$, $b$ and $y$, find $x$. This is very hard!</p>
<p><strong>El Gamal Encryption</strong>：</p>
<p>……</p>
<h1 id="Chapter-9-Mathematical-Induction"><a href="#Chapter-9-Mathematical-Induction" class="headerlink" title="Chapter 9 - Mathematical Induction"></a>Chapter 9 - Mathematical Induction</h1><p><strong>Proof by Smallest Counterexample</strong>：</p>
<p>The statement $P(n)$ is true for all $n=0,1,2,\cdots$</p>
<ol>
<li>Assume that a counter-example exists, i.e. there is some $n&gt;0$ for which $P(n)$ is false.</li>
<li>Let $m&gt;0$ be the smallest value for which $P(m)$ is false.</li>
<li>Then use the fact that $P(m’)$ is true for all $0\le m’&lt;m$ to show that $P(m)$ is true, contradicting the choice of $m$.</li>
</ol>
<p><strong>Weak Principle of Mathematical Induction</strong>：</p>
<p>Base step: If the statement $P(b)$ is true.</p>
<p>Inductive step: The statement $P(n-1)→P(n)$ is true for all $n&gt;b$, then $P(n)$ is true for all integers $n\ge b$.</p>
<p><strong>Strong Principle of Mathematical Induction</strong>：</p>
<p>Base step: If the statement $P(b)$ is true.</p>
<p>Inductive step: The statement $P(b)\wedge P(b+1)\wedge \cdots\wedge P(n-1)→P(n)$ is true for all $n&gt;b$, then $P(n)$ is true for all integers $n\ge b$.</p>
<p>Weak 々 is equivalent to Strong 々.</p>
<h1 id="Chapter-10-Recursion"><a href="#Chapter-10-Recursion" class="headerlink" title="Chapter 10 - Recursion"></a>Chapter 10 - Recursion</h1><p><strong>Iterating a Recurrence</strong>：</p>
<p>“Top-down”: $T(n)=rT(n-1)+a=r(rT(n-2)+a)+a=\cdots$</p>
<p>“Bottom-up”: $T(0)=b,\ T(1)=rT(0)+a,\ T(2)=rT(1)+a\cdots$</p>
<p><strong>Formula of Recurrences</strong>：</p>
<p>$T(n)=rT(n-1)+a,\ T(0)=b$, and $r\ne1$, </p>
<p>then</p>
<script type="math/tex; mode=display">T(n)=r^nb+a\frac{1-r^n}{1-r}</script><p>for all nonnegative integers $n$.</p>
<p><strong>First-Order Linear Recurrences</strong>：</p>
<p>$T(n)=f(n)T(n-1)+g(n)$</p>
<p>When $f(n)$ is a constant: </p>
<script type="math/tex; mode=display">T(n)=\left\{\begin{array}{ll}
r T(n-1)+g(n) & \text { if } n>0 \\
a & \text { if } n=0
\end{array}\right.</script><script type="math/tex; mode=display">T(n)=r^{n} a+\sum_{i=1}^{n} r^{n-i} g(i)</script><p><strong>The Master Theorem</strong>：</p>
<p>$T(n)=aT(n/b)+cn^d$</p>
<ol>
<li>If $a&lt;b^d$, then $T(n)=\Theta(n^d)$</li>
<li>If $a=b^d$, then $T(n)=\Theta(n^d\log n)$</li>
<li>If $a&gt;b^d$, then $T(n)=\Theta(n^{\log_ba})$</li>
</ol>
<p><img src="https://s2.loli.net/2023/01/01/8pS9IbAPfWXDOgt.png" alt=""></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Discrete Math</tag>
      </tags>
  </entry>
  <entry>
    <title>CS217 数据结构与算法分析 期末复习</title>
    <url>/2023/01/08/CS217_DSAA_final/</url>
    <content><![CDATA[<p><a href="https://www.cs.usfca.edu/~galles/visualization/Algorithms.html">Algorithm visualization</a></p>
<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Incremental technique, Recursive technique</p>
<p>Divide-and-conquer Strategy</p>
<p>Iteration, Recursion</p>
<h2 id="Algorithm-Analysis"><a href="#Algorithm-Analysis" class="headerlink" title="Algorithm Analysis"></a>Algorithm Analysis</h2><p><img src="https://s2.loli.net/2023/01/07/guLBibrv59NMZxQ.png" alt="image.png" style="zoom:50%;" /></p>
<p>CPU Basic (atomic) operations</p>
<ul>
<li>Initialization</li>
<li>Arithmetic</li>
<li>Comparison / Branching</li>
<li>Memory Access</li>
</ul>
<p>Cost analysis, Correctness analysis</p>
<p>Pseudocode</p>
<p>Binary Search Algorithm</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//end state: l&gt;r, answer registered as ans</span></span><br><span class="line"><span class="keyword">while</span> (l&lt;=r)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">check</span>(mid))</span><br><span class="line">    &#123;</span><br><span class="line">        ans=mid;</span><br><span class="line">        r=mid<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">&#125;<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//end state: l==r, answer=l=r</span></span><br><span class="line"><span class="keyword">while</span> (l&lt;r)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) r=mid</span><br><span class="line">    <span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">&#125;<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,l); </span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//The smallest element no less than key</span></span><br><span class="line"><span class="type">int</span> l=<span class="number">1</span>,r=n;<span class="keyword">while</span> (l&lt;r)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (a[mid]&gt;=key) r=mid; </span><br><span class="line">    <span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> l;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//The greatest element no greater than key</span></span><br><span class="line"><span class="type">int</span> l=<span class="number">1</span>,r=n;<span class="keyword">while</span> (l&lt;r)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> mid=(l+r+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (a[mid]&lt;=key) l=mid; </span><br><span class="line">    <span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> l;</span><br></pre></td></tr></table></figure>
<p>Big-O Notation</p>
<p><img src="https://s2.loli.net/2023/01/07/23DTsghj8wN7ZGF.png" alt="image.png" style="zoom:50%;" /></p>
<p>Big-Ω Notation</p>
<p><img src="https://s2.loli.net/2023/01/07/H5OqWMoCKBQJN6k.png" alt="image.png" style="zoom:50%;" /></p>
<p>Big-Θ Notation</p>
<p><img src="https://s2.loli.net/2023/01/07/Jls7Ym8nPtUubDe.png" alt="image.png" style="zoom:50%;" /></p>
<h2 id="Sorting"><a href="#Sorting" class="headerlink" title="Sorting"></a>Sorting</h2><p>Selection sort</p>
<p><img src="https://s2.loli.net/2023/01/07/L3ChUQbcRn1JkTs.png" alt="image.png" style="zoom:50%;" /></p>
<p>Insertion sort</p>
<p><img src="https://s2.loli.net/2023/01/07/iBv9AzLkywRgYu7.png" alt="image.png" style="zoom:50%;" /></p>
<p>Bubble sort</p>
<p><img src="https://s2.loli.net/2023/01/07/g2XKiwVMCQnkjtD.png" alt="image.png" style="zoom:50%;" /></p>
<p>Merge sort</p>
<p><img src="https://s2.loli.net/2023/01/07/TQvS3cqBDfjxd8I.png" alt="image.png" style="zoom:50%;" /></p>
<p><img src="https://s2.loli.net/2023/01/07/inEZaeqVXT1F4BD.png" alt="image.png" style="zoom:50%;" /></p>
<p>Matser Theorem</p>
<p><img src="https://s2.loli.net/2023/01/07/uPpn5dhbofysRlq.png" alt="image.png" style="zoom:50%;" /></p>
<p>Quick sort</p>
<p>Worst $O(n^2)$, Expected $O(n\log n)$</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">quickSort</span>(<span class="params">arr, left, right</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> len = arr.<span class="property">length</span>,</span><br><span class="line">        partitionIndex,</span><br><span class="line">        left = <span class="keyword">typeof</span> left != <span class="string">&#x27;number&#x27;</span> ? <span class="number">0</span> : left,</span><br><span class="line">        right = <span class="keyword">typeof</span> right != <span class="string">&#x27;number&#x27;</span> ? len - <span class="number">1</span> : right;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">        partitionIndex = <span class="title function_">partition</span>(arr, left, right);</span><br><span class="line">        <span class="title function_">quickSort</span>(arr, left, partitionIndex-<span class="number">1</span>);</span><br><span class="line">        <span class="title function_">quickSort</span>(arr, partitionIndex+<span class="number">1</span>, right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">partition</span>(<span class="params">arr, left ,right</span>) &#123;     <span class="comment">// 分区操作</span></span><br><span class="line">    <span class="keyword">var</span> pivot = left,                      <span class="comment">// 设定基准值（pivot）</span></span><br><span class="line">        index = pivot + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = index; i &lt;= right; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt; arr[pivot]) &#123;</span><br><span class="line">            <span class="title function_">swap</span>(arr, i, index);</span><br><span class="line">            index++;</span><br><span class="line">        &#125;        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">swap</span>(arr, pivot, index - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> index-<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//javascript version from runoob.com</span></span><br></pre></td></tr></table></figure>
<p>$e_i$ and $e_j$ are compared IFF either one is the first among $e_i, e_{i+1},\cdots, e_j$ picked as a pivot.</p>
<p><img src="https://s2.loli.net/2023/01/07/k3pjNxn8EP4W7zs.png" alt="image.png" style="zoom:50%;" /></p>
<p>Complexity Summary</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Sort</th>
<th style="text-align:center">Average Time Complexity</th>
<th style="text-align:center">Space Complexity</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Selection</td>
<td style="text-align:center">$O(n^2)$</td>
<td style="text-align:center">$O(1)$</td>
</tr>
<tr>
<td style="text-align:center">Insertion</td>
<td style="text-align:center">$O(n^2)$</td>
<td style="text-align:center">$O(1)$</td>
</tr>
<tr>
<td style="text-align:center">Bubble</td>
<td style="text-align:center">$O(n^2)$</td>
<td style="text-align:center">$O(1)$</td>
</tr>
<tr>
<td style="text-align:center">Heap</td>
<td style="text-align:center">$O(n\log n)$</td>
<td style="text-align:center">$O(1)$</td>
</tr>
<tr>
<td style="text-align:center">Merge</td>
<td style="text-align:center">$O(n\log n)$</td>
<td style="text-align:center">Depends</td>
</tr>
<tr>
<td style="text-align:center">Quick</td>
<td style="text-align:center">$O(n\log n)$</td>
<td style="text-align:center">$O(1)$</td>
</tr>
</tbody>
</table>
</div>
<p><a href="https://www.bilibili.com/video/BV1iK4y1a7BU">Shell sort</a></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">shell_sort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> len)</span> &#123;</span><br><span class="line">        <span class="type">int</span> gap, i, j;</span><br><span class="line">        <span class="type">int</span> temp;</span><br><span class="line">        <span class="keyword">for</span> (gap = len &gt;&gt; <span class="number">1</span>; gap &gt; <span class="number">0</span>; gap &gt;&gt;= <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">for</span> (i = gap; i &lt; len; i++) &#123;</span><br><span class="line">                        temp = arr[i];</span><br><span class="line">                        <span class="keyword">for</span> (j = i - gap; j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; temp; j -= gap)</span><br><span class="line">                                arr[j + gap] = arr[j];</span><br><span class="line">                        arr[j + gap] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Counting sort</p>
<p><img src="https://www.runoob.com/wp-content/uploads/2019/03/countingSort.gif" style="zoom:50%;" /></p>
<p>Radix sort</p>
<p><img src="https://www.runoob.com/wp-content/uploads/2019/03/radixSort.gif" style="zoom:50%;" /></p>
<p>Bucket sort</p>
<p><img src="https://www.runoob.com/wp-content/uploads/2019/03/Bucket_sort_1.svg_.png"  /></p>
<p><img src="https://www.runoob.com/wp-content/uploads/2019/03/Bucket_sort_2.svg_.png"  /></p>
<h2 id="Linked-List"><a href="#Linked-List" class="headerlink" title="Linked List"></a>Linked List</h2><div class="table-container">
<table>
<thead>
<tr>
<th>Operation</th>
<th>Time Complexity</th>
<th>Space Complexity</th>
</tr>
</thead>
<tbody>
<tr>
<td>Insert</td>
<td>$O(n)$</td>
<td>$O(1)$</td>
</tr>
<tr>
<td>Delete</td>
<td>$O(n)$</td>
<td>$O(1)$</td>
</tr>
<tr>
<td>Find</td>
<td>$O(n)$</td>
<td>$O(1)$</td>
</tr>
<tr>
<td>Update</td>
<td>$O(n)$</td>
<td>$O(1)$</td>
</tr>
</tbody>
</table>
</div>
<p>Double linked list</p>
<p>Circular linked list</p>
<h2 id="Stack-amp-Queue"><a href="#Stack-amp-Queue" class="headerlink" title="Stack &amp; Queue"></a>Stack &amp; Queue</h2><h3 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h3><p>First In Last Out</p>
<p><img src="https://s2.loli.net/2023/01/07/ZFqiK73UmcgL69T.png" alt="image.png" style="zoom:50%;" /></p>
<p>Applications: Delimiters balance problem, Evaluating arithmetic expressions, The runtime stack in memory</p>
<p>Prefix/Infix/Postfix expression</p>
<h3 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h3><p>First In First Out</p>
<p><img src="https://s2.loli.net/2023/01/07/SuFQyIO9J7kwRea.png" alt="image.png" style="zoom:50%;" /></p>
<p>Ring queue</p>
<p><img src="https://s2.loli.net/2023/01/07/p1g4YT6nEUXZoFA.png" alt="image.png" style="zoom:50%;" /></p>
<p>All operations above takes $O(1)$ time complexity.</p>
<h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><h3 id="String-matching"><a href="#String-matching" class="headerlink" title="String matching"></a>String matching</h3><p>Brute Force $O(mn)$</p>
<p><img src="https://s2.loli.net/2023/01/07/IRKWd4758mvjXpb.png" alt="image.png" style="zoom:50%;" /></p>
<p>Rabin-Karp Algorithm $O(mn)$</p>
<p><img src="https://s2.loli.net/2023/01/07/KExkrpRCdsSX3z2.png" alt="image.png" style="zoom:50%;" /></p>
<p>KMP $O(m+n)$</p>
<p><img src="https://s2.loli.net/2023/01/07/m6Xb14INu9FPVLz.png" alt="image.png" style="zoom:50%;" /></p>
<p><img src="https://s2.loli.net/2023/01/07/zetLS1yVfwFIPqs.png" alt="image.png" style="zoom:50%;" /></p>
<h3 id="FSA"><a href="#FSA" class="headerlink" title="FSA"></a>FSA</h3><ul>
<li>$Q$, a set of states</li>
<li>$q_0\in Q$, the start state</li>
<li>$A\subseteq Q$, the accepting states</li>
<li>$\Sigma$, the input alphabet</li>
<li>$\delta$, the transition function $Q\times \Sigma→Q$</li>
</ul>
<p><img src="https://s2.loli.net/2023/01/07/kxRLO5YAUwJXFj2.png" alt="image.png" style="zoom:50%;" /></p>
<h2 id="Tree"><a href="#Tree" class="headerlink" title="Tree"></a>Tree</h2><p>Internal nodes, leaf nodes, root</p>
<p>(proper) ancestor, descendant</p>
<p>Path, Depth, Level, Height</p>
<p>(full, complete) k-ary tree</p>
<p>preorder, inorder, postorder traversal</p>
<p>Character Encoding &amp; Huffman Tree</p>
<p><img src="https://s2.loli.net/2023/01/07/8lW4O3DwILt5iad.png" alt="image.png" style="zoom:50%;" /></p>
<p>Given a Huffman tree, it includes at least 2 nodes, assume node $u$ and node $v$ have the top-2 lowest frequencies, then</p>
<ol>
<li>node $u$ and $v$ have the same parent node</li>
<li>$depth(u)$ and $depth(v) \ge depth(x)$, where node $x$ is any leaf node in the Huffman tree.</li>
</ol>
<p>Huffman encoding is the optimum prefix code, i.e., the space cost is minimized.<a href="http://home.cse.ust.hk/faculty/golin/COMP271Sp03/Notes/MyL17.pdf">Proof</a></p>
<ol>
<li>A tree with $n$ nodes with $n-1$ edges</li>
</ol>
<ul>
<li>For each non-root node v, it has one and only one edge point to itself. </li>
<li>A tree with n nodes, thus the number of non-root nodes is n-1.</li>
<li>Thus, this tree has n-1 edges.</li>
</ul>
<ol>
<li>Let $T$ be a tree where every internal node has at least 2 child nodes. If $m$ is the number of leaf nodes, then the number of internal nodes is at most $m-1$.</li>
</ol>
<ul>
<li>Suppose internal node $v$ has $x_v$ child nodes </li>
<li>The average child nodes of each internal node is $x$ </li>
<li>It has $m$ leaf nodes, thus it has $m/x$ parent nodes at most, i.e., they are parent of leaf nodes. </li>
<li>For $m/x$ internal nodes, it has at most $m/x^2$ parents. </li>
<li>For $m/x^2$ internal nodes, it has at most $m/x^3$ parents. </li>
<li>… </li>
<li>The total number of internal nodes is $m/x + m/x^2 + … + 1$</li>
<li>It is at most m-1. </li>
</ul>
<ol>
<li>A complete binary tree with $n ≥ 2$ nodes has height $O(\log n)$</li>
</ol>
<ul>
<li>Suppose the height is $h$. </li>
<li>The number of nodes at each level: </li>
<li>Level 0: $2^0 = 1$, Level 1: $2^1 = 2 $</li>
<li>Level 2: $2^2 = 4$, Level 3: $2^3 = 8$</li>
<li>… </li>
<li>Level $h-1$: $2^(h-1)$, Level $h$: $x (x \ge 1) $</li>
<li>Thus, $2^0 + 2^1 + … 2^{h-1} + x = n$</li>
<li>$(1-2^{h-1})/(1-2) = n-x → 2^{h-1} &lt; n $</li>
<li>Thus, $h = O(\log n)$</li>
</ul>
<h2 id="Advanced-Binary-Trees"><a href="#Advanced-Binary-Trees" class="headerlink" title="Advanced Binary Trees"></a>Advanced Binary Trees</h2><h3 id="Heap"><a href="#Heap" class="headerlink" title="Heap"></a>Heap</h3><ul>
<li>Complete binary tree</li>
<li>$O(n)$ space consumption </li>
<li>$O(\log n)$ insertion time </li>
<li>$O(\log n)$ delete-min time</li>
</ul>
<p>Suppose that node $u$ of $T$ is stored at $A[i]$. Then, the left child of $u$ is stored at $A[2i]$, and the right child at $A[2i+1]$.</p>
<p>Suppose that node $u$ of $T$ is stored at $A[i]$. Then, the parent of $u$ is stored at $A[ \left \lfloor i/2 \right \rfloor ]$.</p>
<p>Root-fix operation: Build a heap with $O(n)$ time.</p>
<p>$O(\sum\limits_{i=0}^{h-1}(h-i)\times2^i)=O(2^h)=O(n)$</p>
<h3 id="Binary-Search-Tree"><a href="#Binary-Search-Tree" class="headerlink" title="Binary Search Tree"></a>Binary Search Tree</h3><p>predecessor($\max\{a[i]\le q\}$), successor($\min\{a[i]\ge q\}$): $O(h)$</p>
<p>↙↘↘↘↘↘，↘↙↙↙↙↙</p>
<p>Insert: $O(h)$</p>
<p><img src="https://s2.loli.net/2023/01/08/183xdOHumtvXn2P.png" alt="image.png" style="zoom: 40%;" /></p>
<p>Delete: $O(h)$</p>
<p><img src="https://s2.loli.net/2023/01/08/LICKz3nltBhc8Tx.png" alt="image.png" style="zoom:50%;" /></p>
<h3 id="BBST"><a href="#BBST" class="headerlink" title="BBST"></a>BBST</h3><p>For every internal node $u$ of $T$, the height of the left subtree of $u$ differs from that the right subtree of $u$ by at most 1.</p>
<p>Proof: A balanced binary tree with $n$ nodes has height $O(\log n)$.</p>
<p>To construct a BBST with greatest height using $n$ nodes, each internal node should has subtrees that differ 1 in height. Denote $f(h)$ as the least number of nodes of a BBST with height $h$, then </p>
<p>$f(1)=1, f(2)=2$</p>
<p>$f(h)=f(h-1)+f(h-2)+1$</p>
<p>$f(h)+1=f(h-1)+1+f(h-2)+1$</p>
<p>$f(h)=\frac{1}{\sqrt 5}[(\frac{1+\sqrt 5}{2})^{h+1}-(\frac{1-\sqrt 5}{2})^{h+1}]-1$</p>
<p>$n\ge \frac{1}{\sqrt 5}[(\frac{1+\sqrt 5}{2})^{h+1}-(\frac{1-\sqrt 5}{2})^{h+1}]-1$</p>
<p>$h\le c\log n, h=O(\log n)$</p>
<p>Insertion time analysis?</p>
<p>Deletion time analysis?</p>
<h2 id="Graph"><a href="#Graph" class="headerlink" title="Graph"></a>Graph</h2><p>BFS</p>
<p>BFS tree, SSSP</p>
<p>DFS</p>
<p>DFS tree, Cycle detection, topological sort</p>
<p><strong>Parenthesis Theorem</strong>: all the following are true: </p>
<ul>
<li>If $u$ is a proper ancestor of $v$ in DFS-tree of $T$, then $I(u)$ contains $I(v)$. </li>
<li>If $u$ is a proper descendant of $v$ in DFS-tree of T, then $I(u)$ is contained in $I(v)$ .</li>
<li>Otherwise, $I(u)$ and $I(v)$ are disjoint.</li>
</ul>
<p><strong>White Path Theorem</strong>: let $u$ be a vertex in $G$. Consider the moment when $u$ is pushed into the stack in the DFS algorithm. Then a vertex $v$ becomes a proper descendant of $u$ in the DFS-forest IFF we can go from $u$ to $v$ by travelling only on white vertices.</p>
<p><strong>Cycle Theorem</strong>: let $T$ be an arbitrary DFS-forest. $G$ contains a cycle if and only if there is a backward edge with respect to $T$.</p>
<ul>
<li>If: trivial</li>
<li>only if: Suppose the cycle is $v_1 → 𝑣_2 → ⋯ → 𝑣_𝑘 → 𝑣_1$, let $𝑣_𝑖$ be the first to enter the stack. Then by white path theorem, all the other vertices in the cycle must be proper descendants of $𝑣_𝑖$ in the DFS-forest. This means the edge pointing to $𝑣_𝑖$ in the cycle is a backward edge.</li>
</ul>
<p>Dijkstra: $O((|V|+|E|)\log |V|)$</p>
<p><img src="https://s2.loli.net/2023/01/08/k48ZqQhlP23gJnj.png" alt="image.png" style="zoom:40%;" /></p>
<p>Correctness proof: </p>
<p><img src="https://s2.loli.net/2023/01/08/QCciM1UtHqRp3LT.png" alt="image.png" style="zoom:50%;" /></p>
<p>Minimum Spanning Tree (Prim): $O(|V|\log |V|+|E|)$</p>
<p><img src="https://s2.loli.net/2023/01/08/kARudvoBUrhEZac.png" alt="image.png" style="zoom:50%;" /></p>
<p>Strongly Connected Components $O(|V|+|E|)$</p>
<ol>
<li><p>obtain $G^R$</p>
</li>
<li><p>DFS on $G^R$, obtain $L^R$</p>
</li>
<li>obtain $L$ by reversing $L^R$</li>
<li>DFS on $G$ according to $L$</li>
<li>obtain SCC from DFS-forest</li>
</ol>
<p>Correctness proof:</p>
<ol>
<li><p>Obtain $G^{SCC}$ by shrinking nodes</p>
</li>
<li><p>sink SCC: SCC without in-degree</p>
</li>
<li>DFS on $G$ starting from vertices of sink SCC.</li>
</ol>
<p>Let $S_1$ , $S_2$ be SCCs such that there is a path from $S_1$ to $S_2$ in $G^SCC$. In the ordering of $L$, the earliest vertex in $S_2$ must come before the earliest vertex in $S_1$</p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>CS305 计算机网络 期末复习</title>
    <url>/2023/06/02/CS305_Final_Review/</url>
    <content><![CDATA[<p>计算机网络之大观也，前人之述备矣。</p>
<p>这篇post就用来简单记一下参考过的复习资料，顺便帮大佬们宣发一下好了，觉得有帮助的话记得给他们点赞加关注！</p>
<p><a href="https://github.com/XDZhelheim">XDZhelheim</a>：<a href="https://github.com/XDZhelheim/CS305-Computer-Network-Notes">计算机网络笔记</a></p>
<p>力推！一百多页的pdf非常详细，截取了很多课件配图，中文看起来也会亲切一些。不过最好还是结合英文课件对照一下术语表，不然考试考到缩写全称就不好办了。<del>是我用来期末速通复习的主要材料</del></p>
<p><a href="https://github.com/NYH-Dolphin">NYH-Dolphin</a>：<a href="https://github.com/NYH-Dolphin/SUSTech-Course-Info/tree/main/CS305%20Computer%20Network">计网复习建议</a></p>
<p>有一个复习建议的md可以参考，学完的人看来都是很有用的建议，有Ch4-Ch7的中文笔记，期末的时候可以看看。这一整个仓库囊括了很多计系课的资料，五脏俱全。</p>
<p><a href="https://github.com/Leo-Adventure">Leo-Adventure</a>：<a href="https://github.com/Leo-Adventure/CS305-Computer-Network">2022S计网资料</a></p>
<p>更加精简的中文回顾笔记，建议是复习前后过一遍，没印象的再补原作，附录里有计算题型整理(虽然本来计算题就那几个地方可以出)。</p>
<p><a href="https://gaia.cs.umass.edu/kurose_ross/interactive/">计算机网络：自顶向下方法-书后练习</a></p>
<p>如果你很幸运在考前已经复习了全部内容，可以回顾一下这里的题看看是不是都会做，部分平时作业取材于此，顺带着就可以复习一下之前的作业了。</p>
<hr>
<p>不过的确没有看见英文的复习笔记。</p>
<p>个人而言，直接看课件还是冗余部分过多了，可以跟着复习笔记走，课件被跳过的部分略看一眼即可。</p>
<p><del>这学期学得还是太仓促了(sigh</del></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Computer Networks</tag>
      </tags>
  </entry>
  <entry>
    <title>CS334 操作系统 期末考试</title>
    <url>/2023/05/23/CS334_Final_Quiz/</url>
    <content><![CDATA[<h2 id="Q1-True-or-False"><a href="#Q1-True-or-False" class="headerlink" title="Q1. True or False"></a>Q1. True or False</h2><ol>
<li>Aging is an effective solution to priority inversion</li>
<li>Dual-mode operation is supported by the CPU to protect the OS from applications</li>
<li>TLB works well because of spatial locality and temporal locality, where temporal locality means accesses to the same page tend to be close in time</li>
<li>Peterson’s solution is an example of the spin-based locks</li>
<li>TLB entries can be extended with ASID to and TLB flushes during context switch</li>
<li>In Linux, kernel logic addresses are physically continuous; most kernel data structures, like page tables or per-process kernel stacks, are stored in kernel logic address</li>
<li>Memory-mapped I/O does not need spatial I/O instructions to operate the I/O ports and registers</li>
<li>SJF can be regarded as a dynamic priority scheduling where its priority is the next CPU burst time</li>
<li>A priority scheduling algorithm must be preemptive</li>
<li>Exit() is always invoked when the process terminates</li>
<li>seL4 is a formally verified micro kernel</li>
<li>A process switches from running to waiting state when it has used up its CPU quota and begin to wait until its next turn</li>
<li>Copy-on-write allows the parent process and the child process to share memory, so race condition may occur if they write to the same global variable concurrently</li>
<li>Peterson’s solution can be extended to more than two processes with some modification</li>
<li>When CPU scheduling is considered, a process can be described as either I/O bound or memory bound</li>
<li>*missing*</li>
<li>*missing*</li>
<li>SJF scheduling algorithm is optimal with respect to the average turnaround time.</li>
<li>In Linux completely fair scheduler, a process with higher priority has higher decay factor for its virtual run time</li>
<li>Bounded waiting requires a process trying to enter the critical section will eventually get in if no process is currently in it</li>
<li>Page table pages cannot be swap out to the disk by the Linux kernel</li>
<li>IA-32 only supports 6 segments per process as it only has 6 segment registers</li>
<li>The inverted page table is used to translate physical address into virtual addresses</li>
<li>DMA controllers can steal memory access cycles from the main CPU</li>
<li>The memory management unit (MMU) is a software component of the operating system to translate logical addresses to physical addresses</li>
<li>When a user process accesses a virtual address, it is the operating system that converts the virtual address into a physical address</li>
<li>With paging, virtually continuous memory can be physically discontinuous</li>
<li>Both segmentation and paging schemes are used in IA-32</li>
<li>A round-robin scheduling algorithm is non-preemptive, because it does not preempt the running process when another process switches from waiting to ready</li>
<li>Re-parenting happens when the parent process terminates before the child process</li>
</ol>
<p><strong>Answers：</strong></p>
<details>FTTTT TTTFT TFFTF ??TFF TFFTF FTTFT</details>

<h2 id="Q2-Short-Answers"><a href="#Q2-Short-Answers" class="headerlink" title="Q2. Short Answers"></a>Q2. Short Answers</h2><ol>
<li><p>A solution to the critical section problem must satisfy ______, ______ and ______.</p>
</li>
<li><p>The SV39 mechanism (some introductions). What are the page size of a Gigapage, Megapage and page?</p>
</li>
<li><p>The limitations of the Base &amp; Bounds scheme are ______, ______, ______.</p>
</li>
<li><p>What is TLB? When does uCore need to refresh TLB?</p>
</li>
<li><p>The limitations of the segmentation scheme are ______, ______, ______, ______.</p>
</li>
<li><p>What are the 3 privilege levels of RISC-V?</p>
</li>
<li><p>The 3 general methods used to pass system call parameters are ______, ______, ______.</p>
</li>
<li><p>Hard/Soft link in iNode-based file systems are different. When creating a hard/soft link, ______; when deleting a hard/soft link, ______.</p>
</li>
<li><p>The FAT32 file system stores file names into ______ and file attributes in ______, but ext2/3 file system stores file names in ______ and file attributes in ______.</p>
</li>
<li><p>What are the 3 thread models for mapping user-level thread to kernel-level thread?</p>
</li>
<li><p>The memory contents are shown as follows, what is the value of an integer at address 0x20 if the CPU is little endian(in hexadecimal)? </p>
<p><img src="https://s2.loli.net/2023/05/23/rkZK17cR3QGM8ne.png" alt="image.png"></p>
</li>
<li><p>______ is the phenomenon in which increasing the number of page frames results in an increase in the number of page faults for certain memory access patterns. This phenomenon is commonly experienced when using the ______ page replacement algorithm.</p>
</li>
</ol>
<p><strong>Answers</strong>:</p>
<details>
    <p>1. Mutual exclusion, progress, bounded waiting</p>
    <p>2. 2^30 Bytes, 2^21 Bytes, 2^12 Bytes</p>
    <p>3. Internal fragmentation, Connot support larger address space, Hard to do inter-process sharing</p>
    <p>4. CPU hardware cache to store PTEs that have been mostly reccently used, to spend up virtual address translation; When chaging page tables or updating page table contents.</p>
    <p>5. OS content switch must also saave and restire all pairs sof segment registers; A segment may grow, which may or may not be possible; Management of free spaces of physical memory with variable-sized segments; External fragmentation</p>
    <p>6. User, Supervisor, Machine</p>
    <p>7. Register, Block, Stack</p>
    <p>8. A hard link is a directory entry pointing to the iNode of an existing file; A symbolic link creates a new iNode, with the path to the target file in its data block; Deleting the target file does not affect the hard link, but deleting the target file makes the soft link invalid.</p>
    <p>9. FAT32 stores file names and attributes in the directory entries; ext2/3 file system stores the file name in the directry entries, and the file attributes in the iNode.</p>
    <p>10. one-to-one, Many-to-one, Many-to-many mapping</p>
    <p>11. 0x dd 42 34 e7</p>
    <p>12. Bélady's Anomalty, FIFO</p>
</details>

<h2 id="Q3-Questions-and-Answers"><a href="#Q3-Questions-and-Answers" class="headerlink" title="Q3. Questions and Answers"></a>Q3. Questions and Answers</h2><ol>
<li><p>On some CPU architecture, the page size is 16B, each page table entry is 4B, the virtual address has 8 bits.</p>
<p>(1) What is the size of the virtual space?</p>
<p>(2) If each level of page table fits into one page, how many levels of page tables are needed?</p>
<p>(3) If the relevant last-level page table is shown as below, what is the physical address of 0x64?</p>
<p>(4) If the CPU architecture changes to support page size of 32B, everything else remains unchanged. With the following page table, what is the physical address of 0x64?</p>
<p>Extra: The physical address of the virtual address 0x364 is 0x1164. What is the corresponding PFN(in decimal numbers)?</p>
<p><img src="https://s2.loli.net/2023/05/23/akqROWXvn49rxZe.png" alt="image.png"></p>
<p><strong>Answers</strong>:</p>
<details>
    <p>(1) 256 Bytes</p>
    <p>(2) 2 levels</p>
    <p>(3) 0x3e4</p>
    <p>(4) 0xc8</p>
</details>
</li>
<li><p>Suppose we have 3 page frames(1, 2, 3), 4 virtual pages(A, B, C, D), consider the following reference string: A B C A D B A C B C. What are the number of page faults for the following page replacement policies? Show each step in the tables.</p>
<p>(1) MIN</p>
<p>(2) LRU</p>
<p>(3) FIFO</p>
<p>(4) Clock (hint: only second page reference set reference bit)</p>
<p><img src="https://s2.loli.net/2023/05/23/rEflwc6y9Ovp2eP.png" alt="image.png"></p>
<p><strong>Answers</strong>:</p>
<details>
    <table>
    <tr>
        <td></td>
        <td>A</td>
        <td>B</td>
        <td>C</td>
        <td>A</td>
        <td>D</td>
        <td>B</td>
        <td>A</td>
        <td>C</td>
        <td>B</td>
        <td>C</td>
    </tr>
    <tr>
        <td>1</td>
        <td>A</td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td>C</td>
        <td></td>
        <td></td>
    </tr>
    <tr>
        <td>2</td>
        <td></td>
        <td>B</td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
    </tr>
    <tr>
        <td>3</td>
        <td></td>
        <td></td>
        <td>C</td>
        <td></td>
        <td>D</td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
    </tr>
</table>
<table>
    <tr>
        <td></td>
        <td>A</td>
        <td>B</td>
        <td>C</td>
        <td>A</td>
        <td>D</td>
        <td>B</td>
        <td>A</td>
        <td>C</td>
        <td>B</td>
        <td>C</td>
    </tr>
    <tr>
        <td>1</td>
        <td>A</td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
    </tr>
    <tr>
        <td>2</td>
        <td></td>
        <td>B</td>
        <td></td>
        <td></td>
        <td>D</td>
        <td></td>
        <td></td>
        <td>C</td>
        <td></td>
        <td></td>
    </tr>
    <tr>
        <td>3</td>
        <td></td>
        <td></td>
        <td>C</td>
        <td></td>
        <td></td>
        <td>B</td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
    </tr>
</table>
<table>
    <tr>
        <td></td>
        <td>A</td>
        <td>B</td>
        <td>C</td>
        <td>A</td>
        <td>D</td>
        <td>B</td>
        <td>A</td>
        <td>C</td>
        <td>B</td>
        <td>C</td>
    </tr>
    <tr>
        <td>1</td>
        <td>A</td>
        <td></td>
        <td></td>
        <td></td>
        <td>D</td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
    </tr>
    <tr>
        <td>2</td>
        <td></td>
        <td>B</td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td>A</td>
        <td></td>
        <td></td>
        <td></td>
    </tr>
    <tr>
        <td>3</td>
        <td></td>
        <td></td>
        <td>C</td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td>B</td>
        <td></td>
    </tr>
</table>
<table>
    <tr>
        <td></td>
        <td>A</td>
        <td>B</td>
        <td>C</td>
        <td>A</td>
        <td>D</td>
        <td>B</td>
        <td>A</td>
        <td>C</td>
        <td>B</td>
        <td>C</td>
    </tr>
    <tr>
        <td>1</td>
        <td>A</td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
    </tr>
    <tr>
        <td>2</td>
        <td></td>
        <td>B</td>
        <td></td>
        <td></td>
        <td>D</td>
        <td></td>
        <td></td>
        <td>C</td>
        <td></td>
        <td></td>
    </tr>
    <tr>
        <td>3</td>
        <td></td>
        <td></td>
        <td>C</td>
        <td></td>
        <td></td>
        <td>B</td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
    </tr>
</table>
</details>
</li>
<li><p>In a computer system that supports demand-paging, the memory access time is 50 ns, the average page fault service time is 5 ms. The page fault rate $p$ is 1/5000. What is the Effective Access Time?</p>
<p><strong>Answer</strong>:</p>
<details>
    <p>1.05 μs</p>
</details>
</li>
<li><p>Consider a set of 4 processes, with their arrival time and CPU burst time shown in the table. What is the average turnaround time with the following CPU scheduling algorithm?</p>
<p>(1) Non-preemptive SJF</p>
<p>(2) Preemptive SJF</p>
<p>(3) Round-robin with a scheduling quantum of 2(let’s assume here if two process arrive at the ready queue at the same time, the one with running-ready state transition is placed at the end of the queue).</p>
<p><strong>Answers:</strong></p>
<details>
<table>
    <p>(1) (6 + 11 + 5 + 5) / 4 = 6.75</p>
    <tr>
        <td>1</td>
        <td>2</td>
        <td>3</td>
        <td>4</td>
        <td>5</td>
        <td>6</td>
        <td>7</td>
        <td>8</td>
        <td>9</td>
        <td>10</td>
        <td>11</td>
        <td>12</td>
    </tr>
    <tr>
        <td>P1</td>
        <td>P1</td>
        <td>P1</td>
        <td>P1</td>
        <td>P1</td>
        <td>P1</td>
        <td>P3</td>
        <td>P4</td>
        <td>P4</td>
        <td>P2</td>
        <td>P2</td>
        <td>P2</td>
    </tr>
</table>
<p>(2) (12 + 4 + 1 + 3) / 4 = 5</p>
<table>
    <tr>
        <td>1</td>
        <td>2</td>
        <td>3</td>
        <td>4</td>
        <td>5</td>
        <td>6</td>
        <td>7</td>
        <td>8</td>
        <td>9</td>
        <td>10</td>
        <td>11</td>
        <td>12</td>
    </tr>
    <tr>
        <td>P1</td>
        <td>P2</td>
        <td>P3</td>
        <td>P2</td>
        <td>P2</td>
        <td>P4</td>
        <td>P4</td>
        <td>P1</td>
        <td>P1</td>
        <td>P1</td>
        <td>P1</td>
        <td>P1</td>
    </tr>
</table>
<p>(3) (12 + 9 + 3 + 5) / 4 = 7.25</p>
<table>
    <tr>
        <td>1</td>
        <td>2</td>
        <td>3</td>
        <td>4</td>
        <td>5</td>
        <td>6</td>
        <td>7</td>
        <td>8</td>
        <td>9</td>
        <td>10</td>
        <td>11</td>
        <td>12</td>
    </tr>
    <tr>
        <td>P1</td>
        <td>P1</td>
        <td>P2</td>
        <td>P2</td>
        <td>P3</td>
        <td>P1</td>
        <td>P1</td>
        <td>P4</td>
        <td>P4</td>
        <td>P2</td>
        <td>P1</td>
        <td>P1</td>
    </tr>
</table>
</details>
</li>
<li><p>In a disk scheduling algorithm, the range of the cylinders is 0~99. The arm head is originally located at track 50. The queue of requests is 25, 98, 52, 67, 42, 8. What is head movement distance, considering the following disk scheduling algorithms? Hint: for SCAN/C-SCAN/LOOK/C_LOOK, the arm head moves towards 99 first; for C-LOOK/C-SCAN, both directions count towards movement distance.</p>
<p>(1) SSTF</p>
<p>(2) C-LOOK</p>
<p>(3) SCAN</p>
<p>(4) FIFO</p>
<p><strong>Answers:</strong></p>
<details>
    <p>(1) 136</p>
    <p>(2) 172</p>
    <p>(3) 142</p>
    <p>(4) 218</p>
</details>
</li>
<li><p>A Turing Class student designed an iNode-based file system, called TCFS. The structure of an iNode in Site FS has 256 bytes, with 10 direct block pointers, 2 single indirect block pointers, and 1 double indirect block pointer. A block pointer takes 8 bytes. The block size is 8 KB.</p>
<p>(1) What is the maximum size of a file in TCFS?</p>
<p>(2) What is the maximum size of a file system with TCFS format?</p>
<p><strong>Answers:</strong></p>
<details>
    <p>10*8KB + 2*(8K/8)*8KB + (8K/8)*(8K/8)*8KB = 8GB</p>
    <p> 2 ^ 64 * 8K = 2 ^ 77</p>
</details>


</li>
</ol>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Operating System</tag>
      </tags>
  </entry>
  <entry>
    <title>CS334 操作系统 期末复习</title>
    <url>/2023/05/15/CS334_Final_Review/</url>
    <content><![CDATA[<p><img src="https://s2.loli.net/2023/01/01/8pS9IbAPfWXDOgt.png" alt=""></p>
<p>$\huge\text{Outline}$</p>
<ol>
<li>操作系统导论</li>
<li>操作系统基础</li>
<li>进程</li>
<li>CPU Scheduling</li>
<li>Synchronization</li>
<li>Address Translation</li>
<li>Paging</li>
<li>Demand Paging</li>
<li>Linux Memory Management</li>
<li>IO</li>
<li>Storage</li>
<li>File System</li>
</ol>
<p>Appendix: Quiz</p>
<h2 id="Chapter-1-操作系统导论"><a href="#Chapter-1-操作系统导论" class="headerlink" title="Chapter 1 - 操作系统导论"></a>Chapter 1 - 操作系统导论</h2><p><strong>计算机系统的结构</strong>:</p>
<ul>
<li>硬件<ul>
<li>提供基础计算资源</li>
<li>CPU, 内存, IO</li>
</ul>
</li>
<li>操作系统<ul>
<li>控制、协调 多应用/多用户 对于硬件的使用</li>
</ul>
</li>
<li>应用程序<ul>
<li>定义系统资源的使用方法，用于解决计算问题</li>
</ul>
</li>
<li>用户<ul>
<li>人、机器、其他计算机…</li>
</ul>
</li>
</ul>
<p><strong>操作系统</strong>:</p>
<p>使计算机正确、高效运行且易于使用的软件集。</p>
<p>A group of software that makes the computer operate correctly and efficiently in an easy-to-use manner.</p>
<p>操作系统包含一个称为<strong>内核</strong>的程序</p>
<ul>
<li>管理所有物理设备：CPU、RAM、硬盘……</li>
<li>提供诸如<strong>系统调用</strong>的函数</li>
</ul>
<p>操作系统包含其他的”helper”程序</p>
<ul>
<li>例如shell，提供了命令行用户接口</li>
<li>例如GUI，提供了有图标的用户友好的接口</li>
<li>例如浏览器，提供网页浏览服务</li>
</ul>
<p>操作系统是<strong>资源管理器</strong></p>
<ul>
<li>管理CPU、内存、硬盘、I/O设备</li>
<li>管控公平高效的资源使用，协调资源冲突</li>
</ul>
<p>操作系统是<strong>控制程序</strong></p>
<ul>
<li>控制程序的执行，避免错误或对计算机的不当使用</li>
</ul>
<p><strong>操作系统都做些什么</strong>:</p>
<p>虚拟化 Virtualization</p>
<ul>
<li>CPU虚拟化：单个CPU上运行多个程序</li>
<li>内存虚拟化：为进程(程序)分配相互独立的虚拟内存地址空间</li>
</ul>
<p>并发性 Concurrency</p>
<ul>
<li>运行多线程程序，保证其正确运行</li>
</ul>
<p>持久化 Persistence</p>
<ul>
<li>从RAM写入数据到持久内存</li>
<li>性能，崩溃恢复能力</li>
</ul>
<p><strong>操作系统的历史</strong>:</p>
<p>……</p>
<p><strong>进程</strong>:</p>
<p>进程(process)是在运行中的程序(program)</p>
<ul>
<li>程序是</li>
</ul>
<p>进程需要资源来完成任务</p>
<ul>
<li>CPU、内存、I/O、文件</li>
<li>进程终止，需要回收所有可再利用资源</li>
</ul>
<p>进程顺序执行指令，一次一个，直到结束</p>
<ul>
<li>单线程进程由PC指定下一条执行的指令位置</li>
<li>多线程进程的每个线程都有一个PC</li>
</ul>
<p>一般而言，计算机系统有多个进程，若干用户，若干操作系统在一个或多个CPU上运行</p>
<ul>
<li>通过在进程/线程之间复用(multiplexing)CPU来实现并发性</li>
</ul>
<p><strong>进程管理</strong>:</p>
<p>创建/删除用户和系统进程</p>
<p>暂停/恢复进程</p>
<p>为进程同步(process synchronization)提供机制</p>
<p>为进程通信(process communication)提供机制</p>
<p>为死锁处理(deadlock handling)提供机制</p>
<p><strong>内存</strong>：</p>
<p>动态随机访问内存DRAM</p>
<p>CPU在执行时只和主存交互</p>
<ul>
<li>处理前后数据都在内存里</li>
<li>执行的指令都在内存里</li>
</ul>
<p>操作系统管理内核和进程的主存，哪个进程用哪块内存</p>
<p><strong>内存管理</strong>:</p>
<p>内存管理决定，当优化CPU利用率、回应用户时内存中存储什么</p>
<p>内存管理活动</p>
<ul>
<li>记录哪些内存正在被哪些进程使用</li>
<li>决定哪些进程和数据要移入/移出内粗</li>
<li>按需申请/释放内存空间</li>
</ul>
<p><strong>存储管理</strong>:</p>
<p>操作系统提供信息存储的统一、逻辑的情况</p>
<ul>
<li><p>将物理属性抽象为逻辑存储单元：文件</p>
</li>
<li><p>每个介质都由设备控制</p>
<p>可变的性质包括访存速度、容量、数据传输率、访问方法(顺序/随机访问)</p>
</li>
</ul>
<p>文件系统管理</p>
<ul>
<li>文件通常分目录管理</li>
<li>访问控制：决定谁能访问什么</li>
<li>操作系统活动，包括：<ul>
<li>创建/删除文件和目录</li>
<li>操作文件和目录的原语(primitives)</li>
<li>将文件映射到二级存储</li>
<li>将文件备份到稳定存储介质</li>
</ul>
</li>
</ul>
<p><strong>I/O 子系统</strong>:</p>
<p>操作系统的一个目的是向用户隐藏硬件设备的特殊性</p>
<ul>
<li>包含I/O的内存管理<ul>
<li>缓存(buffering)，传输时临时存储数据</li>
<li>缓存(caching)，将部分数据放入高速缓存以提高性能</li>
</ul>
</li>
<li>通用的设备-驱动接口</li>
<li>特殊硬件设备的驱动</li>
</ul>
<p><strong>保护与安全</strong>:</p>
<p>保护：由操作系统定义，控制进程或用户对资源的访问的机制</p>
<p>安全：抵御内外对系统的攻击</p>
<p>操作系统决定哪个用户能做什么</p>
<ul>
<li>用户标识符：用户名，ID</li>
<li>将用户ID与该用户的所有文件、进程联系起来，以控制访问</li>
<li>组标识符(group ID)允许定义一组用户并管理控制权，与进程、文件相联系</li>
<li>特权升级允许用户改变ID以获得更多权利</li>
</ul>
<h2 id="Chapter-2-操作系统基础"><a href="#Chapter-2-操作系统基础" class="headerlink" title="Chapter 2 - 操作系统基础"></a>Chapter 2 - 操作系统基础</h2><p><strong>双模式操作(Dual-mode Operations)</strong>:</p>
<p>硬件支持至少两种模式</p>
<ul>
<li>内核模式：运行内核代码</li>
<li>用户模式：运行常规程序</li>
</ul>
<p>为实现双模式操作，硬件提供：</p>
<ul>
<li><p>一个<code>state</code>比特位</p>
</li>
<li><p>一些只能在内核模式执行的操作/行为</p>
</li>
<li><p>用户态→内核态，设置系统模式，并保存用户PC</p>
<p>操作系统将用户资源谨慎搁置，执行必要操作</p>
</li>
<li><p>内核态→用户态，清除系统模式，并恢复用户PC</p>
</li>
</ul>
<p>一些例子：</p>
<ul>
<li>x86 Ring 0 对应内核态，Ring 3对应应用态</li>
<li>RISC-V User/Supervisor/Machine 三种模式，应用态-内核态-固件态</li>
</ul>
<p><strong>三种模式转换的情形</strong>:</p>
<ol>
<li>系统调用(system call)</li>
</ol>
<ul>
<li><p>进程请求系统服务</p>
</li>
<li><p>类似函数调用，但在进程外</p>
</li>
<li>系统函数没有地址可供调用</li>
<li>向寄存器写入系统调用ID和参数，执行系统调用</li>
</ul>
<ol>
<li>中断(interrupt)</li>
</ol>
<ul>
<li>外部异步事件触发上下文切换(context switch)，如时钟、I/O设备</li>
<li>与用户进程独立</li>
</ul>
<ol>
<li>陷阱(trap)或异常(exception)</li>
</ol>
<ul>
<li>进程的内部同步事件触发上下文切换，如段错误、除以0…</li>
</ul>
<p><strong>系统调用</strong>:</p>
<p>由操作系统提供的服务的程序接口，以高级语言编写</p>
<p>每个系统调用都会有一个ID，映射关系表由系统调用接口维护</p>
<p>系统调用接口 调用 操作系统内核中对应的系统调用，返回系统调用的状态及返回值</p>
<p>调用者无需了解具体实现，只需要遵守调用规则，理解调用功能即可</p>
<p>大多数操作系统接口的细节通过library API隐藏，对使用者不可见</p>
<p>由运行时支持库（run-time support library, 包含在编译器中的库中的一组功能）管理</p>
<p><strong>系统调用类型</strong>:</p>
<ul>
<li>进程控制: fork, exit, wait</li>
<li>文件管理: open, read, write, close</li>
<li>设备管理: ioctl, read, write</li>
<li>信息维护: getpid, alarm, sleep</li>
<li>通信: pipe, shmget, mmap</li>
<li>保护: chmod, umask, chown</li>
</ul>
<p><strong>异常和中断</strong>:</p>
<p>异常(同步)应对非正常状况</p>
<ul>
<li>将swapped-out页映射回memory内</li>
<li>非法内存访问</li>
<li>除以0……</li>
</ul>
<p>中断(异步)抢占正常执行</p>
<ul>
<li>外部设备的通知</li>
<li>抢占式调度</li>
<li>另一个CPU的通知</li>
</ul>
<p>处理异常和中断</p>
<ul>
<li>停止执行当前程序</li>
<li>执行handler程序</li>
<li>处理器通过中断描述符表(Interrupt Descriptor Table, IDT)访问handler</li>
<li>每种中断对应一个数字</li>
</ul>
<p><strong>内核结构</strong>:</p>
<p><strong>宏内核</strong>:</p>
<p>宏内核(Monolithic Kernel)是一个操作系统软件框架，拥有访问所有I/O设备、内存、硬件中断、CPU栈的权限</p>
<p>宏内核包含很多组件，例如内存子系统、I/O子系统等，通常很大</p>
<p>宏内核是Linux, Unix, MS-DOS的基础</p>
<p><strong>微内核</strong>:</p>
<p>微内核(Micro Kernel)将操作系统功能外包给用户进程，灵活性、安全性、容错性增强</p>
<p>用户级服务器收到内核信任(通常以root身份运行)</p>
<p>保护机制保留在内核，资源管理转移到用户级服务器</p>
<p>代表性微内核操作系统：Mach, seL4</p>
<p>优点：</p>
<ul>
<li>内核响应速度更快：内核功能在可抢占的用户级进程种</li>
<li>稳定性和安全性提高：操作系统中代码更少</li>
<li>更好地支持并发性和分布式操作系统</li>
</ul>
<p>缺点：</p>
<ul>
<li>需要更多进程间通信(IPC)，带来更多上下文切换，更慢</li>
</ul>
<p><strong>杂交内核</strong>:</p>
<p>杂交内核(Hybrid Kernel)是宏内核和微内核的结合，例：Windows</p>
<p><strong>外内核</strong>:</p>
<p>外内核(Exokernel)将抽象与安全分开</p>
<ul>
<li>内核相当小：安全复用(security multiplexing)</li>
<li>Library OS作为进程运行：操作系统抽象化</li>
</ul>
<p>优点：</p>
<ul>
<li>直接管理资源，高效</li>
<li>易于进行新内核设计的实验</li>
</ul>
<p>缺点：</p>
<ul>
<li>通常只是个概念</li>
</ul>
<p>变种：nanokernel, picokernel</p>
<p><strong>虚拟化和管理程序</strong>:</p>
<p>管理程序(Hypervisor, virtual machine manager/monitor, VMM)强调<u>虚拟化</u>和<u>隔离</u></p>
<ul>
<li>操作系统可以在管理程序上几乎不做修改地运行</li>
<li>不同虚拟机之间资源隔离</li>
<li>微内核和外内核可用于实现管理程序</li>
</ul>
<p><strong>操作系统设计原则</strong>:</p>
<p>不同操作系统内部结构五花八门</p>
<ul>
<li>从设置目标和规格开始</li>
<li>收到硬件选择和系统类型的影响</li>
</ul>
<p>用户目标和系统目标</p>
<ul>
<li>用户目标：易于使用，易于上手，可靠安全高效</li>
<li>系统目标：易于设计、实现、维护，灵活可靠无错，高效</li>
</ul>
<p>操作系统区分开政策和机制</p>
<ul>
<li>政策(Policy)：哪个软件可以在什么时候访问什么资源</li>
<li>机制(Mechanism)：政策是如何实现的</li>
<li>分离政策和机制提供了灵活性，更换政策后选择对应机制即可</li>
</ul>
<p><strong>操作系统服务</strong>:</p>
<p>用户接口(UI)：几乎所有操作系统都有UI，CLI vs. GUI</p>
<p>程序执行：将程序载入内存并运行，结束执行，无论正常或异常</p>
<p>I/O操作：运行程序可能需要I/O，可能涉及文件操作或I/O设备</p>
<p>文件系统控制：创删读写查文件目录，权限管理</p>
<p>通信：进程间通信，网络通信</p>
<p>错误检测：时刻关注可能的错误，硬件/外设/用户程序…，恰当处理，调试功能</p>
<p>资源分配：多用户/多任务并行，各自分配各类资源(CPU，主存，文件存储)</p>
<p>账户管理：哪些用户使用了哪些计算机资源</p>
<p>保护与安全：多用户/网络计算机系统的权限需要管理，并行进程应互不干扰</p>
<p><strong>系统程序</strong>:</p>
<p>为程序开发和执行提供方便的环境，被分为：</p>
<ul>
<li>文件操作：创建、删除、复制、重命名、打印、转存、列表，操纵文件和目录</li>
<li>状态信息：日期、可用内存、性能、用户数量、调试信息…(注册表)</li>
<li>文件修改：文本编辑器，对文本进行修改</li>
<li>编程语言支持：编译器、汇编器、调试器、翻译器</li>
<li>程序加载与运行</li>
<li>通讯：提供虚拟连接的机制，供进程间、用户间、计算机系统间通信。</li>
<li>应用程序</li>
</ul>
<h2 id="Chapter-3-进程"><a href="#Chapter-3-进程" class="headerlink" title="Chapter 3 - 进程"></a>Chapter 3 - 进程</h2><h2 id="Appendix-Quiz"><a href="#Appendix-Quiz" class="headerlink" title="Appendix - Quiz"></a>Appendix - Quiz</h2><p><strong>Which of the following is/are correct about von Neumann architecture?</strong></p>
<p>❌It has better performance than Harvard architecture</p>
<ul>
<li>实际上哈佛架构把指令和数据分开之后，效率相对会高一点</li>
</ul>
<p>✔️It is a widely used architecture in modern computers</p>
<ul>
<li>确实，相当一部分计算机使用冯诺依曼架构</li>
</ul>
<p>✔️It use a shared memory for programs and data</p>
<ul>
<li>冯诺依曼架构特色</li>
</ul>
<p>❌It was first described in 1958</p>
<ul>
<li>冯诺依曼架构的名词提出于1945</li>
</ul>
<p><strong>Which of the following is/are true about dual-mode operation?</strong></p>
<p>❌The operating system must maintain a global bit to represent the current execution mode</p>
<ul>
<li>这个是CPU维护的</li>
</ul>
<p>❌Certain operations are not permitted in the kernel mode and will be trapped to the user mode</p>
<ul>
<li>反过来就是对的</li>
</ul>
<p>✔️Three ways to transit from user to kernel mode: system call, interrupt, and exception</p>
<ul>
<li>U→K: 系统调用，中断，异常</li>
</ul>
<p>❌Dual-mode operations are needed because applications need to be protected from OS</p>
<ul>
<li>反过来就是对的</li>
</ul>
<p><strong>What are the differences between an interrupt and an exception?</strong></p>
<p>✔️Interrupts are usually asynchronous with the program execution, but exceptions are usually synchronous</p>
<ul>
<li>中断是外部设备接入等与程序运行异步的事件产生的，异常则是于程序运行时同步产生的</li>
</ul>
<p>❌Interrupts may happen due to an abnormal condition, but exceptions are typically caused by normal conditions</p>
<ul>
<li>异常是对于异常(abnormal)情况的反馈，中断抢占正常执行。</li>
</ul>
<p>❌Interrupts and exceptions are handled in different ways</p>
<ul>
<li>都是到被捕获后由handler处理，具体不一样</li>
</ul>
<p>✔️Interrupts include notifications from devices or hardware components (e.g., APIC) but exceptions do not</p>
<ul>
<li>设备/硬件的异步通知造成中断，而不是异常</li>
</ul>
<p><strong>Which of the followings belong to operating system services?</strong></p>
<p>✔️Error detection and handling</p>
<p>✔️Inter-process communication and networking</p>
<p>❌CPU scheduling</p>
<ul>
<li>虽然CPU调度是进程管理的重要方面，但它并不被视为操作系统提供的独立服务</li>
</ul>
<p>✔️User interface</p>
<p><strong>Which of the followings is/are true about state transition(s) in a process life cycle?</strong></p>
<p><img src="https://s2.loli.net/2023/05/15/FGbZhvkB93QPHgM.png" alt="image.png" style="zoom: 40%;" /></p>
<p>✔️Waiting-&gt;ready upon I/O completion</p>
<p>✔️Ready-&gt;running when it is dispatched by the CPU scheduler</p>
<p>❌Waiting-&gt;running when return from I/O requests</p>
<p>❌Running-&gt;waiting when it has used up its CPU quota and begin to wait until its next turn</p>
<p><strong>Which of the followings is/are true about fork() and exec()?</strong></p>
<p>❌In the parent process, fork() returns 0; in the child process, fork() returns its own pid. </p>
<p>✔️The parent and child process share the same program counter, memory content, and opened files.</p>
<p>✔️Copy-on-write means the address space of the parent and child processes are only copied when updated</p>
<p>❌Calling exec() to load the same program into the memory is equivalent to not calling exec() at all</p>
<p><strong>Which of the followings is/are true about exit() and wait()?</strong></p>
<p>✔️Exit() is always invoked when the process terminates.</p>
<p>❌Exit() sends SIGCHLD to the parent process if the parent process is already waiting by calling wait().</p>
<p>✔️Exit() frees allocated kernel memory and everying on the userspace memory.</p>
<p>✔️A process becomes a zombie process when it is terminated but not yet cleaned up by its parent process.</p>
<p><strong>Which of the following is/are true about user-level and kernel-level thread?</strong></p>
<p>✔️Many-to-many mapping requires thread implementation on both user-level and kernel-level.</p>
<p>❌The benefit of one-to-many mapping is that when a user thread blocks on I/O, it may use other kernel thread to run.</p>
<p>✔️Kernel-level thread is an implementation of the thread abstraction in the OS kernel.</p>
<p>❌With many-to-one mapping, the OS kernel can schedule user threads independently.</p>
<p><strong>Which of the followings is/are true about preemptive scheduling?</strong></p>
<p>✔️If scheduler is invoked when a process switches from running to ready state, it is preemptive scheduling.</p>
<p>❌RR is non-preemptive because the scheduler is not invoked when a process switches from waiting to ready.</p>
<p>❌A scheduler is preemptive if it is invoked when a process switches from waiting to running.</p>
<p>✔️If the running process only gives up the CPU when it terminates or blocks on I/O, the scheduler is non-preemptive.</p>
<p><strong>Which of the following is/are true about race condition and mutual exclusion?</strong></p>
<p>✔️Implementation of critical sections require mutual exclusion, bounded-waiting and progress.</p>
<p>✔️Race condition may happen when two processes concurrently access shared variables. </p>
<p>❌Priority inversion may happen when two processes are synchronized with semaphores. </p>
<p>✔️Peterson’s solution satisfies all the three requirements of critical section implementation.</p>
<p><strong>Which of the following is/are true about semaphores?</strong></p>
<p>❌A binary semaphore could only have two values whereas a counting semaphore could have more than two values.</p>
<p>✔️Semaphores must be implemented in the kernel. </p>
<p>❌When solving producer-consumer problem with semaphores, it is OK to swap the order of wait(&amp;fill) and wait(&amp;mutex).</p>
<p>❌In the correct solution to dining philosopher problem, semaphore is used to model a chopstick. </p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Operating System</tag>
      </tags>
  </entry>
  <entry>
    <title>CS216 算法设计与分析 期末复习</title>
    <url>/2023/06/05/CS216_Final_Review/</url>
    <content><![CDATA[<p>$\huge\text{Outline}$</p>
<ol>
<li>稳定匹配</li>
<li>算法分析</li>
<li>贪心<ol>
<li>调度</li>
<li>Dijkstra</li>
<li>最小生成树</li>
<li>最小树形图</li>
<li>哈夫曼树</li>
<li>缓存</li>
</ol>
</li>
<li>分治<ol>
<li>$O(n\log n)$求逆序对</li>
<li>$O(n)$求第k小</li>
<li>$O(n\log n)$求平面最近点对</li>
<li>整数/矩阵乘法</li>
<li>FFT与卷积</li>
</ol>
</li>
<li>动态规划<ol>
<li>带权区间调度</li>
<li>分段最小二乘</li>
<li>背包问题</li>
<li>区间DP</li>
<li>带负环图最短路</li>
</ol>
</li>
<li>难问题<ol>
<li>归约</li>
<li>P, NP, NPC</li>
</ol>
</li>
<li>网络流<ol>
<li>最大流与最小割</li>
<li>Ford-Fulkerson</li>
<li>Capacity-Scaling</li>
<li>Edmonds-Karp</li>
<li>Dinitz’s</li>
<li>二分图匹配</li>
<li>不相交路径</li>
<li>多源多汇网络流</li>
<li>调查设计</li>
<li>航班调度</li>
<li>图像分割</li>
</ol>
</li>
<li>随机化算法<ol>
<li>访问调度</li>
<li>全局最小割</li>
<li>最大3-SAT</li>
<li>负载均衡</li>
</ol>
</li>
</ol>
<hr>
<h2 id="Chapter-1-稳定匹配"><a href="#Chapter-1-稳定匹配" class="headerlink" title="Chapter 1 - 稳定匹配"></a>Chapter 1 - 稳定匹配</h2><h3 id="定义-一对一匹配"><a href="#定义-一对一匹配" class="headerlink" title="定义(一对一匹配)"></a>定义(一对一匹配)</h3><p>输入：两个集合 $A=\{a_1,\cdots,a_n\}, B=\{b_1,\cdots,b_n\}$，以及每个元素对另一集合所有元素的偏好表。</p>
<p>完美匹配：$f:A\rightarrow B$是双射</p>
<p>不稳定对：未出现在匹配中，且双方对对方的偏好程度均高于当前匹配的偏好程度。例如匹配中存在$(a_1,b_1),(a_2,b_2)$，但$a_1$相比$b_1$更偏好$b_2$，且$b_2$相比$a_2$更偏好$a_1$，那么$(a_1,b_2)$被称为不稳定对。</p>
<p>稳定匹配：不存在不稳定对的完美匹配</p>
<h3 id="Gale-Shapley-算法"><a href="#Gale-Shapley-算法" class="headerlink" title="Gale-Shapley 算法"></a>Gale-Shapley 算法</h3><p>保证可以找到一个稳定匹配的算法，此处以婚配为例。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Initialize each person to be free.</span><br><span class="line">while (some man is free and hasn&#x27;t proposed to every woman)</span><br><span class="line">&#123;</span><br><span class="line">	Choose such a man m</span><br><span class="line">    w = 1st woman on m&#x27;s list to whom m has not yet proposed</span><br><span class="line">    if (w is free)</span><br><span class="line">    	assign m and w to be engaged</span><br><span class="line">    else if (w prefers m to her fiancé m&#x27;)</span><br><span class="line">    	assign m and w to be engaged, and m&#x27; to be free</span><br><span class="line">    else</span><br><span class="line">    	w rejects m</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="GS算法-正确性证明"><a href="#GS算法-正确性证明" class="headerlink" title="GS算法 - 正确性证明"></a>GS算法 - 正确性证明</h3><p><strong>Observation.</strong></p>
<ol>
<li>主动方按照偏好表降序提出匹配请求</li>
<li>被动方一旦匹配，就不会回到未匹配状态，只会更换到更偏好的匹配</li>
</ol>
<h4 id="算法一定终止"><a href="#算法一定终止" class="headerlink" title="算法一定终止"></a>算法一定终止</h4><p><strong>Claim</strong>. 算法在至多$n^2$轮while循环后终止</p>
<p><strong>Proof.</strong> 每次while循环，主动方会向一个新的被动方提出匹配请求，两个大小为$n$的集合至多有$n^2$种匹配，因此算法复杂度$O(n^2)$。</p>
<h4 id="匹配的完美性"><a href="#匹配的完美性" class="headerlink" title="匹配的完美性"></a>匹配的完美性</h4><p><strong>Claim.</strong> 所有元素在算法终止后都有匹配</p>
<p><strong>Proof.</strong> 反证法：假如某个主动方未被匹配，那么一定存在一个未被匹配的被动方。由Observation 2，该被动方一定从未收到匹配请求。但算法终止时主动方已对所有被动方进行了请求且仍未被匹配，引出矛盾。</p>
<h4 id="匹配的稳定性"><a href="#匹配的稳定性" class="headerlink" title="匹配的稳定性"></a>匹配的稳定性</h4><p><strong>Claim.</strong> 结果中不存在不稳定对</p>
<p><strong>Proof.</strong> 反证法：</p>
<p>记结果匹配为$S^\star$，其中存在配对$(a,y), (x,b)$。</p>
<p>假设存在不稳定对$(a,b)$，即$a$相比$y$更偏好$b$，而$b$相比$x$更偏好$a$</p>
<ol>
<li><p>$a$未向$b$发起匹配请求</p>
<p>说明$a$相比$b$更偏好$y$，引出矛盾</p>
</li>
<li><p>$a$向$b$发起过匹配请求</p>
<p>$b$拒绝了$a$，当即 或是 过了一会儿</p>
<p>说明$b$相比$a$更偏好$x$，引出矛盾</p>
</li>
</ol>
<p>两种情形均矛盾，因此不存在不稳定对。</p>
<h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><p>全局维护一个未匹配的主动方集合，每次选取其中的主动方进行匹配。</p>
<p>对于主动方，维护一个偏好值降序的队列，依次进行匹配请求。</p>
<p>对于被动方，维护一个从主动方到偏好值的映射，用于比对当前匹配是否更优，如有替换则将前任放回全局未匹配主动方集合。</p>
<h3 id="主被动方利益分析"><a href="#主被动方利益分析" class="headerlink" title="主被动方利益分析"></a>主被动方利益分析</h3><p>有效对象：如果某个稳定匹配中存在$(a,b)$，那么$a,b$互为有效对象。</p>
<h4 id="主动方最优性"><a href="#主动方最优性" class="headerlink" title="主动方最优性"></a>主动方最优性</h4><p><strong>Claim.</strong> GS算法得到的解$S^\star$对于主动方是最优的(每个主动方得到最优有效对象)</p>
<p><strong>Proof.</strong> 反证法：</p>
<p>假如不是主动方最优的，那么一定有某个主动方未与其最优有效对象匹配。</p>
<p>由于主动方是降序请求的，因此一定是被其最优有效对象拒绝了。</p>
<p>令首个这样的主动方为$a$，其最优有效对象为$b$。在$b$拒绝$a$时，一定更偏好于某个主动方$x$。由于$a$是首个被最优有效对象拒绝的主动方，所以$x$此时没有被任何有效对象拒绝过，即$b$是$x$的最优有效对象。</p>
<p>随后，由于$a$的最优有效对象是$b$，我们找到包含$(a,b)$的稳定匹配$S$，$S$包含$(x,y)$。根据上述分析，$b$相比$a$更偏好$x$，而$x$相比任何其他有效对象更偏好$b$，因此$(x,b)$是匹配$S$的不稳定对，引出矛盾。</p>
<h4 id="被动方最劣性"><a href="#被动方最劣性" class="headerlink" title="被动方最劣性"></a>被动方最劣性</h4><p><strong>Claim.</strong> GS算法得到的解$S^\star$对于被动方是最劣的(每个主动方得到最劣有效对象)</p>
<p><strong>Proof.</strong> 反证法：</p>
<p>假如不是被动方最劣的，那么一定有某个被动方未与其最劣有效对象匹配。</p>
<p>假如$S^\star$包含$(a,b)$，但$a$并不是$b$的最劣有效对象，假设其最劣有效对象为$x$。</p>
<p>我们找到包含$(x,b)$的稳定匹配$S$，$S$包含$(a,y)$。$b$相比$x$更偏好$a$，由主动方最优性，$b$一定是$a$的最优有效对象，即$a$相比$y$更偏好$b$，因此$(a,b)$是匹配$S$的不稳定对，引出矛盾。</p>
<h3 id="一对多匹配"><a href="#一对多匹配" class="headerlink" title="一对多匹配"></a>一对多匹配</h3><p>一对多匹配中，集合$A$中的一个元素可以与集合$B$中的多个元素匹配，此处将$A$中元素作为主动方进行讨论。</p>
<p>不稳定对$(a,b)$满足以下所有条件：</p>
<ul>
<li>$a,b$ 相互是可接受的</li>
<li>主动方$a$仍然有匹配容量，或者$a$相比其已经匹配的所有被动方元素更偏好$b$</li>
<li>被动方$b$未被匹配，或者$b$相比其已经匹配的主动方更偏好$a$</li>
</ul>
<h3 id="扩展GS算法"><a href="#扩展GS算法" class="headerlink" title="扩展GS算法"></a>扩展GS算法</h3><p>将具有容量的一方作为被动方，全局维护未匹配主动方的集合。</p>
<p>对于每个主动方，维护一个偏好值降序列表，依次进行匹配请求。</p>
<p>对于每个被动方，维护一个长度为容量的优先队列，存放当前被匹配的所有被动方。如果有更偏好的主动方请求匹配，将队首(偏好值最低)的主动方放回未匹配集合。</p>
<p>扩展GS算法的正确性和利益分析与上文所述类似，证明可参考Assignment 1。</p>
<h2 id="Chapter-2-算法分析"><a href="#Chapter-2-算法分析" class="headerlink" title="Chapter 2 - 算法分析"></a>Chapter 2 - 算法分析</h2><h3 id="运行时间分析"><a href="#运行时间分析" class="headerlink" title="运行时间分析"></a>运行时间分析</h3><p>最坏运行时间：给定输入数据规模，在所有不同的输入中，算法最大运行时间</p>
<p>平均运行时间：给定输入数据规模，对于随机的一个输入，算法的运行时间</p>
<p>最坏运行时间为多项式复杂度的算法被认为是高效的</p>
<h3 id="Asymptotic-Order-of-Growth"><a href="#Asymptotic-Order-of-Growth" class="headerlink" title="Asymptotic Order of Growth"></a>Asymptotic Order of Growth</h3><p><del>这玩意咋翻译来着，渐进时间复杂度吗</del></p>
<p>$O(n),\Omega(n),\Theta(n)$都是老朋友了</p>
<p>传递性，可加性，可乘性</p>
<h3 id="常见算法时间复杂度"><a href="#常见算法时间复杂度" class="headerlink" title="常见算法时间复杂度"></a>常见算法时间复杂度</h3><div class="table-container">
<table>
<thead>
<tr>
<th>类型</th>
<th>时间复杂度</th>
<th>应用</th>
</tr>
</thead>
<tbody>
<tr>
<td>常数(Constant)</td>
<td>$O(1)$</td>
<td>打表</td>
</tr>
<tr>
<td>对数(Logarithmic)</td>
<td>$O(\log n)$</td>
<td>二分查找</td>
</tr>
<tr>
<td>线性(Linear)</td>
<td>$O(n)$</td>
<td>求极值</td>
</tr>
<tr>
<td>算术线性(?)(Linearithmic)</td>
<td>$O(n\log n)$</td>
<td>归并排序，堆排</td>
</tr>
<tr>
<td>平方(Quadratic)</td>
<td>$O(n^2)$</td>
<td>暴力最近点对</td>
</tr>
<tr>
<td>立方(Cubic)</td>
<td>$O(n^3)$</td>
<td>集合不相容</td>
</tr>
<tr>
<td>指数(Exponential)</td>
<td>$O(c^n)$</td>
<td>暴力最大独立集</td>
</tr>
</tbody>
</table>
</div>
<h3 id="独立集问题"><a href="#独立集问题" class="headerlink" title="独立集问题"></a>独立集问题</h3><p>区间调度：$O(n\log n)$贪心</p>
<p>带权区间调度：$O(n\log n)$动态规划</p>
<p>二分图匹配：$O(n^k)$基于最大流算法</p>
<p>最大独立集：NP-complete</p>
<p>竞争便利店选址问题：PSPACE-complete</p>
<h3 id="均摊分析"><a href="#均摊分析" class="headerlink" title="均摊分析"></a>均摊分析</h3><p>这是赵老师的Lab课件内容，不过内容还挺重要的，之后再补吧。</p>
<h2 id="Chapter-3-贪心"><a href="#Chapter-3-贪心" class="headerlink" title="Chapter 3 - 贪心"></a>Chapter 3 - 贪心</h2><h3 id="区间调度"><a href="#区间调度" class="headerlink" title="区间调度"></a>区间调度</h3><p>问题：工作用一系列区间表示，工作不可并行，每个工作等权，最大化截止时间前完成的工作数。</p>
<p>贪心算法：按照DDL升序排序，贪心地选择当前尚未错过开始时间且DDL最近的一个完成。</p>
<p><strong>Theorem.</strong> 贪心算法是最优的</p>
<p><strong>Proof.</strong> 反证法：假如贪心算法结果不是最优，令贪心结果为$\{i_n\}$，最优结果为$\{j_m\}$，且两种方案的前$r$项相同。我们在所有最优解中，找到一个$\{j_m\}$使得其和贪心方案的重叠部分最多，即$r$最大。</p>
<p>由贪心策略，$i_{r+1}$的结束时间一定不会晚于$j_{r+1}$，那么我们将$i_{r+1}$替换$\{j_m\}$方案中的$j_{r+1}$，依然会得到一个最优的可行解，但是此时的重叠部分长度为$r+1$，引出矛盾。</p>
<h3 id="区间划分"><a href="#区间划分" class="headerlink" title="区间划分"></a>区间划分</h3><p>问题：课程用一系列区间表示，课程不可在同一教室并行，求安排下所有课程所需的最小教室数量。</p>
<p>贪心算法：按照开课时间升序排列，申请的所有教室按照最后一堂课的结束时间</p>
<p>放进优先队列，对于每节课，看上节下课最早的教室能不能放下，能的话就放，如果放不下那就新开一个教室加入队列。</p>
<p><strong>Theorem.</strong> 贪心算法是最优的</p>
<p>记贪心算法申请的教室数为$d$</p>
<p>第$d$个教室是因为贪心算法在规划第$j$节课时，前$d-1$个教室都放不下了，即该$d-1$个教室的最后一堂课的下课时间都比$j$的上课时间晚。</p>
<p>由于贪心按上课时间升序排列课程，所以这$d-1$个教室中的课程开始时间都比$j$的开始时间要晚，因此在第$j$节课开课后有$d$节课在同时上课。</p>
<p>根据题意，要能支持$d$节课同时进行至少需要$d$个教室，即不存在比贪心解更优的解。</p>
<h3 id="最小化迟到"><a href="#最小化迟到" class="headerlink" title="最小化迟到"></a>最小化迟到</h3><p>问题：给定工作耗时和DDL，同时只能做一件事，迟到值设定为完成时间与DDL之间的差值，最小化最大的迟到值。</p>
<p>贪心算法：DDL越早越先做</p>
<p><strong>Observation.</strong> 存在没有任何空闲间隔的最优解，贪心解也没有任何空闲间隔</p>
<p><strong>Observation.</strong> 对于没有空闲间隔的解，如果存在两个任务，DDL早的后完成，DDL晚的先完成，则称为一个逆序对。如果一个解有逆序对，那一定有一对连续规划的逆序对。(why?)</p>
<p><strong>Claim.</strong> 交换逆序对不会使最大迟到值增加。</p>
<p><strong>Proof.</strong> 记交换前的迟到值为$l$，交换后为$l’$，工作完成时间为$f$，截止时间为$d$。</p>
<ul>
<li>对于$k\ne i,j$，$l_k’=l_k$</li>
<li>$l_i’\le l_i$</li>
<li>$l_j’ = \max\{0,f_j-d_j\} = \max\{0,f_i-d_j\}\le \max\{0,f_i-d_i\} = l_i$</li>
</ul>
<p><strong>Theorem. </strong> 贪心解$S$是最优的</p>
<p><strong>Proof.</strong> 令$S^\star$为一个没有空闲间隔且逆序对数量最少的最优解。</p>
<p>如果$S^\star$没有逆序对，那么$S=S^\star$；</p>
<p>如果有逆序对，记相邻逆序对为$(i,j)$。交换$i,j$不会得到更劣解，但是将逆序对数量减少了1，引出矛盾。</p>
<h3 id="Dijkstra"><a href="#Dijkstra" class="headerlink" title="Dijkstra"></a>Dijkstra</h3><p>这也是老朋友了，每次贪心地挑dis最小的一个点去更新其他所有点。</p>
<p><strong>Invariant.</strong> 对于每个已探索集合$S$中的点$u$，$d(u)$即为$s-u$最短路的长度。</p>
<p><strong>Proof.</strong> 归纳法：</p>
<p>基态：$|S|=1$时，显然。</p>
<p>归纳假设：假设对于$|S|=1,\cdots,k$的时候结论均成立</p>
<p>记下一个探索的点为$v$，选中的边是$(u,v)$，此时$s-v$路径的长度为$\pi (v) = d(u)+l_{(u,v)}$。考虑任一$s-v$路径$P$，假设$(x,y)$是路径上离开$S$的第一条边，记到$x$的子路径为$P’$，那么有如下不等式：</p>
<script type="math/tex; mode=display">l(P)\ge l(P')+l_{(x,y)}\ge d(x)+l_{(x,y)}\ge \pi(y)\ge \pi(v)</script><p>从左到右四个不等号的原因分别为：边权非负，归纳假设，$\pi(y)$和$\pi(v)$的定义。由此证明了$d(v)=\pi(v)$即为$s-v$最短路的长度，$|S|=k+1$的时候也成立。</p>
<h3 id="A-star"><a href="#A-star" class="headerlink" title="$A^\star$"></a>$A^\star$</h3><p>给定起点和终点，引入启发式函数，用$h(v,t)+\pi(v)$作为优先级。</p>
<p>$h(v,t)&lt;d(v,t)$时保证结果正确，有可能比Dijkstra更快</p>
<p>$h(v,t)=d(v,t)$时保证结果正确，最快，但需要完全正确的知识</p>
<p>$h(v,t)&gt;d(v,t)$时，并不总能得到正确结果，不过可能还是快一些</p>
<h3 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h3><h4 id="Prim"><a href="#Prim" class="headerlink" title="Prim"></a>Prim</h4><p>维护一个已选点的集合，迭代$n-1$次，每次将连接生成树和树外一点的最短边加入树，并且把树外断点加入集合。$O(m\log n)$</p>
<h4 id="Kruskal"><a href="#Kruskal" class="headerlink" title="Kruskal"></a>Kruskal</h4><p>将边按边权升序排列依次加入生成树，如果成环了就不加（并查集）。$O(m\log m)$</p>
<h4 id="Reverse-Delete"><a href="#Reverse-Delete" class="headerlink" title="Reverse-Delete"></a>Reverse-Delete</h4><p>按照边权降序排列边，如果删边不影响连通性就删，重复m次。$O(m\log n (\log\log n)^3)$</p>
<h4 id="Borůvka"><a href="#Borůvka" class="headerlink" title="Borůvka"></a>Borůvka</h4><p>对于每个连通块，选择所有一端在连通块内，另一端在外的边中边权最小的一个加入生成树，迭代直到只剩一个连通块收工。$O(m\log n)$</p>
<h3 id="单链路-K-聚类"><a href="#单链路-K-聚类" class="headerlink" title="单链路 K-聚类"></a>单链路 K-聚类</h3><p>问题：给定集合$U$，初始包含$n$个对象，将其分入$k$个非空集合，最大化不同集合之间距离的最小值。</p>
<p>贪心算法：用Kruskal算法，但是只加$n-k$条边。等价于找最小生成树，然后删掉最贵的$k-1$条边。</p>
<p><strong>Theorem.</strong> 贪心算法是最优的</p>
<p>待补。</p>
<h3 id="最小树形图"><a href="#最小树形图" class="headerlink" title="最小树形图"></a>最小树形图</h3><p>问题：给定有向图$G$和根节点$r$，边权非负，求根节点位于$r$的最小树形图。</p>
<p>对于每个非根节点$v$，$y(v)$表示进入$v$的所有边中最小的边权，边$(u,v)$削减后的边权记为$c’(u,v)=c(u,v)-y(v)\ge 0$。</p>
<h4 id="朱刘算法-Edmonds’-Algorithm"><a href="#朱刘算法-Edmonds’-Algorithm" class="headerlink" title="朱刘算法 / Edmonds’ Algorithm"></a>朱刘算法 / Edmonds’ Algorithm</h4><p>对于每个非根节点$v$，选择最小入边，构成边集$E^\star$</p>
<p>$E^\star$中的所有边的削减后边权均为0，如果此时$E^\star$不包含环，则找到了最小树形图。</p>
<p>如果包含一个环$C$，那么将$C$收缩为一个超级结点，并删除其自环。</p>
<p>不断执行上述过程直到得到一个最小树形图，随后展开环删边断环即可。</p>
<h4 id="正确性证明"><a href="#正确性证明" class="headerlink" title="正确性证明"></a>正确性证明</h4><p>较为复杂，可参考课件，待补。</p>
<h3 id="哈夫曼编码"><a href="#哈夫曼编码" class="headerlink" title="哈夫曼编码"></a>哈夫曼编码</h3><h4 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h4><p>对于一个前缀编码格式$\gamma$，ABL (average bits per letter) 是每个字符的出现频率与其编码位数的乘积的和：</p>
<script type="math/tex; mode=display">ABL(\gamma) = \sum\limits_{x\in S}f_x|\gamma(x)|</script><p>哈夫曼编码：每次贪心选取出现频率最低的两个结点，将其连接到同一个父结点上，定义父节点的出现频率为两个子节点之和。伪代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Huffman(S)</span><br><span class="line">&#123;</span><br><span class="line">    if |S| == 2</span><br><span class="line">    &#123;</span><br><span class="line">    	return tree with root and 2 leaves</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        let x and y be lowest-frequency letters in S</span><br><span class="line">        let S’ be S with x and y removed</span><br><span class="line">        insert new letter ω in S’ with f[ω] = f[x] + f[y]</span><br><span class="line">        T’= Huffman(S’)</span><br><span class="line">        T = add two children x and y to leaf ω from T’</span><br><span class="line">        return T</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="相关证明"><a href="#相关证明" class="headerlink" title="相关证明"></a>相关证明</h4><p>时间复杂度：$T(n)=T(n-1)+O(\log n)$，因此$T(n)=O(n\log n)$。</p>
<p><strong>Claim.</strong> $ABL(T)=ABL(T’)+f_w$</p>
<p><strong>Proof.</strong> $T$是由$T’$的$w$结点下接$x,y$结点形成的。</p>
<script type="math/tex; mode=display">\begin{align*}ABL(T) &= \sum\limits_{k\in S}f_k\cdot \small\text{dep}_T(k)\\&=f_x\cdot \small\text{dep}_T(x)+f_y\cdot \small\text{dep}_T(y)+\sum\limits_{k\in S/\{x,y\}}f_k\cdot \small\text{dep}_T(k)\\&=(f_y+f_z)\cdot (1+\small\text{dep}_{T'}(w))+\sum\limits_{k\in S/\{x,y\}}f_k\cdot \small\text{dep}_{T'}(k)\\&=f_w+f_w\cdot \small\text{dep}_{T'}(w)+\sum\limits_{k\in S/\{x,y\}}f_k\cdot \small\text{dep}_{T'}(k)\\&=f_w+\sum\limits_{k\in S'}f_k\cdot \small\text{dep}_{T'}(k)\\&=f_w+ABL(T')\end{align*}</script><p><strong>Observations.</strong></p>
<ul>
<li>在最优的前缀编码树中，出现频率最低的字符对应的结点应该出现在最底层</li>
<li>$n&gt;1$时，最低层总是有至少两个叶子节点</li>
<li>同一层中的顺序并不影响编码最优性</li>
</ul>
<p><strong>Claim.</strong> 存在最优的前缀编码树，使得出现频率最低的两个字符作为树的两个相邻的叶子节点。</p>
<p><strong>Claim.</strong> 对于给定字符集$S$，在所有前缀编码中，哈夫曼编码有最小的ABL。</p>
<p><strong>Proof.</strong> 归纳法：</p>
<p>基态：对于$|S|=2$，没有比一根两叶更短的编码了</p>
<p>归纳假设：假设对于字符集$S’$，哈夫曼树$T’$给出的编码是最优的。其中$S’$没有加入最小频率的$x,y$而将$w$作为叶节点。</p>
<p>归纳步骤：反证法。</p>
<p>令$T$是哈夫曼树，假设存在树$Z$使得$ABL(Z)&lt;ABL(T)$，不失一般性地假设$Z$中$x, y$是相邻的叶子节点。将$x,y$从$Z$中删除得到$Z’$，记其父节点为$w’$。</p>
<p>由于$ABL(Z)=ABL(Z’)+f_{w’}$，$ABL(T)=ABL(T’)+f_w$，且$ABL(Z)&lt;ABL(T)$，$f_w=f_{w’}$，得到$ABL(Z’)&lt;ABL(T’)$，与假设矛盾。</p>
<p>也可以参考<a href="http://home.cse.ust.hk/faculty/golin/COMP271Sp03/Notes/MyL17.pdf">DSAA课程给的证明</a></p>
<h3 id="最优缓存"><a href="#最优缓存" class="headerlink" title="最优缓存"></a>最优缓存</h3><p>离线缓存 vs. 在线缓存：是否已知全部访问序列</p>
<p>贪心替换：LIFO, FIFO, LRU, LFU</p>
<p>最优贪心算法：Farthest-in-future (FF)，替换掉最晚在未来的访问中出现的成员。</p>
<p>最优性证明比较微妙，建议自己看课件过一遍。</p>
<h2 id="Chapter-4-分治"><a href="#Chapter-4-分治" class="headerlink" title="Chapter 4 - 分治"></a>Chapter 4 - 分治</h2><h3 id="逆序对计数"><a href="#逆序对计数" class="headerlink" title="逆序对计数"></a>逆序对计数</h3><p>$O(n\log n)$归并排序求逆序对</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Sort-and-Count(L)</span><br><span class="line">&#123;</span><br><span class="line">    if list L has one element</span><br><span class="line">    	return (0, L)</span><br><span class="line">    Divide the list into two halves A and B</span><br><span class="line">        (rA, A) = Sort-and-Count(A)</span><br><span class="line">        (rB, B) = Sort-and-Count(B)</span><br><span class="line">        (rAB, L) = Merge-and-Count(A, B)</span><br><span class="line">    return (rA + rB + rAB, L)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="线性求第k小"><a href="#线性求第k小" class="headerlink" title="线性求第k小"></a>线性求第k小</h3><p><del>这位更是印象深刻（✟Bo门✟</del></p>
<h4 id="随机化方法"><a href="#随机化方法" class="headerlink" title="随机化方法"></a>随机化方法</h4><p>随机选个主元(pivot)，将数组分为大于/小于/等于主元的三部分，数数第k大在哪一组，然后递归继续。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Quick-Select(A, k)</span><br><span class="line">&#123;	// 1 ≤ k ≤ |A|</span><br><span class="line">    Pick pivot p uniformly at random from A</span><br><span class="line">    Partition the list into two three parts L, M and R</span><br><span class="line">    if k ≤ |L|</span><br><span class="line">    	return Quick-Select(L, k)</span><br><span class="line">    else if k &gt; |L| + |M|</span><br><span class="line">    	return Quick-Select(R, k - |L| - |M|)</span><br><span class="line">    else</span><br><span class="line">    	return p</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>记$T(n,k)$为在长度为$n$的数组中求第$k$小的比较次数，记$T(n)=\max_kT(n,k)$。</p>
<p><strong>Claim.</strong> $T(n)\le 4n$</p>
<p><strong>Proof.</strong> 强归纳：</p>
<script type="math/tex; mode=display">\begin{align*}T(n)&\le n + \frac{1}{n}[2T(n/2)+\cdots+2T(n-2)+2T(n-1)]\\&\le n + \frac{1}{n}[8(n/2)+\cdots+8(n-2)+8(n-1)]\\&\le n+\frac{1}{n}(3n^2)\\&= 4n\end{align*}</script><p>确定性算法：中位数的中位数，优化版本大概要5.4305次比较，常数太大了实际一般不用，不过借鉴选主元的思路倒是不错。</p>
<h3 id="平面最近点对"><a href="#平面最近点对" class="headerlink" title="平面最近点对"></a>平面最近点对</h3><p>分治典中典。</p>
<p>问题：平面上$n$个点，找到点对间最小欧氏距离。</p>
<p>分治算法：按$x$坐标排序，分为数量相等的左右两部分。拆分：递归地分成两部分求子区域的最近点对距离；合并：左半边，右半边，以及左右两部分之间的点对距离。</p>
<p>记左右两部分内部的最近点对距离为$\delta$，合并时，只需要考虑横坐标在中点$±\delta$的点就足够了。对于中心区域的每个点$i$，我们也只需要考虑$y_i-\delta&lt;y_j\le y_i$的点$j$，因为每个点都要考虑所以只保证半边就行。为了方便比较$y$坐标，按$y$坐标再进行排序，这里排序可以用类似归并的方法，将低层递归排序后的点集归并即可，复杂度是$O(n)$的。</p>
<p>对于点$i$，记它需要比较的点集为$C_i$，$C_i$可能的分布范围是一个长为$2\delta$</p>
<p>宽为$\delta$的矩形，且$i$位于上长边的中点。将该矩形切分为8个${\delta\over2}*{\delta\over2}$的小正方形，那么每个小正方形内至多只能有一个点，除去$i$之后最多只有7个点。反证：每个小正方形内如果存在两个点，那么它们的距离最大值是$\delta\over\sqrt 2$，比之前设定的单边最小距离$\delta$还要小，引出矛盾。所以对于每个点$i$，我们只需要比对至多$7$个点。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Closest-Pair(p1, ..., pn)</span><br><span class="line">&#123;</span><br><span class="line">    Compute vertical line L such that half the points</span><br><span class="line">    are on one side and half on the other side.</span><br><span class="line">    </span><br><span class="line">    δ1 = Closest-Pair(left half)</span><br><span class="line">    δ2 = Closest-Pair(right half)</span><br><span class="line">    δ = min(δ1, δ2)</span><br><span class="line">    </span><br><span class="line">    Delete all points further than δ from line L.</span><br><span class="line">    </span><br><span class="line">    Sort remaining points by y-coordinate.</span><br><span class="line">    </span><br><span class="line">    Scan points in y-order and compare distance between</span><br><span class="line">    each point and next 7 neighbors. If any of these</span><br><span class="line">    distances is less than δ, update δ.</span><br><span class="line">    </span><br><span class="line">    return δ</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="整数乘法"><a href="#整数乘法" class="headerlink" title="整数乘法"></a>整数乘法</h3><p>竖式乘法：$\Theta(n^2)$</p>
<p>基础分治乘法：$x\cdot y =(2^ma+b)\cdot(2^mc+d) = 2^{2m}ac+2^m(ad+bc)+bd$。$T(n)=4T({n\over 2})+O(n)$，依然$\Theta(n^2)$</p>
<p>Karatsuba分治：$x\cdot y = 2^{2m}ac+2^m(ac+bd-(a-b)(c-d))+bd$。$T(n)=3T({n\over2})+O(n)$，降到了$\Theta(n^{\log_23})=\Theta(n^{1.585})$</p>
<h3 id="分块矩阵乘法"><a href="#分块矩阵乘法" class="headerlink" title="分块矩阵乘法"></a>分块矩阵乘法</h3><p>$\begin{bmatrix}<br> C_{11} &amp; C_{12}\\<br> C_{21} &amp; C_{22}<br>\end{bmatrix}=\begin{bmatrix}<br> A_{11} &amp; A_{12}\\<br> A_{21} &amp; A_{22}<br>\end{bmatrix}\times\begin{bmatrix}<br> B_{11} &amp; B_{12}\\<br> B_{21} &amp; B_{22}<br>\end{bmatrix}$</p>
<p>基础乘法：$C_{ij}=(A_{i1}\times B_{1j})+(A_{i2}\times B_{2j})$。$T(n)=4T({n\over2})+O(n^2)$，$T(n)=O(n^3)$</p>
<p>Strassen分治：用7次矩阵乘法计算$P_1\sim P_7$，再用于计算$C_{ij}$。$T(n)=7T({n\over 2})+O(n^2)$，$T(n)=O(n^{2.81})$</p>
<h3 id="卷积与FFT"><a href="#卷积与FFT" class="headerlink" title="卷积与FFT"></a>卷积与FFT</h3><h4 id="多项式表示"><a href="#多项式表示" class="headerlink" title="多项式表示"></a>多项式表示</h4><p>系数表示：$A(x) = \sum\limits_{i=0}^{n-1}a_{i}x^{i}$，$B(x) = \sum\limits_{i=0}^{n-1}b_{i}x^{i}$</p>
<p>多项式乘法(线性卷积)：$A(x)\times B(x) = \sum\limits_{i=0}^{2n-2}c_ix^i$，其中$c_i=\sum\limits_{j=0}^{i}a_jb_{i-j}$。暴力$O(n^2)$</p>
<p>点值表示：$A(x)=\{(x_i,y_i)|i\in[0,n-1]\}$，$B(x)=\{(x_i,z_i)|i\in[0,n-1]\}$</p>
<p>多项式乘法：$A(x)\times B(x) = \{(x_i,y_i\times z_i)|i\in[0,2n-1]\}$，$O(n)$但需要$2n$个点表示$A(x)$和$B(x)$</p>
<h4 id="系数转点值"><a href="#系数转点值" class="headerlink" title="系数转点值"></a>系数转点值</h4><p>对于$n-1$次多项式$A$，给定系数$\{a_i\}$，输出多项式在$n$个点处的值。</p>
<p>我们选取$n$阶单位根$w^0,\cdots,w^{n-1}$，其中$w=e^{2\pi i/n}$，那么$(w^k)^n=(e^{2\pi i/n})^n=(e^{\pi i})^{2k} = 1$。并且有$n\over 2$阶单位根为$v^0,\cdots,v^{n/2-1}$，其中$v=w^2=e^{4\pi i/n}$。</p>
<p>将多项式拆成奇数次幂和偶数次幂两部分：</p>
<script type="math/tex; mode=display">\begin{align}A_{even}(x)&=a_0+a_2x+a_4x^2+\cdots+a_{n/2-2}x^{(n-1)/2} \nonumber \\A_{odd}(x)&=a_1+a_3x+a_5x^2+\cdots+a_{n/2-1}x^{(n-1)/2} \nonumber \end{align}</script><p>则有：</p>
<script type="math/tex; mode=display">\begin{align}A(x)&=A_{even}(x^2)+xA_{odd}(x^2)\nonumber \\A(-x)&=A_{even}(x^2)-xA_{odd}(x^2) \nonumber \end{align}</script><p>代入$n$阶单位根，有：</p>
<script type="math/tex; mode=display">\begin{align*}A(w^k)&=A_{even}(v^k)+w^kA_{odd}(v^k),\ 0\le k<n/2\\A(w^{k+n/2})&=A_{even}(v^k)-w^kA_{odd}(v^k),\ 0\le k<n/2\end{align*}</script><p>那么我们就把求长度为$n$的多项式$A$在$w^k$和$w^{k+n/2}$两处的点值的问题$O(1)$转移到了求$v^k$点处两个长度为$n\over 2$的多项式的点值。对于求$n$个单位根的问题，我们在$O(n)$时间将其拆分成了两个规模折半的问题，$T(n)=2T(n/2)+O(n)$，即$T(n)=O(n\log n)$</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FFT(n, a0, a1, …, an-1)</span><br><span class="line">&#123;</span><br><span class="line">    if (n == 1)</span><br><span class="line">    	return a0</span><br><span class="line">    </span><br><span class="line">    (e0,e1,…,en/2-1) = FFT(n/2, a0,a2,a4,…,an-2)</span><br><span class="line">    (d0,d1,…,dn/2-1) = FFT(n/2, a1,a3,a5,…,an-1)</span><br><span class="line">    </span><br><span class="line">    for k = 0 to n/2 - 1</span><br><span class="line">    &#123;</span><br><span class="line">        ω[k] = exp(2πik/n)</span><br><span class="line">        y[k] = ek + ω[k] dk</span><br><span class="line">        y[k+n/2] = ek - ω[k] dk</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="点值转系数"><a href="#点值转系数" class="headerlink" title="点值转系数"></a>点值转系数</h4><p>只需要将$w^{-1}$作为单位根的底数即可，同样是$O(n\log n)$的。</p>
<h2 id="Chapter-5-动态规划"><a href="#Chapter-5-动态规划" class="headerlink" title="Chapter 5 - 动态规划"></a>Chapter 5 - 动态规划</h2><p>这个就比较灵性，考课件原题也不难，考其他的推不出来就寄，待补。</p>
<h2 id="Chapter-6-难问题"><a href="#Chapter-6-难问题" class="headerlink" title="Chapter 6 - 难问题"></a>Chapter 6 - 难问题</h2><h3 id="多项式时间归约"><a href="#多项式时间归约" class="headerlink" title="多项式时间归约"></a>多项式时间归约</h3><p>如果问题$X$可以通过以下步骤解决，那么认为问题$X$可以多项式时间归约到问题$Y$：</p>
<ul>
<li>使用多项式数量的标准计算步骤</li>
<li>使用多项式数量的解决问题$Y$的算法</li>
</ul>
<p>问题$X$可以多项式时间归约到问题$Y$，记作$X\le_P Y$。</p>
<ul>
<li>如果$X\le_P Y$，且$Y$多项式可解，则$X$多项式可解</li>
<li>如果$X\le_P Y$，且$X$多项式不可解，则$Y$多项式不可解</li>
<li>如果$X\le_P Y$且$Y\le_P X$，记作$X\equiv_P Y$，$X$多项式可解当且仅当$Y$多项式可解</li>
</ul>
<h3 id="简单等价归约"><a href="#简单等价归约" class="headerlink" title="简单等价归约"></a>简单等价归约</h3><p>独立集问题：给定图$G$和整数$k$，是否存在大小至少为$k$的点集，使得其中的每个点互不相邻？</p>
<p>顶点覆盖问题：给定图和整数$k$，是否存在大小不超过$k$的点集，使得所有边至少和点集中的一个点相连？</p>
<p><strong>Claim.</strong> 独立集问题 $\equiv_P$ 顶点覆盖问题</p>
<p><strong>Proof.</strong> 证明$S$是一个独立集当且仅当$V-S$是一个顶点覆盖。</p>
<h3 id="特殊到一般的归约"><a href="#特殊到一般的归约" class="headerlink" title="特殊到一般的归约"></a>特殊到一般的归约</h3><p>集合覆盖问题：给定一个集合$U$，以及集合$U$的一系列子集的集合$S$，问是否能选出$S$中不超过$k$个成员，使得其并集等于$U$？</p>
<p><strong>Claim.</strong> 顶点覆盖问题 $\le_P$ 集合覆盖问题</p>
<p><strong>Proof.</strong> 对于任一顶点覆盖问题，将其边集$E$作为集合覆盖问题的全集$U$，对于每个顶点，记录与其相连的边的集合，所有顶点各自相连的边集作为$S$的成员，将顶点数量限制$k$作为集合数量限制$k$，这样就构造了一个集合覆盖问题。</p>
<h3 id="利用Gadgets的归约"><a href="#利用Gadgets的归约" class="headerlink" title="利用Gadgets的归约"></a>利用Gadgets的归约</h3><p>3-SAT：合取范式，每个子句由三个文字(分别对应一个变量)进行或运算得到，问可满足性。</p>
<p><strong>Claim.</strong> 3-SAT $\le_P$ 独立集问题</p>
<p><strong>Proof.</strong> 对于给定3-SAT问题，将每个变量映射到图上的两个顶点，表示$x_i$和$\overline x_i$并建边$(x_i,\overline x_i)$；对于每个子句，在其三个文字对应的变量对应的顶点间建边，得到图$G$。子句数量为$|\Phi|$，则令图$G$上所求独立集的大小设为$|\Phi|$。3-SAT有解当且仅当图$G$存在一个大小为$|\Phi|$的独立集。</p>
<p>由于独立集大小和子句数量一致，那么$G$中的每个三角都会有恰好一个点被选入独立集，将该点对应的变量设为真，就得到了一个3-SAT的解。</p>
<h3 id="三类问题的归约"><a href="#三类问题的归约" class="headerlink" title="三类问题的归约"></a>三类问题的归约</h3><p>决定问题：是否存在大小不超过$k$的顶点覆盖？</p>
<p>搜索问题：找到一个大小不超过$k$的顶点覆盖</p>
<p>优化问题：找到最小的顶点覆盖</p>
<p><strong>Theorem.</strong> 顶点覆盖问题 $\equiv_P$ 搜索顶点覆盖问题</p>
<p><strong>Proof.</strong> </p>
<p>$\le_P$：决定问题是搜索问题的特例，搜索问题有解说明决定问题为真</p>
<p>$\ge_P$：为了找到一个大小不超过$k$的顶点覆盖：</p>
<ul>
<li>确定是否存在大小不超过$k$的顶点覆盖</li>
<li>用$O(n)$时间找到点$v$，使得$G/\{v\}$有一个大小不超过$k-1$的顶点覆盖</li>
<li>将$v$纳入顶点覆盖</li>
<li>在$G/\{v\}$中递归寻找一个大小不超过$k-1$的顶点覆盖。</li>
</ul>
<p><strong>Theorem.</strong> 搜索顶点覆盖问题 $\equiv_P$ 最小顶点覆盖问题</p>
<p><strong>Proof.</strong></p>
<p>$\le_P$：搜索问题是优化问题的特例，优化问题解可作为搜索问题解</p>
<p>$\ge_P$：二分答案</p>
<h3 id="P与NP"><a href="#P与NP" class="headerlink" title="P与NP"></a>P与NP</h3><p>P：存在多项式时间算法的决定性问题的集合</p>
<p>NP：存在多项式时间校验器(certifier)的决定性问题的集合(非确定多项式时间)</p>
<p>校验器：并不直接说明问题是否有解，而是检验给定的证书(certificate)是否能说明原问题有解</p>
<p>证书：用于说明原问题可能有解的输入</p>
<p><strong>Claim.</strong> $P⊆NP$</p>
<p><strong>Proof.</strong> $\forall X\in P$，$\exists$多项式算法$A(s)$可解$X$，证书为空，校验器为$A(s)$</p>
<p>EXP：存在指数时间算法的决定性问题的集合</p>
<p><strong>Fact.</strong> $P\ne EXP ⇒ (P\ne NP)\vee(NP\ne EXP)$</p>
<h3 id="NP-Complete"><a href="#NP-Complete" class="headerlink" title="NP-Complete"></a>NP-Complete</h3><h4 id="P-NP-NPC"><a href="#P-NP-NPC" class="headerlink" title="P, NP, NPC"></a>P, NP, NPC</h4><p>如果问题$X$可以通过以下步骤解决，那么认为问题$X$可以多项式时间(Cook)归约到问题$Y$：</p>
<ul>
<li>使用多项式数量的标准计算步骤</li>
<li>使用多项式数量的解决问题$Y$的算法</li>
</ul>
<p>如果对于任意问题$X$的实例$x$，我们都能构造问题$y$的实例$Y$，使得$x$有解当且仅当$y$有解，则认为问题$X$可以多项式时间(Karp)转化到问题$Y$。</p>
<p>NP-Complete：满足对于任意$NP$问题$X$，都有$X\le_P Y$的$NP$问题$Y$的集合</p>
<p><strong>Theorem.</strong> $NP$完全问题$Y$满足$Y\in P$当且仅当$P=NP$。</p>
<p><strong>Proof.</strong></p>
<ol>
<li>当$P=NP$时，$Y\in P$因为$Y\in NP$。</li>
<li>假设$Y\in P$，对于任何$X\in NP$，由于$X\le_P Y$，得到$X\in P$，即$NP⊆P$，由于$P⊆NP$，得到$P=NP$。</li>
</ol>
<p>NP-hard：每个$NP$问题都能多项式时间归约到的问题集合。</p>
<h4 id="如何证明NPC"><a href="#如何证明NPC" class="headerlink" title="如何证明NPC"></a>如何证明NPC</h4><p>电路可满足性问题：与或非门构成的组合电路，是否可以调整输入使输出为1？</p>
<p><strong>Theorem.</strong> 电路可满足性问题是$NP$完全问题</p>
<p><strong>Proof.</strong> </p>
<p>任何拥有定长输入，输出真/假的确定性算法可以用这样的电路表示，如果算法是多项式时间的，电路也是多项式尺寸的。</p>
<p>考虑$\forall X\in NP$，以及多项式时间校验器$C(s,t)$，为确定$s\in X$是否成立，只需要知道是否有一个长度为$p(|s|)$的证书$t$使得校验器输出真。</p>
<p>将$C(s,t)$视作一个输入长度$|s|+p(|s|)$的算法，并且将其转换为多项式尺寸的电路$K$，前$s$位固定输入为$s$，后$p(|s|)$位输入证书$t$，电路$K$可满足当且仅当$C(s,t)$输出真。</p>
<p>证明问题$Y$是$NP$完全问题的方法：</p>
<ol>
<li>说明是$NP$问题</li>
<li>选一个$NP$完全问题$X$</li>
<li>证明$X\le_P Y$</li>
</ol>
<p><strong>Theorem.</strong> 3-SAT 是 $NP$完全问题</p>
<p><strong>Proof.</strong> 已知3-SAT$\in NP$，仅需证明电路可满足性问题$\le_P$3-SAT</p>
<p>对于任意电路$K$，对于每个电路元素$i$创建一个3-SAT变量$x_i$</p>
<p>对于与或非三种运算分别构建子句：</p>
<script type="math/tex; mode=display">\begin{align*} x_2&=\neg x_3 &⇒ &x_2\vee x_3, \overline x_2\vee\overline x_3 \\ x_1&=x_4\vee x_5 &⇒ &x_1\vee \overline x_4, x_1\vee\overline  x_5, x_1\vee x_4\vee x_5 \\x_0&=x_1\wedge x_2 &⇒ &\overline x_0 \vee x_1, \overline x_0\vee x_2, x_0 \vee \overline x_1 \vee \overline x_2\end{align*}</script><p>随后将$K$硬编码的输入赋值给变量$x_i$，并将输出结点对应的变量$x_0$赋值为1。</p>
<p>最后，添加恒0变量来补全每个子句到三个文字，转化完成。</p>
<h4 id="一些NPC问题的例子"><a href="#一些NPC问题的例子" class="headerlink" title="一些NPC问题的例子"></a>一些NPC问题的例子</h4><p>集合覆盖，顶点覆盖，独立集，电路可满足性，SAT，3-SAT，哈密尔顿路径，哈密尔顿环路，TSP，三维匹配，三染色，子集和，背包</p>
<p>有很多$NP$问题要么是$P$要么是$NPC$，但也有反例： FACTOR, DISCRETE-LOG, GRAPH-ISOMORPHISM……</p>
<p><strong>Theorem.</strong> 除非$P=NP$，不然就存在既不是$P$也不是$NPC$的$NP$问题。</p>
<h2 id="Chapter-7-网络流"><a href="#Chapter-7-网络流" class="headerlink" title="Chapter 7 - 网络流"></a>Chapter 7 - 网络流</h2><p>流量网络$G=(V,E,s,t,c)$</p>
<p>流和割的定义：略</p>
<h3 id="Ford-Fulkerson算法"><a href="#Ford-Fulkerson算法" class="headerlink" title="Ford-Fulkerson算法"></a>Ford-Fulkerson算法</h3><p>正向边容量减去流量，反向边全权值设为流量</p>
<p>残量网络：边集为 有剩余容量的边 和 流量非零的反向边</p>
<p>增广路：残量网络中$s-t$的一条简单路径，处理后每条边容量都减去瓶颈容量，反向边都加上瓶颈容量。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Augment(f, c, P)</span><br><span class="line">&#123;</span><br><span class="line">    b = bottleneck(P)</span><br><span class="line">    foreach e ∈ P</span><br><span class="line">    &#123;</span><br><span class="line">        if (e ∈ E) f(e) = f(e) + b</span><br><span class="line">        else f(eR) = f(eR) - b</span><br><span class="line">    &#125;</span><br><span class="line">    return f</span><br><span class="line">&#125;</span><br><span class="line">Ford-Fulkerson(G, s, t, c)</span><br><span class="line">&#123;</span><br><span class="line">    foreach e ∈ E: f(e) = 0</span><br><span class="line">    Gf = residual network of G with respect to flow f</span><br><span class="line">    </span><br><span class="line">    while (there exists an augmenting path P)</span><br><span class="line">    &#123;</span><br><span class="line">        f = Augment(f, c, P)</span><br><span class="line">        update Gf</span><br><span class="line">    &#125;</span><br><span class="line">    return f</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>时间复杂度$O(mnC)$，因为每次增广至少提升一个流量，找到一个增广路需要$O(m)$时间。由于和容量相关，FF算法对于输入规模而言并不是多项式的。</p>
<p>输入规模：$m,n,\log C$，算法可能需要进行$2C$次迭代。</p>
<h3 id="最大流与最小割"><a href="#最大流与最小割" class="headerlink" title="最大流与最小割"></a>最大流与最小割</h3><h4 id="流量引理"><a href="#流量引理" class="headerlink" title="流量引理"></a>流量引理</h4><p>$f$是任意流，$(A,B)$是任意割，那么流的大小等于割之间的流的合成量</p>
<script type="math/tex; mode=display">\begin{align*}v(f)&=\sum\limits_{e\ out\ of\ s}f(e)=f^{out}(s)=f^{out}(s)-f^{in}(s)\\&=\sum\limits_{v\in A}(f^{out}(v)-f^{in}(v))\\&=\sum\limits_{e\ out\ of\ A}f(e)-\sum\limits_{e\ into\ A}f(e)\\&=f^{out}(A)-f^{in}(A)\end{align*}</script><h4 id="弱对偶性"><a href="#弱对偶性" class="headerlink" title="弱对偶性"></a>弱对偶性</h4><p>$f$是任意流，$(A,B)$是任意割，那么流的大小至多是割的容量</p>
<script type="math/tex; mode=display">\begin{align*}v(f)&=f^{out}(A)-f^{in}(A)\\&\le f^{out}(A)\\&=\sum\limits_{e\ out\ of\ A}f(e)\\&\le \sum\limits_{e\ out\ of\ A}c_e\\&=c(A,B)\end{align*}</script><h4 id="最优性的推论"><a href="#最优性的推论" class="headerlink" title="最优性的推论"></a>最优性的推论</h4><p>$f$是任意流，$(A,B)$是任意割，如果$v(f)=c(A,B)$，那么它们分别是最大流和最小割。</p>
<ol>
<li>存在一个割$(A,B)$使得$v(f)=c(A,B)$</li>
<li>$f$是最大流</li>
<li>对于$f$，没有增广路</li>
</ol>
<p>1→2：弱对偶性的推论</p>
<p>2→3：逆否命题：如果对于$f$有增广路，那么可以增加$f$，所以$f$不是最大流</p>
<p>3→1：$f$没有增广路，$A$是残量网络中$s$可以到达的点的集合，因此$s\in A$而$t\notin A$</p>
<h3 id="Capacity-Scaling算法"><a href="#Capacity-Scaling算法" class="headerlink" title="Capacity-Scaling算法"></a>Capacity-Scaling算法</h3><p>设置一个阈值$\Delta$，初始值为$2^{\lfloor\log C\rfloor}$，每次只考虑瓶颈容量在$\Delta$以上的增广路，随后将$\Delta$折半直到为0。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Capacity-Scaling(G, s, t, c)</span><br><span class="line">&#123;</span><br><span class="line">    foreach e ∈ E: f(e) = 0</span><br><span class="line">    Δ = largest power of 2 ≤ C</span><br><span class="line">    Gf = residual network with respect to flow f</span><br><span class="line">    </span><br><span class="line">    while (Δ ≥ 1)</span><br><span class="line">    &#123;</span><br><span class="line">        Gf(Δ) = Δ-residual network of G with respect to flow f</span><br><span class="line">        while (there exists an augmenting path P in Gf(Δ))</span><br><span class="line">        &#123;</span><br><span class="line">            f = Augment(f, c, P)</span><br><span class="line">            update Gf(Δ)</span><br><span class="line">        &#125;</span><br><span class="line">        Δ = Δ / 2</span><br><span class="line">    &#125;</span><br><span class="line">    return f</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Lemma.</strong> 外层循环$1+\lfloor\log_2C\rfloor$次终止</p>
<p><strong>Lemma.</strong> $f$是每次$\Delta$缩减循环后的流，最大流的值不会超过$v(f)+m\Delta$</p>
<p><strong>Lemma.</strong> 每次缩减循环中，至多有$2m$条增广路</p>
<p>因此该算法时间复杂度$O(m^2\log C)$</p>
<h3 id="Edmonds-Karp-算法"><a href="#Edmonds-Karp-算法" class="headerlink" title="Edmonds-Karp 算法"></a>Edmonds-Karp 算法</h3><p>利用BFS找边数最少的增广路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Edmonds-Karp(G, s, t, c)</span><br><span class="line">&#123;</span><br><span class="line">    foreach e ∈ E: f(e) = 0</span><br><span class="line">    Gf = residual network of G with respect to flow f</span><br><span class="line">    </span><br><span class="line">    while (there exists an augmenting path P in Gf)</span><br><span class="line">    &#123;</span><br><span class="line">        P = Breath-First-Search(Gf)</span><br><span class="line">        f = Augment(f, c, P)</span><br><span class="line">        update Gf</span><br><span class="line">    &#125;</span><br><span class="line">    return f</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Lemma.</strong> 最短增广路的长度不会减少</p>
<p><strong>Lemma.</strong> 至多$m$次最短路增广后，最短增广路的长度严格上升</p>
<p>找最短增广路$O(m)$，至多有$n-1$种不同的长度，对每种长度至多增广$m$次。因此该算法时间复杂度$O(m^2n)$</p>
<h3 id="Dinitz’s-算法"><a href="#Dinitz’s-算法" class="headerlink" title="Dinitz’s 算法"></a>Dinitz’s 算法</h3><ul>
<li>建立分层图$L_G$</li>
<li>从$s$开始在$L_G$中搜索，直到卡住或者到达$t$</li>
<li>如果到达$t$，增广，更新分层图，从$s$再开始</li>
<li>如果卡住，那就从分层图中删除该结点，跳回到上个结点重来</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Dinitz-Normal-Phase(Gf, s, t)</span><br><span class="line">&#123;</span><br><span class="line">    LG = level graph of Gf</span><br><span class="line">    P = empty path</span><br><span class="line">    Advance(s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Advance(v)</span><br><span class="line">&#123;</span><br><span class="line">    if (v = t)</span><br><span class="line">        f = Augment(f, c, P)</span><br><span class="line">        remove bottleneck edges from LG</span><br><span class="line">        P = empty path</span><br><span class="line">        Advance(s)</span><br><span class="line">    if (there exists (v, w) ∈ LG)</span><br><span class="line">        add edge (v, w) to P</span><br><span class="line">        Advance(w)</span><br><span class="line">        Retreat(v)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Retreat(v)</span><br><span class="line">&#123;</span><br><span class="line">    if (v = s) return</span><br><span class="line">    else</span><br><span class="line">        delete v and incident edges from LG</span><br><span class="line">        remove last edge (u, v) from P</span><br><span class="line">        Advance(u)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Dinitz(G, s, t, c)</span><br><span class="line">&#123;</span><br><span class="line">    foreach e ∈ E: f(e) = 0</span><br><span class="line">    Gf = residual network of G with respect to flow f</span><br><span class="line">    </span><br><span class="line">    while (there exists an augmenting path P in Gf)</span><br><span class="line">    &#123;</span><br><span class="line">    	Dinitz-Normal-Phase(Gf, s, t)</span><br><span class="line">    &#125;</span><br><span class="line">    return f</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>每个阶段初始化需要$O(m)$的BFS；增广至多$m$次，耗时$O(mn)$；回溯至多$n$次，耗时$O(m+n)$；至多$mn$次前进，耗时$O(mn)$。</p>
<p>每个阶段耗时$O(mn)$，至多有$n-1$个阶段，因此该算法时间复杂度$O(mn^2)$</p>
<h3 id="二分图匹配"><a href="#二分图匹配" class="headerlink" title="二分图匹配"></a>二分图匹配</h3><p>原图所有边容量设为$\infty$，将二分图的一方用容量为1的边全部连接到源点，另一方用容量为1的连到汇点得到图$G’$，$G’$的最大流就是最大匹配数。</p>
<p>赫尔婚姻定理：二分图$G$两点集$L,R$大小相同。$G$有完美匹配当且仅当对于所有$L$的子集$S$都有$|N(S)|\ge|S|$。</p>
<h3 id="不相交路径"><a href="#不相交路径" class="headerlink" title="不相交路径"></a>不相交路径</h3><p>两条不共用任何边的路径是不相交路径。</p>
<p>设置每条边容量为1，也就是最多只能被一条增广路通过，最大流就是不相交的路径数量，但并不一定是简单路径。</p>
<p>$s-t$割：每条$s-t$路径都用到了其中的至少一条边</p>
<p>Menger定理：最大的$s-t$不相交路径数等于最小$s-t$割所包含的边数。</p>
<p>如果是求无向图上的不相交路径数，那就每条无向边建两条有向边代替即可。</p>
<h3 id="多源多汇"><a href="#多源多汇" class="headerlink" title="多源多汇"></a>多源多汇</h3><p>把一个超级源点用$\infty$容量的边连到所有源点上，汇点同理。</p>
<h3 id="供需网络"><a href="#供需网络" class="headerlink" title="供需网络"></a>供需网络</h3><p>图$G$中，边有容量，点有需求/产出，在circulation中为每条边赋流量，使得每个点的入流量与出流量的差值为需求/产出。</p>
<p>在图$G’$中，把超级源点用产出值为容量的边连到所有产出的点上，需求点同理。图$G$有一个circulation当且仅当图$G’$最大流为所有需求的和。</p>
<p>图$G$不存在circulation，当且仅当图的一个点分割$(A,B)$中，$A$到$B$的容量和小于$B$中点的合需求量。</p>
<p>如果有下限要求，那一开始就把供方需求+2，接收方需求-2，再拆成两条边建，权值分别为(下限)和(上限与下限的差)</p>
<h3 id="调查设计"><a href="#调查设计" class="headerlink" title="调查设计"></a>调查设计</h3><p>从超级源点到受访者建边，容量上下限是受访者可以接受的问题数量；</p>
<p>从产品到超级汇点建边，容量上下限是产品调查结果的需求数量；</p>
<p>从受访者到产品建边，容量上限为1，同一个人对同一产品只能填写一次问卷；</p>
<p>从超级汇点到超级源点建边，容量无限制。所有点的供需均为0。</p>
<p>如果找到了integer circulation，说明有可行的调查方案</p>
<h3 id="航班调度"><a href="#航班调度" class="headerlink" title="航班调度"></a>航班调度</h3><p>每个航班拆成两个点，两点之间建立一个容量上下限均为1的边。</p>
<p>源点连接每个航班的入点，源点提供$c$组乘务人员，每个航班的出点用$[0,1]$的边连接汇点，需求$c$组乘务人员。从源点到汇点连接一条$[0,c]$的边，表示闲置乘务组。</p>
<p>如果航班可以首尾相连，将前一班的出点连接到后一班的入点，容量为$[0,1]$。</p>
<p>最小化所需乘务组数量时，可以二分$c$。航班数为$k$时，时间复杂度$O(k^3\log k)$。</p>
<h3 id="图像分割"><a href="#图像分割" class="headerlink" title="图像分割"></a>图像分割</h3><p>看看就好，现在也不用网络流做图像分割。</p>
<p>相邻格点间建双向边，容量为其一为前景另一为背景的罚值；</p>
<p>从源点到每个点建边，容量是该点和前景的相似度；</p>
<p>从每个点到汇点建边，容量是该点和背景的相似度。</p>
<p>在这个图上跑最小割就OK。</p>
<h2 id="Chapter-8-随机化"><a href="#Chapter-8-随机化" class="headerlink" title="Chapter 8 - 随机化"></a>Chapter 8 - 随机化</h2><p>随机化真的是一门具有极高美学价值的艺术。</p>
<h3 id="访问调度"><a href="#访问调度" class="headerlink" title="访问调度"></a>访问调度</h3><p>如果同时有多个进程请求访问资源，那就都不能访问资源。<del>两个和尚没水喝</del></p>
<p>$n$个进程，每个进程每个时刻有$1/n$概率可以访问资源，那么不存在race condition的概率随$n$增加从$1/2$收敛到$1/e$。</p>
<p>所有进程都能在$2en\ln n$轮中完成访问的概率至少为$1-1/n$。</p>
<h3 id="全局最小割"><a href="#全局最小割" class="headerlink" title="全局最小割"></a>全局最小割</h3><p>无向图，不给源点汇点，求全局的最小割。</p>
<p>网络流解法：选一些源点，对其他所有点$v$求最小$s-v$割</p>
<p>收缩算法：随便选一条边，收缩这条边并将两个端点合并为超级顶点，删掉自环保留其他边(包含重边)，重复该过程直到只剩两个超级结点，返回此时的割。</p>
<p><strong>Theorem</strong>. 收缩算法以不低于$2/n^2$的概率给出最小割的正解</p>
<p>为了提高正确率，多跑几遍：当运行了$n^2\ln n$次时，还找不到正解的概率不超过$1/n^2$。</p>
<p>实际上，全局最小割的随机算法可以达到$O(m\log^3 n)$，甚至比最大流算法还快。</p>
<h3 id="最大3-SAT"><a href="#最大3-SAT" class="headerlink" title="最大3-SAT"></a>最大3-SAT</h3><p><strong>Claim.</strong> 给定一个有$k$个子句的3-SAT问题，随机赋值可以满足的期望子句数是$7k/8$。</p>
<p>由于是期望值，所以我们总是能通过随机生成一个满足高于$7k/8$个子句的解。于是我们持续随机，直到找到一个满足不低于$7k/8$个子句的解。</p>
<p>已被证明：除非$P=NP$，否则没有比$7/8-$渐进更高的随机渐进算法了。</p>
<h3 id="蒙特卡洛与拉斯维加斯"><a href="#蒙特卡洛与拉斯维加斯" class="headerlink" title="蒙特卡洛与拉斯维加斯"></a>蒙特卡洛与拉斯维加斯</h3><p>蒙特卡洛：能在多项式时间内跑完，但不一定给出正确结果</p>
<p>e.g. 全局最小割</p>
<p>拉斯维加斯：能保证给出正确结果，但不一定能在多项式时间内跑完</p>
<p>e.g. 随机快排，最大3-SAT算法</p>
<h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>中心化控制：Round-Robin给每个处理器均衡安排任务</p>
<p>分布式控制：每个任务都以一定概率随机给任何处理器</p>
<p>问题：有多大概率某个处理器过载了？</p>
<p>利用切诺夫界和布尔边界等工具分析，没有处理器接受超过$\Theta(\log n/\log \log n)$个任务的概率不低于$1-1/n$。</p>
<p><img src="https://hliangzhao.cn/static/resources/mathbasis/markov.png" style="zoom: 67%;" /></p>
<p>(切诺夫界示意图，从图片搜索引擎拿的，我也不知道对不对)</p>
<p>如果总任务数$m=16n\ln n$，那么每个处理器的负载在一半到两倍平均值的概率不低于$1-2/n$。</p>
<p><del>不知道处理器会不会过载，反正我写到这里已经过载了</del></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>CS311 人工智能 期末复习</title>
    <url>/2023/06/12/CS311_Final_Review/</url>
    <content><![CDATA[<p>$\huge\text{Outline}$</p>
<ol>
<li>人工智能概述</li>
<li>搜索</li>
<li>启发与元启发</li>
<li>对抗搜索</li>
<li>约束满足问题</li>
<li>逻辑</li>
<li>机器学习概述</li>
<li>线性回归与对数回归</li>
<li>支持向量机</li>
<li>感知机与神经网络</li>
<li>决策树与朴素贝叶斯</li>
<li>集成学习与聚类</li>
<li>强化学习</li>
<li>自然语言处理</li>
</ol>
<hr>
<h2 id="Chapter-1-人工智能概述"><a href="#Chapter-1-人工智能概述" class="headerlink" title="Chapter 1 - 人工智能概述"></a>Chapter 1 - 人工智能概述</h2><p>第一课略，大致是概念的介绍和AI发展的介绍。</p>
<h3 id="智能体"><a href="#智能体" class="headerlink" title="智能体"></a>智能体</h3><p><strong>智能体的特征</strong></p>
<ul>
<li><p>通过探测器感知环境</p>
<p>perceiving its environment through sensors</p>
</li>
<li><p>根据环境利用执行器执行操作</p>
<p>acting upon that environment through actuators</p>
</li>
</ul>
<p>智能体运行周期：感知(perceive)，思考(perceive)，行动(act)</p>
<p>智能体是Architecture和Program的互补兼容。</p>
<p><strong>Rationality的评价标准：PEAS</strong></p>
<ul>
<li>Performance</li>
<li>Environment</li>
<li>Actuators</li>
<li>Sensors</li>
</ul>
<p><strong>智能体的类型</strong></p>
<ul>
<li><p>Simple reflex agents</p>
<p>只根据当前状态决策行动，需要完全可观测环境，且正确行动只与当前观测有关。</p>
</li>
<li><p>Model-based reflex agents</p>
<p>智能机内部状态由历史观测决定，可以处理部分可观测环境</p>
<p>建立环境模型：环境如何独立演变 + 行动如何影响环境</p>
</li>
<li><p>Goal-based agents</p>
<p>拥有目标信息，考虑每种行动对接近目标的贡献</p>
</li>
<li><p>Utility-based agents</p>
<p>Utility function评估智能体性能，选择最大化期望utility的行动</p>
</li>
<li><p>Learning agents</p>
<p>Learning element：根据输入进行提升</p>
<p>Performance element：选择执行的行动</p>
<p>Critic：由固定的性能评估标准决定智能体的表现</p>
<p>Problem Generator：允许智能体进行探索</p>
</li>
</ul>
<p><strong>智能体的状态</strong></p>
<ul>
<li><p>原子表示Atomic Representation</p>
<p>每个环境状态都是不具有内部结构的黑盒</p>
<p>Search, games, Markov decision processes, hidden Markov models, etc</p>
</li>
<li><p>因子表示Factored Representation</p>
<p>每个状态都有一些属性，可以用一组变量来表示</p>
<p> Constraint satisfaction, and Bayesian networks. </p>
</li>
<li><p>结构表示Structured Representation</p>
<p>状态之间的关系可以显式表达</p>
<p>First order logic, knowledge-based learning, natural language understanding. </p>
</li>
</ul>
<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p><strong>环境的类型</strong></p>
<ul>
<li><p>完全可观测Fully observable/部分可观测Partially observable</p>
</li>
<li><p>确定Deterministic/随机Stochastic</p>
<p>下一步的环境是否只由Agent的行动和当前环境决定。</p>
</li>
<li><p>Episodic/Sequential</p>
<p>前者说明每一步行动不影响下一步，后者说明会影响。</p>
</li>
<li><p>静态Static/动态Dynamic</p>
<p>环境在智能体运行时是否变化(半动态：环境不变，但评分变动)</p>
</li>
<li><p>离散Discrete/连续Continuous</p>
</li>
<li><p>单智能体Single-agent/多智能体Multi-agent</p>
</li>
<li><p>已知Known/未知Unknown</p>
<p>设计者是否拥有对环境的知识</p>
</li>
</ul>
<h2 id="Chapter-2-搜索"><a href="#Chapter-2-搜索" class="headerlink" title="Chapter 2 - 搜索"></a>Chapter 2 - 搜索</h2><h3 id="搜索概述"><a href="#搜索概述" class="headerlink" title="搜索概述"></a>搜索概述</h3><p><strong>通过搜索解决问题</strong></p>
<ol>
<li><p>定义问题</p>
<p>(a)目标形式化</p>
<p>(b)问题形式化</p>
</li>
<li><p>两步解决问题</p>
<p>(a)离线搜索不同行动</p>
<p>(b)执行搜索结果</p>
</li>
</ol>
<p><strong>问题形式化</strong></p>
<ul>
<li>初始状态</li>
<li>状态：所有由初始状态，通过任意行动序列可达的状态集合(状态空间)</li>
<li>行动：对于一个状态，智能体可以执行的所有行动(行动空间)</li>
<li>转化模型：描述每个行动对当前状态造成的影响</li>
<li>目标检测：决定给定状态是否已经达到目标</li>
<li>路径开销：根据性能标准为动作序列赋上数值开销的函数</li>
</ul>
<p><strong>状态空间 vs. 搜索空间</strong></p>
<ul>
<li><p>状态空间是实际状态的集合</p>
</li>
<li><p>搜索空间是抽象成搜索树/图的可行解集合</p>
</li>
<li><p>搜索树描述了行动序列</p>
<ul>
<li><p>根节点：初始状态</p>
</li>
<li><p>分支：行动</p>
</li>
<li><p>结点：行动的结果</p>
<p>每个结点有：父节点，子节点，深度，路径开销，在状态空间对应的状态</p>
</li>
</ul>
</li>
<li><p>扩张Expand：对于给定结点，创建所有子结点的函数</p>
</li>
</ul>
<p><strong>搜索空间的三个区域</strong></p>
<ol>
<li>Explored (a.k.a. Closed List, Visited Set) </li>
<li>Frontier  (a.k.a. Ready list, Open List, the Fringe) </li>
<li>Unexplored</li>
</ol>
<p>搜索就是从3到2再到1的过程，搜索策略决定了顺序。</p>
<p><strong>搜索策略</strong></p>
<p>搜索策略由选定结点进行扩张的顺序来定义，评价标准：</p>
<ul>
<li>完备性Completeness</li>
<li>时间复杂度Time complexity</li>
<li>空间复杂度Space complexity</li>
<li>最优性Optimality</li>
</ul>
<p>时间复杂度和空间复杂度的评估：</p>
<ul>
<li>$b$ - 搜索树最大的分支数量</li>
<li>$d$ - 解的深度</li>
<li>$m$ - 状态空间的最大深度</li>
</ul>
<h3 id="无信息搜索"><a href="#无信息搜索" class="headerlink" title="无信息搜索"></a>无信息搜索</h3><p>不使用domain knowledge的搜索。</p>
<ul>
<li><p>Breadth-first search / 广度优先 / BFS</p>
<p>优先探索最浅的结点</p>
</li>
<li><p>Depth-first search / 深度优先 / DFS</p>
<p>优先探索最深的结点</p>
</li>
<li><p>Depth-limited search / 深度限制 / DLS</p>
<p>带深度限制的DFS</p>
</li>
<li><p>Iterative-deepening search / 迭代加深 / IDS</p>
<p>不断放宽深度限制(提高深度上限)的DLS</p>
</li>
<li><p>Uniform-cost search (UCS) / 统一代价 / UCS</p>
<p>优先探索开销最小的结点（参考Dijkstra）</p>
</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th>完备性</th>
<th>时间</th>
<th>空间</th>
<th>最优性</th>
<th>实现</th>
</tr>
</thead>
<tbody>
<tr>
<td>BFS</td>
<td>有限分支则完备</td>
<td>$O(b^d)$</td>
<td>$O(b^d)$</td>
<td>每步开销都为1则最优</td>
<td>Queue</td>
</tr>
<tr>
<td>DFS</td>
<td>有限状态空间则完备</td>
<td>$O(b^m)$</td>
<td>$O(bm)$</td>
<td>否</td>
<td>Stack</td>
</tr>
<tr>
<td>UCS</td>
<td>有限开销则完备</td>
<td>$O(b^{C^*/\epsilon})$</td>
<td>$O(b^{C^*/\epsilon})$</td>
<td>是</td>
<td>Heap</td>
</tr>
</tbody>
</table>
</div>
<p>* 其中$C^*$是最优解的开销，每一步行动至少开销$\epsilon$</p>
<h3 id="有信息搜索"><a href="#有信息搜索" class="headerlink" title="有信息搜索"></a>有信息搜索</h3><p>使用领域知识来获取关于当前状态与目标距离的信息。</p>
<h4 id="贪心BFS"><a href="#贪心BFS" class="headerlink" title="贪心BFS"></a>贪心BFS</h4><p>把到目标的估计费用$h(n)$当作唯一标准贪心搜索</p>
<h4 id="A-搜索"><a href="#A-搜索" class="headerlink" title="A*搜索"></a>A*搜索</h4><p>$f(n)=$到当前结点的费用$g(n)$+当前结点到目标的估计费用$h(n)$</p>
<p>$f(n)$是经过结点$n$的最优路径费用的估值</p>
<p>完备性：是</p>
<p>时间复杂度：指数级</p>
<p>空间复杂度：每个结点都在内存里，最大的问题</p>
<p>最优性：是</p>
<h4 id="可接受的启发函数-Admissible-heuristics"><a href="#可接受的启发函数-Admissible-heuristics" class="headerlink" title="可接受的启发函数(Admissible heuristics)"></a>可接受的启发函数(Admissible heuristics)</h4><p>如果启发式函数从不高估到达目标的费用，那么就是可接受的(admissible)，并且使用该启发式函数的A*得到的解是最优的。</p>
<p>证明：</p>
<ul>
<li><p>Suppose $G_o$ is the optimal goal.</p>
<p>Suppose $G_s$ is some suboptimal goal.</p>
<p>Suppose $n$ is on the shortest path to $G_o$. </p>
</li>
<li><p>$f(G_s) = g(G_s)$ since $h(G_s) = 0$</p>
<p>$f(G_o ) = g(G_o )$ since $h(G_o ) = 0$</p>
<p>$g(G_s)&gt;g(G_o )$ since $G_s$ is suboptimal</p>
</li>
<li><p>Then $f(G_s) &gt; f(G_o ) . . . (1)$</p>
<p>$h(n)\le h^*(n)$ since h is admissible</p>
<p>$g(n)+h(n)\le g(n)+h^* (n) = g(G_o ) = f(G_o )$</p>
<p>Then $f(n) \le f(G_o ) . . . (2)$</p>
</li>
<li><p>From (1) and (2) $f(G_s)&gt;f(n)$, so A* will never select $G_s$ during the search and hence A* is optimal.</p>
</li>
</ul>
<h4 id="IDA-搜索"><a href="#IDA-搜索" class="headerlink" title="IDA*搜索"></a>IDA*搜索</h4><p>把迭代加深方法加到A*搜索上。</p>
<h3 id="局部搜索"><a href="#局部搜索" class="headerlink" title="局部搜索"></a>局部搜索</h3><p>不关心到目标的路径，优化问题可以使用局部搜索。</p>
<p>只维护当前状态，并通过移动到相邻状态，试图优化。</p>
<ul>
<li>不需要维护搜索树</li>
<li>内存占用小</li>
<li>在连续或较大的状态空间中找到较好解</li>
</ul>
<h4 id="爬山算法"><a href="#爬山算法" class="headerlink" title="爬山算法"></a>爬山算法</h4><p>贪心局部搜索，只选择最优的邻居进行探索，到达峰值时停止(可能是局部峰值)</p>
<p>每个结点代表一个状态和一个值</p>
<p>变种：</p>
<ul>
<li>Sideways moves 允许转移到与当前状态同等优的解</li>
<li>Random-restart 多试几次取最优</li>
<li>Stochastic 随机选择不同的上坡算子</li>
</ul>
<p>改进：</p>
<ul>
<li>Hill climbing：取决于地形，多重开几次还是不错的</li>
<li>Local beam search：同时维护前k优的解，探索其邻居</li>
<li>Stochastic beam search：随机选择k个解(不一定是前k优)，探索其邻居</li>
</ul>
<h4 id="遗传算法"><a href="#遗传算法" class="headerlink" title="遗传算法"></a>遗传算法</h4><p>Stochastic beam search的变种。</p>
<p>自然选择，种群，个体，基因，健壮函数，交叉互换，后代，变异</p>
<h4 id="模拟退火"><a href="#模拟退火" class="headerlink" title="模拟退火"></a>模拟退火</h4><p>温度指数级下降，以一定概率接受较劣解，温度越高跳出当前解的可能性越高。</p>
<p>接受概率：$P = e^{-\Delta E/T}$</p>
<h2 id="Chapter-3-启发与元启发"><a href="#Chapter-3-启发与元启发" class="headerlink" title="Chapter 3 - 启发与元启发"></a>Chapter 3 - 启发与元启发</h2><h3 id="启发式函数进阶"><a href="#启发式函数进阶" class="headerlink" title="启发式函数进阶"></a>启发式函数进阶</h3><h4 id="启发式函数与效率"><a href="#启发式函数与效率" class="headerlink" title="启发式函数与效率"></a>启发式函数与效率</h4><p>如果一个启发式函数始终不小于另一个启发式函数，称其为dominate，前者拥有更好的效率。好的启发式函数可以降低$b^\star$，分支数量化了启发式搜索的效率。</p>
<p>对于一堆admissible的启发式函数$\{h_i\}$，能够dominate所有函数的是$\max\{h_i\}$。</p>
<h4 id="好的启发式函数上哪找？"><a href="#好的启发式函数上哪找？" class="headerlink" title="好的启发式函数上哪找？"></a>好的启发式函数上哪找？</h4><ol>
<li>从放宽条件的问题入手，例如8-puzzle允许块之间重叠，得到的步数总是要比原问题少的。</li>
<li>从子问题入手，例如8-puzzle只把一部分块归位而不管其他的。该问题中，函数$h_{\text{sub}}$(只考虑四块的启发式函数极大值并集)是dominate函数$h_{1step}$的。</li>
<li>根据经验生成，可以选定当前状态的几个特征作为变量，用神经网络/决策树来学这些变量对应的权重，用线性函数表示启发式函数</li>
</ol>
<h3 id="元启发式函数进阶"><a href="#元启发式函数进阶" class="headerlink" title="元启发式函数进阶"></a>元启发式函数进阶</h3><p>与问题相互独立的启发式方法，可以组合使用。</p>
<blockquote>
<p>One general law, leading to the advancement of all organic beings, namely, multiply, vary, let the strongest live and weakest die.</p>
<p>Charles Darwin, The Origin of Species</p>
</blockquote>
<p>演化计算：繁殖，变异，选择</p>
<h2 id="Chapter-4-对抗搜索"><a href="#Chapter-4-对抗搜索" class="headerlink" title="Chapter 4 - 对抗搜索"></a>Chapter 4 - 对抗搜索</h2><h3 id="Minimax搜索"><a href="#Minimax搜索" class="headerlink" title="Minimax搜索"></a>Minimax搜索</h3><p>其中某一方，按照双方都足够聪明的情况进行DFS(DLS)，从搜索树所有分支中选择对各自最优的。</p>
<p>在可以搜索到终局的情况下，对于一个状态$s$，minimax函数：</p>
<script type="math/tex; mode=display">f(s)=\left\{\begin{align*}&\text{Utility(s)}&\text{if Terminal-test(s)}\\ &\max_{a\in\text{Actions(s)}}f(\text{Result(s,a)})&\text{if Player(s)=MAX}\\&\min_{a\in\text{Actions(s)}}f(\text{Result(s,a)})&\text{if Player(s)=MIN}\end{align*}\right.</script><p>然而博弈是有时限的，指数级时间复杂度不可能搜完，所以：</p>
<ul>
<li>将终局评估改成非终局评估</li>
<li>使用迭代加深搜索IDS</li>
<li>剪枝</li>
</ul>
<h3 id="alpha-beta-剪枝"><a href="#alpha-beta-剪枝" class="headerlink" title="$\alpha-\beta$ 剪枝"></a>$\alpha-\beta$ 剪枝</h3><p>$\alpha$：$\text{MAX}$结点目前已经探索的结点中最大的一个。当前结点不会探索比$\alpha$估值还低的结点。</p>
<p>$\beta$：$\text{MIN}$结点目前已经探索的节点中最小的一个。当前结点不会探索比$\beta$估值还高的结点。</p>
<h4 id="什么时候要剪呢？"><a href="#什么时候要剪呢？" class="headerlink" title="什么时候要剪呢？"></a>什么时候要剪呢？</h4><p>$\text{MAX}$视角：$\text{MIN}$在再下一步的结点中，发现了比$\alpha$还低的值，那$\text{Min}$肯定会选这个分支，导致$\text{MAX}$的估值小于$\alpha$，为了避免这种局面，当下一层的$\text{MIN}$发现了一个比$\alpha$还小的值时，说明对手足够聪明的情况下，$\text{MAX}$在这一分支会被对手限制到不如$\alpha$的局面，剪掉。</p>
<p>$\text{MIN}$视角：$\text{MAX}$在再下一步的结点中，发现了比$\beta$还大的值，那$\text{MAX}$肯定会选这个分支，导致$\text{MIN}$的估值大于$\beta$，为了避免这种局面，当下一层的$\text{MAX}$发现了一个比$\beta$还大的值时，说明对手足够聪明的情况下，会选择这个新的分支规避$\beta$的限制，故剪掉。</p>
<h4 id="“自裁式”实现"><a href="#“自裁式”实现" class="headerlink" title="“自裁式”实现"></a>“自裁式”实现</h4><p>上面的说法更像是当前结点主动剪子结点。但还有一种“自裁式”的剪法，就是某个结点发现自己太好了，肯定会被足够聪明的上一层剪掉，就自裁了。</p>
<p>搜索的时候，父结点把自己的$\alpha-\beta$给子结点，探索完一个子结点后，做如下操作：</p>
<p>当前节点是$\text{MAX}$，如果$\text{MIN}$子结点给出的估值比当前最高的还高，那就检查有没有超过当前节点的$\beta$，如果超过了当前节点的$\beta$，说明当前这一支太好了，会被更高层的$\text{MIN}$掐掉，所以这个$\text{MAX}$结点就被整个剪掉了；如果没超过$\beta$而且还比当前最高还高，那就更新当前的最高值和$\alpha$。</p>
<p>当前节点是$\text{MIN}$时同理，如果这个$\text{MIN}$结点能把最优解掐到不足$\alpha$，那$\text{MIN}$结点的$\text{MAX}$父节点肯定不乐意啊，所以一整个$\text{MIN}$结点就被剪掉了。</p>
<p><img src="https://s2.loli.net/2023/06/13/TnYsVXi8B56aeuJ.png" alt="image.png"></p>
<center>Minimax搜索伪代码</center>

<h4 id="换序剪枝"><a href="#换序剪枝" class="headerlink" title="换序剪枝"></a>换序剪枝</h4><p>$\alpha-\beta$ 剪枝的效果受访问顺序影响，有可能导致剪枝的结点最后才被访问，这就剪了个寂寞。</p>
<p>最差的顺序相当于没有剪枝，复杂度是$O(b^m)$。</p>
<p>最好的顺序则是把最“聪明”的结点都放在最先访问，实际复杂度是$O(b^{m/2})$，直接开了个根号。</p>
<p>如何找到一个好的顺序呢？除了动用领域知识，还可以保存历史表，以前发现最好的几步可能在之后还是最好的几步，或是保存状态以供重复时使用。</p>
<h4 id="实际情况"><a href="#实际情况" class="headerlink" title="实际情况"></a>实际情况</h4><p>上面的$\alpha-\beta$剪枝伪代码还是要一直搜到叶子结点，依然是不现实的，所以将$\text{Util(s)}$函数更换为可以评价中局的启发式函数$\text{eval(s)}$。</p>
<h3 id="期望Minimax搜索"><a href="#期望Minimax搜索" class="headerlink" title="期望Minimax搜索"></a>期望Minimax搜索</h3><p>对于带有随机性的博弈，期望Minimax搜索在$\text{MIN}$和$\text{MAX}$之外又加入了$\text{Chance}$层，会返回当前所有可能发生的情况合起来的期望。</p>
<script type="math/tex; mode=display">f(s)=\left\{\begin{align*}&\text{Utility(s)}&\text{if Terminal-test(s)}\\ &\max_{a\in\text{Actions(s)}}f(\text{Result(s,a)})&\text{if Player(s)=MAX}\\&\min_{a\in\text{Actions(s)}}f(\text{Result(s,a)})&\text{if Player(s)=MIN}\\&\sum\limits_{r}P(r)f(\text{Result(s,r)})&\text{if Player(s)=Chance}\end{align*}\right.</script><p>其中$r$代表了所有的随机事件。</p>
<h2 id="Chapter-5-约束满足问题"><a href="#Chapter-5-约束满足问题" class="headerlink" title="Chapter 5 - 约束满足问题"></a>Chapter 5 - 约束满足问题</h2><h3 id="CSP概述"><a href="#CSP概述" class="headerlink" title="CSP概述"></a>CSP概述</h3><p>也是搜索问题，但是我们更关心目标本身。</p>
<p>CSP的状态是因子表示的，也就是由一组变量表示。</p>
<p>一个目标测试(goal test)是对于这组变量(的子集)的一组限制。</p>
<p><strong>CSP问题的三个要素</strong></p>
<ol>
<li>变量集合$X$</li>
<li>变量定义域的集合$D$</li>
<li>约束的集合$C$</li>
</ol>
<p>CSP的解：在定义域$D$中，对变量$X$找到一个合适的赋值方案$s$，满足所有的约束$C$。这样的解称为一致的赋值(consistent assignment)。</p>
<p>变量类型：离散/连续</p>
<p>限制类型：一元(unary)，二元(binary)，全局(global)，偏好/软限制(preferences/soft constraints)</p>
<h3 id="解决CSP"><a href="#解决CSP" class="headerlink" title="解决CSP"></a>解决CSP</h3><p>暴力太慢，配合推理(inference)和搜索(search)来加速。</p>
<p>Inference主要是约束传播(constraint propagation)，是指一个变量的合法取值变少时，其他变量的合法取值也会变少。</p>
<p>Search的DFS和BFS都是老朋友了，新来了个BTS。</p>
<p>回溯搜索(Backtracking search, BTS)也是一种DFS，满足以下条件：</p>
<ul>
<li>一次赋一个变量的值：赋值顺序是可交换的</li>
<li>赋值的时候就注意和之前的赋值不能冲突</li>
</ul>
<p><del>感觉和DFS没区别啊= =</del></p>
<h3 id="改进BTS的三种方法"><a href="#改进BTS的三种方法" class="headerlink" title="改进BTS的三种方法"></a>改进BTS的三种方法</h3><h4 id="最小剩余值-Minimum-Remaining-Value"><a href="#最小剩余值-Minimum-Remaining-Value" class="headerlink" title="最小剩余值(Minimum Remaining Value)"></a>最小剩余值(Minimum Remaining Value)</h4><p>Q：先给哪个变量赋值？</p>
<blockquote>
<p>先挑硬柿子捏</p>
</blockquote>
<p>每次挑剩余选择最少的结点赋值。</p>
<h4 id="最小限制值-Least-Constraining-Value"><a href="#最小限制值-Least-Constraining-Value" class="headerlink" title="最小限制值(Least Constraining Value)"></a>最小限制值(Least Constraining Value)</h4><p>Q：给这个变量赋哪个值？</p>
<blockquote>
<p>少给后人添麻烦</p>
</blockquote>
<p>每次挑对别人限制最少的结点赋值。</p>
<h4 id="前向检查-Forward-Checking"><a href="#前向检查-Forward-Checking" class="headerlink" title="前向检查(Forward Checking)"></a>前向检查(Forward Checking)</h4><p>Q：世界末日是可预见的吗？</p>
<blockquote>
<p>关心每个人的未来</p>
</blockquote>
<p>每次赋值后检查所有未赋值变量定义域是否为空。</p>
<p>在前向检查的时候用到了约束传播的思想，用已赋值的变量去限制未赋值的变量，看还有没有合法赋值，不过这里并不做未赋值变量之间的检查。</p>
<h3 id="一致性"><a href="#一致性" class="headerlink" title="一致性"></a>一致性</h3><h4 id="点一致性-一元限制"><a href="#点一致性-一元限制" class="headerlink" title="点一致性(一元限制)"></a>点一致性(一元限制)</h4><p>如果一个点的定义域内所有的值都满足所有的一元限制，那它拥有点一致性</p>
<h4 id="弧一致性-二元限制"><a href="#弧一致性-二元限制" class="headerlink" title="弧一致性(二元限制)"></a>弧一致性(二元限制)</h4><p>两个变量$X\rightarrow Y$具有弧一致性，当且仅当对$X$的每个值都有对应的$Y$的值满足二元条件。</p>
<p><strong>弧一致性检验</strong></p>
<p>AC-3算法，复杂度$O(n^2d^3)$。</p>
<p>$\text{REVISE()}$函数根据给定的两个变量，将第一个变量定义域中找不到第二个变量定义域对应值的值删掉，只有删了至少一个值的时候才会返回真，说明需要对前者的邻居再进行$\text{REVISE}$，复杂度$O(d^2)$，$d$是定义域大小。</p>
<p>$\text{AC-3()}$函数维护一个初始包含所有弧的队列，每次取出一个做$\text{REVISE}$，如果前变量的定义域缩小了，那就用它接着更新它的其他邻居，直到所有弧都出队(被满足)，或是有一个点的定义域被删干净了(不满足)。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function AC-3(csp)</span><br><span class="line">returns False if an inconsistency is found, True otherwise</span><br><span class="line">inputs: csp, a binary CSP with components (X, D, C)</span><br><span class="line">local variables: queue, a queue of arcs, initially all the arcs in csp</span><br><span class="line">while queue is not empty do</span><br><span class="line">    (Xi, Xj) = REMOVE-FIRST(queue)</span><br><span class="line">    if REVISE(csp, Xi, Xj)then</span><br><span class="line">        if size of Di = 0 then return False</span><br><span class="line">        for each Xk in Xi.NEIGHBORS- &#123;Xj&#125; do</span><br><span class="line">            add (Xk,Xi) to queue</span><br><span class="line">return true</span><br><span class="line"></span><br><span class="line">function REVISE(csp, Xi, Xj)</span><br><span class="line">returns True if we revise the domain of Xi</span><br><span class="line">revised = False</span><br><span class="line">for each x in Di do</span><br><span class="line">    if no value y in Dj allows (x, y) to satisfy the constraint between Xi and Xj then</span><br><span class="line">        delete x from D;</span><br><span class="line">        revised = True</span><br><span class="line">return revised</span><br></pre></td></tr></table></figure>
<h4 id="路径一致性-多元限制"><a href="#路径一致性-多元限制" class="headerlink" title="路径一致性(多元限制)"></a>路径一致性(多元限制)</h4><p>弧一致性的多元推广。</p>
<h2 id="Chapter-6-逻辑"><a href="#Chapter-6-逻辑" class="headerlink" title="Chapter 6 - 逻辑"></a>Chapter 6 - 逻辑</h2><p><del>经过了数理逻辑导论和离散数学的洗礼</del>我觉得这部分还是得复习一下，至少要知道Resolution和Forward/Backward Chaining怎么证。</p>
<h3 id="铺垫"><a href="#铺垫" class="headerlink" title="铺垫"></a>铺垫</h3><p>原子命题，复合命题，逻辑算符，重言式与矛盾式</p>
<p>Inference: Modus Ponens</p>
<p>Common Rules: Addition, Simplification, Disjunctive-syllogism, Hypothetical-syllogism</p>
<p>Entailment, Semantics: KB ⊨ α</p>
<p>Inference, Syntax: KB ⊢ α</p>
<p> Sound &amp; Complete, Validity &amp; Satisfiability </p>
<h3 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h3><p>使用Resolution rule：一堆$\vee$连接的文字中的某个文字的否命题与其同时成立，则可以将该文字剔除。</p>
<script type="math/tex; mode=display">l_1\vee\cdots\vee l_k\quad \overline{l_i}\over l_1\vee\cdots\vee l_{i-1}\vee l_{i+1}\vee\cdots\vee l_k</script><p>一般转成合取范式(CNF)再用Resolution rule。</p>
<h3 id="Forward-Backward-chaining"><a href="#Forward-Backward-chaining" class="headerlink" title="Forward / Backward chaining"></a>Forward / Backward chaining</h3><p>在霍恩子句上用Modus Ponens。</p>
<p>前向链接：把已知逻辑式塞到所有规则的前提里，把结论塞回知识库，直到解决问题。对命题逻辑是完备的。</p>
<ul>
<li>数据驱动，自动化，无意识推理</li>
<li>可能做很多无用功</li>
</ul>
<p>后向链接：为了得到问题的结论，需要得到问题的前提，递归证明前提。可以做记忆化。时间上是线性的，对霍恩子句是完备的。</p>
<ul>
<li>目标驱动，适用于解决问题</li>
<li>复杂度会远远小于$O(|\text{Knowledge Base}|)$</li>
</ul>
<p><del>一阶逻辑？ Nobody cares(</del></p>
<h2 id="Chapter-7-机器学习概述"><a href="#Chapter-7-机器学习概述" class="headerlink" title="Chapter 7 - 机器学习概述"></a>Chapter 7 - 机器学习概述</h2><blockquote>
<p>A computer program is said to learn from experience E with respect to some class of tasks T and performance measure P, if its performance at tasks in T, as measured by P, improves with experience E.</p>
<p>Tom Mitchell. Machine Learning 1997.</p>
</blockquote>
<h3 id="无监督学习"><a href="#无监督学习" class="headerlink" title="无监督学习"></a>无监督学习</h3><p>无监督学习：训练样本没有标签</p>
<p>应用：聚类，切割</p>
<p>算法：K-means, Gaussian mixtures, hierarchical clustering, spectral clustering, etc.</p>
<h3 id="监督学习"><a href="#监督学习" class="headerlink" title="监督学习"></a>监督学习</h3><p>监督学习：训练样本带有对应的标签</p>
<p>应用：分类(样本→离散)，回归(样本→连续)</p>
<p>分类算法：Support Vector Machines, neural networks, decision trees, K-nearest neighbors, naïve Bayes, etc.</p>
<h3 id="K近邻"><a href="#K近邻" class="headerlink" title="K近邻"></a>K近邻</h3><p>两个相似的样本应该拥有相同的标签。</p>
<p>每个样本视为$d$维空间的点，距离用欧氏距离表示。</p>
<p>训练算法：直接把样本和标签丢到训练集就行</p>
<p>分类算法：给定一个测试样本，看看距离它最近的$k$个样本标签是什么，哪个标签样本数多，测试样本就被分到哪个标签。</p>
<p>优点：</p>
<ul>
<li>简单</li>
<li>实际效果好</li>
<li>不需要建立模型，或者做假设，又或者调参</li>
<li>有新样本很快就扩展了</li>
</ul>
<p>缺点：</p>
<ul>
<li>需要很大的空间来存整个训练集</li>
<li>慢，给定$n$样本$d$特征，需要$O(nd)$才能跑出来</li>
<li>维数灾难：样本分布位于中心附近的概率，随着维度的增加，越来越低；而样本处在边缘的概率，则越来越高。</li>
</ul>
<h3 id="Train-Validation-and-Test"><a href="#Train-Validation-and-Test" class="headerlink" title="Train, Validation and Test"></a>Train, Validation and Test</h3><p>样本内误差：</p>
<script type="math/tex; mode=display">E^{\text{train}}(f) = \sum\limits_{i=1}^n \text{loss}(y_i,f(x_i))</script><p>损失函数$\text{loss()}$可以是分类误差(不一样时1)，也可以是均方误差(差值平方和)</p>
<p>目标是最小化训练误差，同时希望样本外误差(测试误差)最小。</p>
<h3 id="过拟合和欠拟合"><a href="#过拟合和欠拟合" class="headerlink" title="过拟合和欠拟合"></a>过拟合和欠拟合</h3><p><img src="https://s2.loli.net/2023/06/13/DzvuyEiZMP172UW.png" alt="image.png" style="zoom:50%;" /></p>
<p>这幅图蛮重要的，嗯。</p>
<p><strong>如何避免过拟合？</strong></p>
<ul>
<li>减少特征数量：特征选择</li>
<li>模型选择</li>
<li>正则化(regularization)：削弱部分特征的重要程度</li>
<li>做交叉验证(cross-validation)，检验测试误差</li>
</ul>
<p><strong>正则化</strong></p>
<p>最小化：$\sum_{i=1}^{n} \operatorname{loss}\left(y_{i}, f\left(x_{i}\right)\right)+C \times R(f)$</p>
<p>目标是避免高阶多项式的出现</p>
<h3 id="Train-Validation-and-Test-1"><a href="#Train-Validation-and-Test-1" class="headerlink" title="Train, Validation and Test"></a>Train, Validation and Test</h3><p>把数据集分成三部分，训练集给样本给标签，验证集给样本看结果用来调参，测试集用来评估最终性能。</p>
<h4 id="K-fold交叉验证"><a href="#K-fold交叉验证" class="headerlink" title="K-fold交叉验证"></a>K-fold交叉验证</h4><p>把数据集分成等大的$k$个子集，每次把其中一个挑出来用来当测试集算误差，最后把所有的误差再加起来。</p>
<h4 id="混淆矩阵-Confusion-matrix"><a href="#混淆矩阵-Confusion-matrix" class="headerlink" title="混淆矩阵(Confusion matrix)"></a>混淆矩阵(Confusion matrix)</h4><div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th>Actual</th>
<th>Label</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Predicted</strong></td>
<td>True Positive</td>
<td>False Positive</td>
</tr>
<tr>
<td><strong>Label</strong></td>
<td>False Negative</td>
<td>True Negative</td>
</tr>
</tbody>
</table>
</div>
<p><strong>Accuracy</strong>: $\text{(TP+TN)/Total}$</p>
<p><strong>Precision</strong>:  $\text{TP/(TP+FP)}$</p>
<p><strong>Sensitivity</strong>:  $\text{TP/(TP+FN)}$</p>
<p><strong>Specificity</strong>:  $\text{TN/(TN+FP)}$</p>
<h2 id="Chapter-8-线性回归与对数回归"><a href="#Chapter-8-线性回归与对数回归" class="headerlink" title="Chapter 8 - 线性回归与对数回归"></a>Chapter 8 - 线性回归与对数回归</h2><h3 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h3><p>$f(x) = \beta_0 + \sum\limits_{j=1}^d \beta_jx_j$，其中$\beta_j\in \mathbb R,\ j\in \{1,\cdots,d\}$</p>
<p>学习线性模型其实就是学习$\beta$。</p>
<p>最小化损失函数$R$：</p>
<script type="math/tex; mode=display">R=\frac{1}{2n}\sum\limits_{i=1}^n(y_i-f(x_i))^2=\left.\frac{1}{2 n} \sum_{i=1}^{n}\left(y_{i}-\beta_{0}-\sum_{j=1}^{d} \beta_{j} x_{i j}\right)\right)^{2}</script><p>如果用矩阵形式表示：</p>
<p><img src="https://s2.loli.net/2023/06/13/LYKqpsglET7nU3W.png" alt="image.png" style="zoom: 50%;" /></p>
<h4 id="正规方程"><a href="#正规方程" class="headerlink" title="正规方程"></a>正规方程</h4><p>我们有$R(\beta) = \frac{1}{2n}||(y-X\beta)||^2 = \frac{1}{2n}(y-X\beta)^T(y-X\beta)$，求偏导有</p>
<script type="math/tex; mode=display">\frac{\partial R}{\partial \beta}=-\frac{1}{n}X^T(y-X\beta),\ \frac{\partial^2R}{\partial \beta^2}=\frac{1}{n}X^TX</script><p>二阶偏导为正，说明正定，令一阶偏导为0求得$\beta_\min = (X^TX)^{-1}X^Ty$</p>
<p>优点：不用定义收敛率，也不用迭代</p>
<p>缺点：需要保证$X^TX$可逆；当维数$d$很高的时候求逆是$O(d^3)$的，很慢。</p>
<h4 id="梯度下降"><a href="#梯度下降" class="headerlink" title="梯度下降"></a>梯度下降</h4><p>同时让$\beta$的每个分量沿着梯度下降：</p>
<p>$\beta_i = \beta_i-\alpha \frac{\partial R}{\partial \beta_i}$，其中$\alpha$是学习率。</p>
<p>优点：高维依然很管用</p>
<p>缺点：需要迭代，有时候迭代很多代才收敛；需要调参$\alpha$</p>
<h4 id="实际考虑"><a href="#实际考虑" class="headerlink" title="实际考虑"></a>实际考虑</h4><ul>
<li>一般会把数据做个归一化，把数据变小点</li>
<li>学习率不能太大，也不能太小</li>
<li>损失函数应该随着迭代递减</li>
<li>如果优化程度在$\epsilon$之内说明收敛了</li>
<li>什么时候$X^TX$不可逆？<ul>
<li>样本过少，特征过多</li>
<li>特征之间线性相关</li>
</ul>
</li>
</ul>
<h3 id="对数回归"><a href="#对数回归" class="headerlink" title="对数回归"></a>对数回归</h3><p>做分类，线性回归也不是不行，只是表现一般，而且预测值有时候又不在$[0, 1]$之间。</p>
<p>对数回归不是一个回归方法，而是一个分类方法，虽然怪怪的但是课件原话。</p>
<script type="math/tex; mode=display">g(x) = \text{SIGMOID}(z) = \frac{e^z}{1+e^z}</script><p><img src="https://s2.loli.net/2023/06/13/xFzXuBYUosTMe4w.png" alt="image.png" style="zoom:50%;" /></p>
<p>对数回归用的$f$就不太一样了，相当于是把输出映射到了$[0,1]$</p>
<script type="math/tex; mode=display">f(x)=g(\beta_0+\sum\limits_{j=1}^d\beta_jx_j),\ R=\frac{1}{2n}\sum\limits_{i=1}^n(y_i-f(x_i))^2</script><p>分类的时候，离哪边近就分到哪边。</p>
<p>旧损失函数$\text{Loss}=\frac 1 2(f(x)-y)^2$这个时候就不是简单的二次函数了，可能有很多局部最优，所以对旧损失函数的梯度下降寄了。为了全局最优，对损失使用凸函数罢！</p>
<script type="math/tex; mode=display">\text{Cost}(f(x),y)=\left\{\begin{align*}&-\log(f(x))\quad&\text{if } y = 1\\&-\log(1-f(x))\quad&\text{if } y = 0\end{align*}\right.</script><p>所以有损失函数：</p>
<script type="math/tex; mode=display">\text{Loss}(f(x),y)=-y\log(f(x))-(1-y)\log(1-f(x))</script><script type="math/tex; mode=display">R(\beta)=\frac{1}{n}\sum\limits_{i=1}^n\text{Loss}_i</script><p>好了，我们又可以梯度下降了。</p>
<h2 id="Chapter-9-支持向量机"><a href="#Chapter-9-支持向量机" class="headerlink" title="Chapter 9 - 支持向量机"></a>Chapter 9 - 支持向量机</h2><h3 id="线性模型"><a href="#线性模型" class="headerlink" title="线性模型"></a>线性模型</h3><p>线性模型的分类靠超平面：$f(x)=\left \langle w,x\right \rangle+b=0$</p>
<p>支持向量机要求所有点都在正负超平面之外(含超平面)，正负超平面：$\left \langle w,x\right \rangle+b=±c$</p>
<p> 不过我们可以通过放缩变成：$\left \langle w,x\right \rangle+b=±1$</p>
<p>在正负超平面上的俩决策临界点连线垂直三个超平面，所以有$x^+-x^-=\lambda w$</p>
<p>又有$\lambda=\frac{2}{||w||_2^2}$，正负超平面之间的距离就是$M=\frac 2 {||w||_2}$</p>
<p>现在的目标就是最大化$M$，满足</p>
<script type="math/tex; mode=display">\left \langle w,x_i\right \rangle+b\left\{\begin{align*}&\ge 1\quad &\text{if } y_i&=1\\&\le -1\quad &\text{if } y_i&=-1\end{align*}\right.</script><p>再换句话，就是求$w,b$来达到$\min\limits_w\frac{||w||^2_2}{2}$，条件是$y_i(\left \langle w,x_i\right \rangle+b)\ge 1$</p>
<p><del>过程太复杂不想写了aaaaa</del></p>
<p>等明天醒了补！</p>
<p><strong>解题步骤</strong></p>
<ul>
<li>解对偶优化问题，算出$\alpha^\star$</li>
<li>用$\alpha^\star$算出$w(\alpha^\star)$和$b(\alpha^\star)$</li>
<li>用这个式子分类：$\text{sign}(\sum\limits_{i=1}^n\alpha_i^\star y_ik(x_i,x)+b(\alpha^\star))$</li>
</ul>
<h3 id="非线性模型"><a href="#非线性模型" class="headerlink" title="非线性模型"></a>非线性模型</h3><p>把输入空间映射到特征空间，特征空间维数越高，数据越可能线性可分。</p>
<p>映射完之后该咋做咋做就好了，映射用的函数叫核函数。</p>
<p>线性核，多项式核，高斯核</p>
<h2 id="Chapter-10-感知机与神经网络"><a href="#Chapter-10-感知机与神经网络" class="headerlink" title="Chapter 10 - 感知机与神经网络"></a>Chapter 10 - 感知机与神经网络</h2><h3 id="感知机"><a href="#感知机" class="headerlink" title="感知机"></a>感知机</h3><p>$f(x_i)=\text{sign}(\sum\limits_{j=0}^dw_jx_{ij})$</p>
<p>如果数据线性可分那就好办，否则不收敛</p>
<p>从一个随机的超平面开始，用训练数据来调整的迭代方法</p>
<p>发现$y_if(x_i)\le 0$时，更新全部$w_j=w_j+y_ix_{ij}$</p>
<p>感性理解，就是把每个分量拉回来对应的$x$值</p>
<p>$w_j$决定了$x_j$对结果的权重，可能得到很多解</p>
<h3 id="神经网络"><a href="#神经网络" class="headerlink" title="神经网络"></a>神经网络</h3><p>感知机用的是分段函数，换成SIGMOID，也可以换成别的激活函数比如tanh</p>
<p>简单的例子：用OR，NAND，AND感知机拼成XOR网络</p>
<h4 id="反向传播算法"><a href="#反向传播算法" class="headerlink" title="反向传播算法"></a>反向传播算法</h4><p>明天醒的时候再看</p>
<h2 id="Chapter-11-决策树和朴素贝叶斯"><a href="#Chapter-11-决策树和朴素贝叶斯" class="headerlink" title="Chapter 11 - 决策树和朴素贝叶斯"></a>Chapter 11 - 决策树和朴素贝叶斯</h2><h3 id="决策树"><a href="#决策树" class="headerlink" title="决策树"></a>决策树</h3><p>还是做分类的。不需要实数输入，所以不需要数值化特征。</p>
<ol>
<li>主要的决策：下一个用哪个标准分类？</li>
<li>用同质性作为衡量标准：如果分类两边样本数量相等同质性最高，如果分完只剩一类了那就最低。</li>
<li>熵函数 $\text{Entropy}(S)=-p_+\log p_+ -p_-\log p_-$是个关于x=0.5对称的凸函数</li>
</ol>
<p>收获函数$\text{Gain}(S,A)=\text{Entropy}(S)-\sum\limits_{v\in\text{Value(A)}}\frac{|S_v|}{|S|}\text{Entropy}(S_v)$</p>
<p>把子结点人数占比作为权重，子结点熵值作为权值，父节点熵值减去子结点熵值的加权平均就是熵值收获。</p>
<p>很容易过拟合，两种解法：要么别长出来，要么先长出来再剪(这个更好，用一个验证集检验剪枝后有没有比之前更差)。</p>
<p><strong>CART</strong>用$Gini=1-p_+^2-p_-^2$代替信息熵。</p>
<p><strong>实际问题</strong></p>
<ul>
<li>先降维，保留特征性最强的特征</li>
<li>用集成方法：随机森林</li>
<li>先均衡数据集：对主要数据欠采样，对少数数据过采样</li>
</ul>
<p><strong>优点</strong>：</p>
<ul>
<li>简单可解释</li>
<li>可以转成分类规则</li>
<li>对于分类数据很好</li>
<li>构造简单</li>
<li>不用归一化数据</li>
</ul>
<p><strong>缺点</strong>：</p>
<ul>
<li>不稳定，一个样本不同树可能就不同</li>
<li>单变量，不处理组合特征</li>
<li>某些结点的选择可能取决于之前的选择</li>
<li>需要平衡数据</li>
</ul>
<h3 id="朴素贝叶斯"><a href="#朴素贝叶斯" class="headerlink" title="朴素贝叶斯"></a>朴素贝叶斯</h3><script type="math/tex; mode=display">p(A|B)=\frac{p(B|A)*p(A)}{p(B)}=\frac{p(B|A)*p(A)}{p(B|\overline A)p(\overline A)+p(B|A)*p(A)}</script><p>希望通过$p(y|x)$来找到$f(x)=y$的映射。</p>
<h4 id="判别模型"><a href="#判别模型" class="headerlink" title="判别模型"></a>判别模型</h4><p>对$p(y|x)$建模，然后给条决策边界来分类。</p>
<h4 id="生成模型"><a href="#生成模型" class="headerlink" title="生成模型"></a>生成模型</h4><p>对$p(x|y)$和$p(y)$建模，然后用贝叶斯算使得$p(y|x)=\frac{p(x|y)p(y)}{p(x)}≈p(x|y)p(y)$最大的$y$值作为结果。</p>
<p>输入$x$维数比较高的时候，可以默认不同维特征之间相互独立。</p>
<p><strong>解题步骤</strong></p>
<ul>
<li>对每个标签$y$算$p(y)$</li>
<li>对每个标签$y$和每个特征$a_i$算$p(a_i|y)$</li>
</ul>
<p>$m-$估计概率：$p(a_j|y)=\frac{n_c+m*p}{n_y+m}$</p>
<p>其中$p$是事先约定的值，不知道怎么取可以用特征$y$可能的取值数量的倒数</p>
<h2 id="Chapter-12-集成学习与聚类"><a href="#Chapter-12-集成学习与聚类" class="headerlink" title="Chapter 12 - 集成学习与聚类"></a>Chapter 12 - 集成学习与聚类</h2><h3 id="集成学习"><a href="#集成学习" class="headerlink" title="集成学习"></a>集成学习</h3><p>用同样的训练数据，训练独立的弱学习者，策略有三：</p>
<ul>
<li>Boosting</li>
<li>Bagging</li>
<li>Random Forests</li>
</ul>
<h4 id="Boosting"><a href="#Boosting" class="headerlink" title="Boosting"></a>Boosting</h4><p>在带权重的训练数据上训练弱学习者，表现好的学习者给更多权重</p>
<p>难样本给更高权重，简单样本给更低权重</p>
<p>错误率决定了最终的贡献比：</p>
<script type="math/tex; mode=display">\alpha_m=\frac 1 2 \log(\frac{1-err_m}{err_m})</script><p><img src="https://s2.loli.net/2023/06/14/tpjgqJIMOQrNUAb.png" alt="image.png" style="zoom: 33%;" /></p>
<p>数据集上的权重从均权开始，错的人越多权值变得越大，越少就变小</p>
<script type="math/tex; mode=display">w_i=w_i*\exp[-\alpha_my_iG_m(x_i)]</script><h4 id="Bagging"><a href="#Bagging" class="headerlink" title="Bagging"></a>Bagging</h4><p>Bootstrapping是重采样，按照经验分布进行采样</p>
<p>Bagging和Boosting都基于Bootstrapping</p>
<p>都使用了重采样来生成弱分类器</p>
<p>Bagging = Bootstrap aggregation</p>
<p>每次就选等大的一部分数据用来训练一个弱分类器。</p>
<h4 id="随机森林"><a href="#随机森林" class="headerlink" title="随机森林"></a>随机森林</h4><p>不拆数据了，拆特征维数，每次只用一部分特征来分类，多长几棵树投票。</p>
<p>一般拆出来训练的特征维数$m\le\sqrt d$</p>
<h3 id="聚类"><a href="#聚类" class="headerlink" title="聚类"></a>聚类</h3><p>无监督学习，分成$k$个聚类</p>
<h4 id="K-means"><a href="#K-means" class="headerlink" title="K-means"></a>K-means</h4><p>最小化聚类内部的均方差：</p>
<script type="math/tex; mode=display">J=\sum\limits_{j=1}^k\sum\limits_{x_i\in C_j}||x_i-\mu_j||^2</script><p>$\mu_j$是第$j$个聚类中的平均值</p>
<p>优点：容易实现</p>
<p>缺点：得知道$K$；维数灾难；没有理论基础</p>
<h4 id="K-means的一些问题"><a href="#K-means的一些问题" class="headerlink" title="K-means的一些问题"></a>K-means的一些问题</h4><p><strong>怎么取$k$？</strong></p>
<p>多试几个，选”elbow-point”</p>
<p>G-means算法</p>
<ol>
<li>用一个小$k$开始</li>
<li>从$k$个聚类中心点跑K-means</li>
<li>看看聚类是否环绕这些中心正态分布</li>
<li>如果OK就不管，如果不是那就拆成两个聚类中心</li>
<li>继续迭代，直到大家都正态分布</li>
</ol>
<p><strong>怎么评价模型？</strong></p>
<p>内部评价：高聚类内部相似度，低聚类外部相似度数据检验，可以用 Davies-Bouldin index评估聚类的紧密型</p>
<p>外部评价：利用对外部数据的知识库做评估(是否符合客观规律)</p>
<p><strong>如果不想要圆形聚类呢？</strong></p>
<p>其他方法：spectral clustering, kernelized K-means, DBSCAN, BIRCH, etc.</p>
<p><strong>怎么初始化？</strong></p>
<p>K-means对聚类中心的选取高度敏感，收敛速度和聚类效果都有影响。</p>
<p>比较安全的技巧是新聚类中心和之前的聚类中心安排得尽量远</p>
<p>解决方案是多重开几次选最好的。</p>
<p><strong>其他的限制？</strong></p>
<p>对一些样本做硬赋值，高斯混合模型允许软赋值(不同的赋值有概率)</p>
<p>对离群的例子高敏感，K-median在这方面的鲁棒性更好</p>
<script type="math/tex; mode=display">\Huge \mathscr{Good\ luck!}</script>]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Artificial Intelligence</tag>
      </tags>
  </entry>
  <entry>
    <title>MA212 概率论与数理统计 期末复习</title>
    <url>/2023/01/10/MA212_Probability_Statistics_Final/</url>
    <content><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><blockquote>
<p>本文为南方科技大学MA212概率论与数理统计课程2022秋季学期后半学期的知识点整理，大部分内容摘选自MA212-03班的课件，编者仅进行了一定转述和搬运工作。由于复习材料的目的性强，本文对考点有一定的强调和浓缩，忽略了一些非考点，但也并不能视为与考纲完全相符，同时可能存在一定错误。阅读本文并不能让你两三天速通概统，本文的定位在于用一篇文章看完课件内容，因此建议读者在学完该部分内容后借本文复习概念，并结合题目练习。</p>
<p>祝你在这门课程取得优秀成绩！</p>
<p>咕桃</p>
<p>2023.1</p>
</blockquote>
<p>本文使用<strong>CC BY-NC-SA</strong>协议，即您可以对本文在注明作者的情况下进行非商业目的的重新编排、节选，或以本文为基础进行创作，依此创作的成果亦须使用该协议。</p>
<p>由于编者能力有限，恳请各位读者在阅读过程中勘误，如果您对其中内容有疑问或发现错误，抑或是希望联系编者，欢迎通过该QQ联系：<a href="tencent://AddContact/?fromId=45&amp;fromSubId=1&amp;subcmd=all&amp;uin=3425811925&amp;website=www.oicqzone.com">3425811925</a>，非常感谢！</p>
<p><img src="https://s2.loli.net/2023/01/10/P7CdEvfXxBheuwi.png" alt="image.png" style="zoom:25%;" /></p>
<h1 id="Chapter-3"><a href="#Chapter-3" class="headerlink" title="Chapter 3"></a>Chapter 3</h1><h2 id="§3-6-联合分布随机变量函数"><a href="#§3-6-联合分布随机变量函数" class="headerlink" title="§3.6 联合分布随机变量函数"></a>§3.6 联合分布随机变量函数</h2><p><strong>r.v. 函数的分布</strong></p>
<p>设$(X, Y)$是二维连续型随机向量，其联合概率密度函数为$f(x,y)$。 则$Z=g(X,Y)$的累积分布函数为</p>
<script type="math/tex; mode=display">F_Z(z)=P\{Z\leq z\}=P\{g(X,Y)\leq z\}=\iint\limits_{g(x,y)\leq z}f(x,y)dxdy=\int_{-\infty}^{z}f_Z(u)du</script><p>求导可得其概率密度函数$Z\sim f_Z(z)$</p>
<p><strong>连续卷积公式</strong>：r.v. $(X,Y)\sim f(x,y)$，$Z=X+Y$</p>
<p>$F_Z(z)=\int_{-\infty}^{\infty}\int_{-\infty}^{z-y}f(x,y)dxdy=\int_{-\infty}^{\infty}\int_{-\infty}^{z}f(u-y,y)dudy=\int_{-\infty}^{z}\int_{-\infty}^{\infty}f(u-y,y)dydu$</p>
<p>求导得：$f_Z(z)=\int_{-\infty}^{\infty}f(z-y,y)dy=\int_{-\infty}^{\infty}f(x,z-x)dx$</p>
<p>若$X,Y$独立，$f(x,y)=f_X(x)\cdot f_Y(y)$，则</p>
<p>$f_Z(z)=\int_{-\infty}^{\infty}f_X(z-y)f_Y(y)dy=\int_{-\infty}^{\infty}f_X(x)f_Y(z-x)dx$</p>
<p><strong>独立正态r.v.之和</strong>：独立r.v. 集$\{X_n\}$，$X_i\sim N(\mu_i,\sigma_i^2)$</p>
<p>则其非零线性组合$\overset{n}\sum\limits_{i=1}a_iX_i\sim N(\overset{n}\sum\limits_{i=1}a_i\mu_i,\overset{n}\sum\limits_{i=1}a_i^2\sigma_i^2)$</p>
<p>即：独立正态r.v.的非零线性组合仍服从正态分布</p>
<p><strong>非独立正态r.v.之和</strong>：</p>
<p>若$(X,Y)\sim\mathbf N(\mu_1,\mu_2,\sigma_1^2,\sigma_2^2,\rho)$，则$(C_1X+C_2Y)\sim \mathbf N(C_1\mu_1+C_2\mu_2,C_1^2\sigma_1^2+C_2^2\sigma_2^2+2C_1C_2\sigma_1\sigma_2\rho)$</p>
<p><strong>离散卷积公式</strong>：$P\{Z=k\}=\sum\limits_{i}P\{X=i\}P\{Y=k-i\}=\sum\limits_{i}P\{X=k-i\}P\{Y=i\}$</p>
<p><strong>离散r.v.函数的分布</strong>：对于$Z=g(X,Y)$，$P\{Z=z_k\}=\sum\limits_{g(x_i,y_j)=z_k}p(x_i,y_i)$</p>
<p><strong>r.v.商的分布</strong>：$(X,Y)\sim f(x,y)$，$Z=\frac{X}{Y}$，$F_Z(z)=P\{\frac{x}{y}\leq z\}=\iint\limits_{\frac{x}{y}\leq z}f(x,y)dxdy$</p>
<p>$F_Z(z)=\int_{0}^{\infty}\int_{-\infty}^{yz}f(x,y)dxdy+\int_{-\infty}^{0}\int_{yz}^{\infty}f(x,y)dxdy$</p>
<p>设$u=x/y$，$dx=ydu$</p>
<p>$F_Z(z)=\int_{0}^{\infty}\int_{-\infty}^{z}f(uy,y)ydudy+\int_{-\infty}^{0}\int_{z}^{-\infty}f(uy,y)ydudy$</p>
<p>$F_Z(z)=\int_{-\infty}^{z}\int_{0}^{\infty}f(uy,y)ydydu+\int_{z}^{-\infty}\int_{-\infty}^{0}f(uy,y)ydydu=\int_{-\infty}^{z}\int_{-\infty}^{\infty}f(uy,y)|y|dydu$</p>
<p>求导得$f_Z(z)=\int_{-\infty}^{\infty}f(zy,y)|y|dy$</p>
<p><strong>Jacobi行列式</strong>：$J(u, v)=\frac{\partial(x, y)}{\partial(u, v)}=\det\left[ \begin{array}{ll}<br>\frac{\partial x}{\partial u} &amp; \frac{\partial x}{\partial v} \\<br>\frac{\partial y}{\partial u} &amp; \frac{\partial y}{\partial v}<br>\end{array}\right]$</p>
<p>若连续可微变换$T(u,v)=(x(u,v),y(u,v))$为双射，且$J(u,v)≠0$，则</p>
<p>$\iint_\Omega f(x,y)dxdy=\iint_{\Omega^{\prime}}f(x(u,v),y(u,v))|J(u,v)|dudv$</p>
<p>则逆变换$U=g_1(X,Y),V=g_2(X,Y)$的联合密度为：</p>
<p>$f_{UV}(u,v)=f_{XY}(x(u,v),y(u,v))|J(u,v)|$</p>
<p><strong>正态分布与线性变换</strong>：</p>
<p>两个独立标准正态r.v.的线性变换服从二元正态分布。</p>
<p>更一般地，若两个r.v.的联合分布为二元正态分布，则其非奇异线性变换还是二元正态分布。</p>
<p><strong>构造生成标准正态分布r.v.</strong>：构造独立r.v. $U_1\sim U[0,1]$，$U_2\sim U[0,1]$</p>
<p>则$X=\sqrt{-2logU_1}\cos(2\pi U_2)，Y=\sqrt{-2logU_1}\sin(2\pi U_2)$是独立标准正态r.v.</p>
<h2 id="§3-7-极值和顺序统计量"><a href="#§3-7-极值和顺序统计量" class="headerlink" title="§3.7 极值和顺序统计量"></a>§3.7 极值和顺序统计量</h2><h3 id="r-v-极值的分布"><a href="#r-v-极值的分布" class="headerlink" title="r.v.极值的分布"></a>r.v.极值的分布</h3><p><strong>max分布</strong>：$\{X_n\}$为独立r.v.集，$F_{max}(z)=P\{\bigcap\limits_{i=1}^{n} (X_i\leq z)\}=\prod\limits_{i=1}^{n}F_{X_i}(z)$</p>
<p><strong>min分布</strong>：$\{X_n\}$为独立r.v.集，$F_{max}(z)=P\{\bigcup\limits_{i=1}^{n} (X_i\leq z)\}=1-\prod\limits_{i=1}^{n}(1-F_{X_i}(z))$</p>
<p><strong>n个独立同分布r.v.的极值的密度</strong>：$f_{max}(z)=nf(z)[F(z)]^{n-1},\ f_{min}(z)=nf(z)[1-F(z)]^{n-1}$</p>
<p>指数分布的<strong>串联系统</strong>仍服从指数分布，失效率为各部件失效率之和。</p>
<p><strong>顺序统计量$X_{(k)}$的密度</strong>：$f_k(x)=\frac{n!}{(k-1)!(n-k)!}f(x)F^{k-1}(x)[1-F(x)]^{n-k}$</p>
<p>若$X_i\sim \mathbf U[0,1]$且相互独立，则$X_{(k)}\sim \mathbf{Beta}(k,n-k+1)$</p>
<h1 id="Chapter-4"><a href="#Chapter-4" class="headerlink" title="Chapter 4"></a>Chapter 4</h1><h2 id="§4-1-随机变量的期望"><a href="#§4-1-随机变量的期望" class="headerlink" title="§4.1 随机变量的期望"></a>§4.1 随机变量的期望</h2><p><strong>数学期望(离散型)</strong>：</p>
<p>若级数$\sum\limits_{k=1}^{\infty}|x_k|p_k&lt;+\infty$，则数学期望$E(x)\overset{\Delta}=\sum\limits_{k=1}^{\infty}x_kp_k=\sum\limits_{k=1}^{\infty}x_kP\{X=x_k\}$</p>
<p>否则无法说明级数$\sum\limits_{k=1}^{\infty}x_kp_k$收敛，期望不存在</p>
<p><strong>数学期望(连续型)</strong>：</p>
<p>r.v.$X$的cdf为$f(x)$，若$\int_{-\infty}^{\infty}|x|f(x)dx&lt;+\infty$，则数学期望$E(x)=\int_{-\infty}^{\infty}xf(x)dx$</p>
<p>否则$\int_{-\infty}^{\infty}|x|f(x)dx=+\infty$，期望不存在(标准柯西分布：$f(x)=\frac{1}{\pi(1+x^2)}$)</p>
<p><strong>Markov不等式</strong>：</p>
<p>r.v.$X$非负，且$E(X)$存在，则$P\{X\ge t\}\leq\frac{E(X)}{t}$</p>
<p><strong>函数的期望</strong>：</p>
<p>对于普通函数$y=g(x)$，其期望$E(Y)=E(g(X))=\sum\limits_{k=1}^{\infty}g(x_k)p_k$ 或 $\int_{-\infty}^{\infty}g(x)f(x)dx$</p>
<p>对于二元函数$z=g(x,y)$，其期望$E(Z)=E(g(X,Y))=\sum\limits_{i=1}^{\infty}\sum\limits_{j=1}^{\infty}g(x_i,y_j)p_{ij}$或$\int_{-\infty}^{\infty}\int_{-\infty}^{\infty}g(x,y)f(x,y)dxdy$</p>
<p><strong>数学期望的基本性质</strong>：</p>
<ul>
<li>设$a\leq X\leq b\ (a.e)$，则$a\leq E(X)\leq b$</li>
<li>对于常数$c$，$E(cX)=cE(X)$</li>
<li>对于r.v. $X,Y$，$E(X+Y)=E(X)+E(Y)$</li>
<li>对于<strong>独立</strong>r.v. $X,Y$，$E(XY)=E(X)E(Y)$</li>
</ul>
<p><strong>数学期望的几个推论</strong>：</p>
<ul>
<li>若$X=c\ (a.e)$，则$E(X)=c$</li>
<li>线性组合的期望等于期望的线性组合</li>
<li>$\{X_n\}$相互独立，则$E(\prod\limits_{k=1}^{n}X_k)=\prod\limits_{k=1}^{n}E(X_k)$</li>
</ul>
<p><strong>超几何分布等式</strong>：$N$件产品，$M$件次品，摸出次品个数的期望值(前置证明：每次摸中次品概率相同)</p>
<p>$\sum\limits_{k=0}^{n}k\frac{C^k_MC^{n-k}_{N-M}}{C^n_N}=\frac{nM}{N}$</p>
<h2 id="§4-2-方差与标准差"><a href="#§4-2-方差与标准差" class="headerlink" title="§4.2 方差与标准差"></a>§4.2 方差与标准差</h2><p><strong>方差</strong>：$Var(X)\overset{\Delta}=E[(X-E(X))^2]$</p>
<p><strong>标准差</strong>：$\sqrt{Var(X)}$</p>
<p><strong>方差的计算</strong>：$Var(X)=E(X^2)-[E(X)]^2$</p>
<p><strong>方差的基本性质</strong>：</p>
<ul>
<li>$X=c\ (a.e)⇌Var(X)=0$</li>
<li>对于常数$a,b$，$Var(aX±b)=a^2Var(X)$</li>
<li>对于r.v. $X,Y$，$Var(X±Y)=Var(X)+Var(Y)±2E[(X-E(x))(Y-E(Y)]$</li>
<li>对于相互独立的$\{X_n\}$，$Var(\sum\limits_{k=1}^{n}X_i)=\sum\limits_{k=1}^{n}Var(X_i)$</li>
</ul>
<p><strong>正态r.v.的标准化</strong>：$X\sim \mathbf N(\mu,\sigma^2)$，$X^\star=\frac{X-\mu}{\sigma}$，$X^\star\sim \mathbf N(0,1)$</p>
<p><strong>Chebyshev不等式</strong>：</p>
<p>期望$\mu$、方差$\sigma^2$均存在，则$\forallε&gt;0$，有$P\{|X-\mu|\ge ε\}\leq\frac{\sigma^2}{ε^2}$</p>
<p>证明用Markov不等式，$Y=(X-\mu)^2$，$E(Y)=\sigma^2$</p>
<h2 id="§4-3-协方差与相关系数"><a href="#§4-3-协方差与相关系数" class="headerlink" title="§4.3 协方差与相关系数"></a>§4.3 协方差与相关系数</h2><p><strong>协方差</strong>：$Cov(X,Y)\overset{\Delta}=E[(X-E(X))(Y-E(Y))]=E(XY)-E(X)E(Y)$</p>
<p><strong>协方差的基本性质</strong></p>
<ul>
<li><p>若r.v. $X,Y$相互独立，则$Cov(X,Y)=0$，但协方差为0不一定独立</p>
</li>
<li><p>$Cov(X,Y)=Cov(Y,X)$，$Cov(X,X)=Var(X)$</p>
</li>
<li><p>$Var(X±Y)=Var(X)+Var(Y)±2Cov(X,Y)$</p>
</li>
<li><p>双线性性：</p>
<ul>
<li><p>$Cov(aX,bY)=abCov(X,Y)$</p>
</li>
<li><p>$Cov(X_1+X_2,Y)=Cov(X_1,Y)+Cov(X_2,Y)$</p>
</li>
<li><p>$U=a+\sum\limits_{i=1}^{n}b_iX_i$，$V=c+\sum\limits_{j=1}^{m}d_jY_j$，则</p>
<p>$Cov(U,V)=\sum\limits_{i=1}^{n}\sum\limits_{j=1}^{m}b_id_jCov(X_i,Y_j)$</p>
</li>
</ul>
</li>
</ul>
<p><strong>相关系数</strong>：$\rho_{XY}\overset{\Delta}=\frac{Cov(X,Y)}{\sqrt{Var(X)Var(Y)}}$，$|\rho_{XY}|\leq1$，取等当且仅当$Y\overset{a.e}=a+bX$</p>
<p><strong>均方误差</strong>：对于线性近似$\widehat Y=a+bX$，均方误差$e=E[(Y-\widehat Y)^2]$</p>
<p>$e_{min}=Var(Y)(1-\rho^2_{XY})$，此时$b_0=\frac{Cov(X,Y)}{Var(X)}$，$a_0=E(Y)-b_0E(X)$</p>
<p><strong>相关</strong>：正相关，负相关，不相关。不相关不一定独立，独立一定不相关。</p>
<p><strong>协方差矩阵</strong>：对于n维r.v.$\{X_n\}$，记$c_{ij}=Cov(X_i,X_j)\ (i,j=1,2,\cdots,n)$</p>
<p>将$c_{ij}$写成矩阵的形式$C$，则称其为$\{X_n\}$的协方差矩阵。协方差矩阵为<strong>非负定对称阵</strong>。</p>
<p><strong>n维正态r.v.</strong>：令</p>
<script type="math/tex; mode=display">X=\left[\begin{array}{c}
x_{1} \\
x_{2} \\
\vdots \\
x_{n}
\end{array}\right], \quad \mu=\left[\begin{array}{c}
\mu_{1} \\
\mu_{2} \\
\vdots \\
\mu_{n}
\end{array}\right], \quad C=\left[\begin{array}{cccc}
c_{11} & c_{12} & \cdots & c_{1 n} \\
c_{21} & c_{22} & \cdots & c_{2 n} \\
\vdots & \vdots & \ddots & \vdots \\
c_{n 1} & c_{n 2} & \cdots & c_{n n}
\end{array}\right]</script><p>其中$C$为n阶正定矩阵，若n维r.v.$\{X_n\}$的密度函数为</p>
<p>$f\left(x_{1}, x_{2}, \cdots, x_{n}\right)=\frac{1}{(2 \pi)^{n / 2}|C|^{1 / 2}} \exp \left\{-\frac{1}{2}(X-\mu)^{T} C^{-1}(X-\mu)\right\}$</p>
<p>则称$\{X_n\}$服从参数为$(\mu,C)$的n维正态分布，记为$(X_1,X_2,\cdots,X_n)\sim \mathbf N(\mu,C)$。</p>
<p><strong>n维正态r.v.的重要性质</strong>：</p>
<ul>
<li><p>$\mu$称为均值向量，$C$为协方差矩阵，对角线为对应r.v.方差。</p>
</li>
<li><p>$X_i\sim\mathbf N(\mu_i,c_{ii}),\ (i=1,2,\cdots,n)$，反之若$\{X_n\}$相互独立且$X_i\sim\mathbf N(\mu_i,\sigma_i^2),\ (i=1,2,\cdots,n)$，则</p>
<p>$\{X_n\}\sim\mathbf N(\mu,C)$，其中$\mu=[\mu1\ \mu2\ …\ \mu_n]^T$，$C=diag\{\sigma_1^2\ \sigma_2^2\ …\ \sigma_n^2\ \}$</p>
</li>
<li><p>若$\{X_n\}\sim\mathbf N(\mu,C)$，则$\{X_n\}$的任一线性组合$\sum\limits_{k=1}^{n}l_iX_i$服从一维正态分布</p>
</li>
<li><p>正态r.v.的线性变换不变性：若$\{X_n\}\sim\mathbf N(\mu,C)$</p>
<p>$\left\{\begin{array}{c}<br>Y_{1}=a_{11} X_{1}+a_{12} X_{2}+\cdots+a_{1 n} X_{n} \\<br>Y_{2}=a_{21} X_{1}+a_{22} X_{2}+\cdots+a_{2 n} X_{n} \\<br>\quad \vdots \\<br>Y_{m}=a_{m 1} X_{1}+a_{m 2} X_{2}+\cdots+a_{m n} X_{n}<br>\end{array}\right.$</p>
<p>则$\{Y_m\}$仍服从多维正态分布。</p>
</li>
</ul>
<h2 id="§4-4-条件期望"><a href="#§4-4-条件期望" class="headerlink" title="§4.4 条件期望"></a>§4.4 条件期望</h2><p>不考，不过明明是很重要的内容来着。</p>
<h2 id="§4-x-常用分布的分布及数字特征"><a href="#§4-x-常用分布的分布及数字特征" class="headerlink" title="§4.x 常用分布的分布及数字特征"></a>§4.x 常用分布的分布及数字特征</h2><p><img src="https://s2.loli.net/2022/12/30/xOTFlhpsguVoaZD.jpg" alt="常用分布的分布及数字特征.jpg"  /></p>
<h1 id="Chapter-5"><a href="#Chapter-5" class="headerlink" title="Chapter 5"></a>Chapter 5</h1><h2 id="§5-1-大数定律"><a href="#§5-1-大数定律" class="headerlink" title="§5.1 大数定律"></a>§5.1 大数定律</h2><p><strong>依概率收敛</strong>：</p>
<p>设$\xi,\xi_1,\xi_2,\cdots,\xi_n,…$是一系列r.v.，若$\forall\varepsilon&gt;0$，有$\lim\limits_{n→\infty}P\{|\xi_n-\xi|\ge \varepsilon\}=0$，则称$\{\xi_n\}$依概率收敛于$\xi$，记为$\xi_{n} \stackrel{P}{\longrightarrow} \xi $。</p>
<ul>
<li>$\lim\limits_{n→\infty}P\{|\xi_n-\xi|\ge \varepsilon\}=0⇌\lim\limits_{n→\infty}P\{|\xi_n-\xi|&lt; \varepsilon\}=1$</li>
<li>随着n的增大，绝对误差$|\xi_n-\xi|$较大的可能性越来越小</li>
<li>若$\xi_{n} \stackrel{P}{\longrightarrow} \xi$，$g$是连续函数，则$g(\xi_{n}) \stackrel{P}{\longrightarrow} g(\xi) $</li>
</ul>
<p><strong>几乎处处收敛(了解)</strong>：</p>
<p>若r.v.列$\{\xi_n\}$满足$\forall\varepsilon&gt;0$，$P\{\lim\limits_{n→\infty}|\xi_n-\xi|&lt;\varepsilon\}=1$，则称$\{\xi_n\}$几乎处处收敛于$\xi$，记为$\xi_n\stackrel{a.s.}{\longrightarrow}\xi$或$\xi_n→\xi,\ a.s.$</p>
<p><strong>伯努利大数定律</strong>：</p>
<p>设$n_A$是n次独立重复实验中事件$A$发生的次数，且$P(A)=p$，则$\forall\varepsilon&gt;0$，有$\lim\limits_{n→\infty}P\{|\frac{n_A}{n}-p|\ge \varepsilon\}=0$</p>
<p><strong>切比雪夫大数定律</strong>：</p>
<p>$\{X_n\}$为独立r.v.列，且具有相同的期望$\mu$和方差$\sigma^2$，则$\forall\varepsilon&gt;0$有$\lim\limits_{n→\infty}P\{|\frac{1}{n}\sum\limits_{i=1}^{n}X_i-\mu|\ge\varepsilon\}=0$，即$\bar X_n \stackrel{P}{\longrightarrow} \mu$，可由Chebyshev不等式证明：$P\left(\left|\bar{X}_{n}-\mu\right|&gt;\varepsilon\right) \leq \frac{\operatorname{Var}\left(\bar{X}_{n}\right)}{\varepsilon^{2}}=\frac{\sigma^{2}}{n \varepsilon^{2}} \rightarrow 0,$</p>
<p><strong>辛钦大数定律(弱大数定律)</strong>：</p>
<p>$\{X_n\}$是独立同分布r.v.列，期望$\mu$存在，则$\{X_n\}$服从大数定律，$\forall\varepsilon&gt;0$，有$\lim\limits_{n→\infty}P\{|\frac{1}{n}\sum\limits_{i=1}^{n}X_i-\mu|&lt;\varepsilon\}=1$</p>
<p><strong>强大数定律(了解)</strong>：</p>
<p>若$\{X_n\}$两两独立且同分布，期望$\mu$存在，则$\bar X_n\stackrel{a.s.}{\longrightarrow}\mu$</p>
<h2 id="§5-2-中心极限定理"><a href="#§5-2-中心极限定理" class="headerlink" title="§5.2 中心极限定理"></a>§5.2 中心极限定理</h2><p><strong>中心极限定理</strong>：</p>
<p>若$Z_n=\frac{\sum_{k=1}^{n} X_{k}-\sum_{k=1}^{n} \mu_{k}}{\sqrt{\sum_{k=1}^{n} \sigma_{k}^{2}}}$的分布函数$F_n(x)$对任意$x$满足</p>
<p>$\begin{aligned}<br>\lim _{n \rightarrow \infty} F_{n}(x) &amp; =\lim _{n \rightarrow \infty} P\left\{\frac{\sum_{k=1}^{n} X_{k}-\sum_{k=1}^{n} \mu_{k}}{\sqrt{\sum_{k=1}^{n} \sigma_{k}^{2}}} \leq x\right\} \\<br>&amp; =\int_{-\infty}^{x} \frac{1}{\sqrt{2 \pi}} e^{-\frac{t^{2}}{2}} d t=\Phi(x)<br>\end{aligned}$</p>
<p>则称$\{X_k\}$服从中心极限定理。</p>
<p><strong>中心极限定理(独立同分布)</strong>：</p>
<p>$\begin{aligned}<br>\lim _{n \rightarrow \infty} F_{n}(x) &amp; =\lim _{n \rightarrow \infty} P\left\{\frac{\sum_{k=1}^{n} X_{k}-n \mu}{\sqrt{n} \sigma} \leq x\right\} \\<br>&amp; =\int_{-\infty}^{x} \frac{1}{\sqrt{2 \pi}} e^{-\frac{t^{2}}{2}} d t=\Phi(x)<br>\end{aligned}$</p>
<p><strong>中心极限定理的实际含义</strong>：</p>
<p>对于均值为$\mu$，方差$\sigma^2&gt;0$的i.i.d.r.v.列$\{X_n\}$，有$\sum\limits_{k=1}^{n}X_k\overset{近似}\sim\mathbf N(n\mu,n\sigma^2)$，或$\bar X_n\overset{近似}\sim\mathbf N(\mu,\frac{\sigma^2}{n})$</p>
<p><strong>棣莫弗-拉普拉斯中心极限定理</strong>：</p>
<p>设$\{\eta_n\}$为服从参数为$n,p(0&lt;p&lt;1)$的二项分布r.v.列，则对任意$x$有</p>
<p>$\lim _{n \rightarrow \infty} P\left\{\frac{\eta_{n}-n p}{\sqrt{n p(1-p)}} \leq x\right\}=\int_{-\infty}^{x} \frac{1}{\sqrt{2 \pi}} e^{-\frac{t^{2}}{2}} d t=\Phi(x)$</p>
<p>对于r.v.$\eta_n\sim \mathbf b(n,p)\ (n=1,2,…)$，有$\frac{\eta_{n}-n p}{\sqrt{n p(1-p)}}\overset{近似}\sim\mathbf N(0,1)$，于是当$n$充分大时，可以认为$\eta_n\overset{近似}\sim\mathbf N(np,np(1-p))$</p>
<h1 id="Chapter-6"><a href="#Chapter-6" class="headerlink" title="Chapter 6"></a>Chapter 6</h1><h2 id="§6-2-数理统计：基本概念"><a href="#§6-2-数理统计：基本概念" class="headerlink" title="§6.2 数理统计：基本概念"></a>§6.2 数理统计：基本概念</h2><p><strong>简单随机抽样</strong>：</p>
<p>在相同条件下对总体$X$进行$n$次重复、独立观察。要求各次取样结果互不影响，每次取出的样品与总体有相同的分布，满足这两条性质的样本称为简单随机样本。</p>
<p><strong>样本均值</strong>：$\bar X=\frac{1}{n}\sum\limits_{i=1}^{n}X_i$</p>
<p><strong>样本方差</strong>：$S^2=\frac{1}{n-1}\sum\limits_{i=1}^{n}(X_i-\bar X)^2$</p>
<p><strong>样本标准差</strong>：$S=\sqrt{\frac{1}{n-1}\sum\limits_{i=1}^{n}(X_i-\bar X)^2}$</p>
<p><strong>样本k阶矩</strong>：$A_k=\frac{1}{n}\sum\limits_{i=1}^{n}X_i^k$</p>
<p><strong>样本k阶中心距</strong>：$B_k=\frac{1}{n}\sum\limits_{i=1}^{n}(X_i-\bar X)^k$</p>
<p><strong>顺序统计量</strong>：$X_{(1)},X_{(2)},\cdots,X_{(n)}$</p>
<p><strong>极小值</strong>：$X_{(1)}=min\{X_1,X_2,\cdots,X_n\}$</p>
<p><strong>极大值</strong>：$X_{(n)}=max\{X_1,X_2,\cdots,X_n\}$</p>
<p><strong>样本矩的特征</strong>：设$\{X_n\}$为来自总体$X\sim F(x)$的样本，总体k阶矩$\mu_k\overset{\Delta}=E(X^k)$都存在，则</p>
<ul>
<li>$X_1^k,X_2^k,\cdots,X_n^k$独立，与$X^k$同分布</li>
<li>$E(A_k)=\frac{1}{n}\sum\limits_{i=1}^{n}E(X_i^k)=\frac{1}{n}\sum\limits_{i=1}^{n}E(X^k)=\mu_k$</li>
<li>由辛钦大数定律，$n→\infty$时，$A_k\stackrel{P}{\longrightarrow}\mu_k$，连续函数$g(A_1,A_2,\cdots,A_k)\stackrel{P}{\longrightarrow}g(\mu_1,\mu_2,\cdots,\mu_k)$</li>
</ul>
<p><strong>样本均值与样本方差的数字特征</strong>：$E(\bar X)=\mu$，$Var(\bar X)=\frac{\sigma^2}{n}$，$E(S^2)=\sigma^2$</p>
<h2 id="§6-3-抽样分布"><a href="#§6-3-抽样分布" class="headerlink" title="§6.3 抽样分布"></a>§6.3 抽样分布</h2><p><strong>$\chi^2$-分布</strong>：</p>
<p>设$X_1,X_2,\cdots,X_n$是来自总体$X\sim\mathbf N(0,1)$的样本，令</p>
<script type="math/tex; mode=display">\mathcal {X}^2=X_1^2+X_2^2+\cdots+X_n^2</script><p>称$\mathcal {X}^2$服从自由度为$n$的$\chi^2$-分布，记为$\mathcal {X}^2\sim\chi^2(n)$。</p>
<p><strong>$\chi^2$-分布的可加性</strong>：</p>
<p>设$\chi_1^2\sim\chi^2(n_1)$，$\chi_2^2\sim\chi^2(n_2)$且相互独立，则$\chi_1^2+\chi_2^2\sim\chi^2(n_1+n_2)$</p>
<p><strong>$\chi^2$-分布的数字特征</strong>：</p>
<p>设$\chi^2\sim\chi^2(n)$，则$E(\chi^2)=n$，$Var(\chi^2)=2n$</p>
<p><strong>$t$-分布</strong>：</p>
<p>设$X\sim\mathbf N(0,1)$，$Y\sim\chi^2(n)$，且$X,Y$相互独立，令</p>
<script type="math/tex; mode=display">t=\frac{X}{\sqrt{Y/n}}</script><p>称$t$服从自由度为$n$的$t$-分布，记为$t\sim t(n)$。当$n$较大时，可以认为$t(n)=N(0,1)$</p>
<p><strong>$F$-分布</strong>：</p>
<p>设$U\sim\chi^2(n_1)$，$V\sim\chi^2(n_2)$，且$U,V$相互独立，令</p>
<script type="math/tex; mode=display">F=\frac{U/n_1}{V/n_2}</script><p>称$F$服从自由度为$(n_1,n_2)$的$F$-分布，记为$F\sim F(n_1,n_2)$</p>
<p><strong>$F$-分布的性质</strong>：</p>
<ul>
<li>若$F\sim F(n_1,n_2)$，则$\frac{1}{F}\sim F(n_2,n_1)$</li>
<li>若$T\sim t(n)$，则$T^2\sim F(1,n)$。($t$-分布的平方服从$F$-分布)</li>
</ul>
<p><strong>$\alpha$分位点</strong>：</p>
<p>设$X\sim f(x)$，若$\forall0&lt;\alpha&lt;1$，存在常数$x_\alpha$满足</p>
<script type="math/tex; mode=display">P\{X\leq x_\alpha\}=\int_{-\infty}^{x_\alpha}f(x)dx=\alpha</script><p>则称$x_\alpha$为分布密度$f(x)$的$\alpha$分位点，也即$F(X_\alpha)=\alpha$</p>
<ul>
<li>$\mathbf N(0,1)$的$\alpha$分位点记为$u_\alpha$</li>
<li>$t(n)$的$\alpha$分位点记为$t_\alpha(n)$</li>
<li>$\chi^2(n)$的$\alpha$分位点记为$\chi^2_\alpha(n)$</li>
<li>$F(n_1,n_2)$的$\alpha$分位点记为$F_\alpha(n_1,n_2)$</li>
<li>三反公式：$F_\alpha(n_1,n_2)=\frac{1}{F_{1-\alpha}(n_2,n_1)}$</li>
</ul>
<p><strong>抽样分布定理一</strong>：</p>
<p>设$X_1,X_2,\cdots,X_n$是来自总体$X\sim\mathbf N(\mu,\sigma^2)$的样本，则$\bar X\sim\mathbf N(\mu,\frac{\sigma^2}{n})$</p>
<p><strong>抽样分布定理二</strong>：</p>
<ol>
<li>$\bar X$，$S^2$相互独立</li>
<li>$\frac{(n-1)S^2}{\sigma^2}\sim\chi^2(n-1)$</li>
</ol>
<p><strong>抽样分布定理三</strong>：</p>
<p>设$X_1,X_2,\cdots,X_n$是来自总体$X\sim\mathbf N(\mu,\sigma^2)$的样本，则</p>
<script type="math/tex; mode=display">\frac{\bar X-\mu}{S/\sqrt{n}}\sim t(n-1)</script><p><strong>抽样分布定理四</strong>：</p>
<p>设$X_1,X_2,\cdots,X_n$是总体$X\sim\mathbf N(\mu_1,\sigma_1^2)$的样本；$Y_1,Y_2,\cdots,Y_m$是总体$Y\sim\mathbf N(\mu_2,\sigma_2^2)$的样本，且两样本相互独立，两样本均值和样本方差分别为$\bar X,\bar Y,S_1^2,S_2^2$，则</p>
<script type="math/tex; mode=display">\frac{S_1^2/\sigma_1^2}{S_2^2/\sigma_2^2}\sim F(n-1,m-1)</script><p><strong>抽样分布定理五</strong>：</p>
<p>设$X_1,X_2,\cdots,X_n$是总体$X\sim\mathbf N(\mu_1,\sigma_1^2)$的样本；$Y_1,Y_2,\cdots,Y_m$是总体$Y\sim\mathbf N(\mu_2,\sigma_2^2)$的样本，且两样本相互独立，两样本均值和样本方差分别为$\bar X,\bar Y,S_1^2,S_2^2$，则</p>
<script type="math/tex; mode=display">\frac{(\bar X-\bar Y)-(\mu_1-\mu_2)}{S_\omega\sqrt{\frac{1}{n}+\frac{1}{m}}}\sim t(n+m-2)</script><p>其中$S_\omega^2=\frac{(n-1)S_1^2+(m-1)S_2^2}{n+m-2}$，$S_\omega=\sqrt{S_\omega^2}$</p>
<p><strong>指数分布与$\chi^2$-分布</strong>：自由度为2的$\chi^2$-分布就是参数为$\frac 1 2$的指数分布</p>
<h1 id="Chapter-7"><a href="#Chapter-7" class="headerlink" title="Chapter 7"></a>Chapter 7</h1><h2 id="§7-1-点估计"><a href="#§7-1-点估计" class="headerlink" title="§7.1 点估计"></a>§7.1 点估计</h2><p><strong>矩估计法</strong>：</p>
<p>设总体$X\sim F(x;\theta_1,\theta_2,\cdots,\theta_m)$，其中$\theta_1,\theta_2,\cdots,\theta_m$为未知参数，$X_1,X_2,\cdots,X_n$为来自总体$X$的样本，设总体矩$\mu_k=E(X^k)\ (k=1,2,\cdots,m)$都存在，则$\mu_k$是$\theta_1,\theta_2,\cdots,\theta_m$的函数。</p>
<p>由辛钦大数定律，样本k阶矩$A_k\stackrel{P}{\longrightarrow}\mu_k,\ n→\infty\ (k=1,2,\cdots,m)$</p>
<p>从而可以使用$A_k$估计$\mu_k$，进而得到$\theta$的估计。</p>
<ol>
<li>设$\mu_i=\mu_i(\theta_1,\theta_2,\cdots,\theta_m),\ i=1,2,\cdots,m$</li>
<li>反解方程组得$\theta_i=\theta_i(\mu_1,\mu_2,\cdots,\mu_m),\ i=1,2,\cdots,m$</li>
<li>用样本矩代替总体矩，得到矩估计$\widehat \theta_i=\widehat\theta_i(A_1,A_2,\cdots,A_m),\ i=1,2,\cdots,m$</li>
<li>若$\widehat\theta$是位置参数$\theta$的据估计，则$g(\theta)$的矩估计为$g(\widehat\theta)$。</li>
</ol>
<p><strong>二阶矩估计的结论</strong>：</p>
<p>用$A_1,A_2$代替$\mu_1,\mu_2$，得到$\mu$和$\sigma^2$的矩估计量分别为：</p>
<p>$\widehat \mu=A_1=\bar X$</p>
<p>$\widehat \sigma^2=A_2-A_1^2=\frac{n-1}{n}S^2\overset{\Delta}=\widetilde S^2$，称为修正的样本方差。</p>
<p><strong>最大似然估计(MLE)</strong>：</p>
<p>设$X_1,X_2,\cdots,X_n$是来自总体$X\sim f(x;\theta)$的样本，令</p>
<script type="math/tex; mode=display">L(\theta)=L(\theta;X_1,X_2,\cdots,X_n)=\prod\limits_{i=1}^{n}f(X_i;\theta)</script><p>$L(\theta)$称为<strong>似然函数</strong>，若存在统计量$\widehat\theta=\widehat\theta(X_1,X_2,\cdots,X_n)$使得$L(\widehat\theta)=\max\limits_{\theta\in\Theta}L(\theta;x_1,x_2,\cdots,x_)$，则称其为$\theta$的最大似然估计(MLE)。</p>
<p><strong>最大似然估计常见求法</strong>：</p>
<ol>
<li>求似然函数，构建(对数)似然方程组</li>
<li>对各未知参数求偏导，使其偏导为0</li>
<li>求解(对数)似然方程组，得到MLE</li>
</ol>
<p>在似然函数不可导时，回到原始定义，即找到让似然函数值最大的$\widehat\theta$即可</p>
<h2 id="§7-2-估计量的评价标准"><a href="#§7-2-估计量的评价标准" class="headerlink" title="§7.2 估计量的评价标准"></a>§7.2 估计量的评价标准</h2><p><strong>无偏性</strong>：</p>
<p>若估计量$\widehat\theta=\widehat\theta(X_1,X_2,\cdots,X_n)$的数学期望存在，且$\forall\theta\in\Theta$有$E_\theta(\widehat\theta)=\theta$，则称$\widehat\theta$为$\theta$的无偏估计</p>
<p>，否则为有偏估计。</p>
<p>称$b_n(\widehat\theta)=E_\theta(\widehat\theta)-\theta$为估计量$\widehat\theta$的偏差，若$\lim\limits_{n→\infty}b_n(\widehat\theta)=0$，则$\widehat\theta$为$\theta$的渐进无偏估计。</p>
<p>对任意总体$X$，若期望$\mu$与方差$\sigma^2$存在，则$\widehat\mu=\bar X$，$\widehat\sigma^2=S^2$都是无偏估计，而修正后的样本方差$\widetilde S^2$是$\sigma^2$的渐进无偏估计。</p>
<p>同一参数的不同无偏估计的线性组合(总比例为1)还是无偏估计。</p>
<p><strong>估计量的均方误差</strong>：</p>
<p>设$\widehat\theta(X_1,X_2,\cdots,X_n)$为待估参数$\theta$的估计量，称$E_\theta(\widehat\theta-\theta)^2$为$\widehat\theta$的均方误差。</p>
<p>$E_\theta(\widehat\theta-\theta)^2=Var(\widehat\theta)+[E(\widehat\theta)-\theta]^2$</p>
<p><strong>有效性</strong>：</p>
<p>设$X_1,X_2,\cdots,X_n$是总体$X\sim F(x,\theta);\theta\in\Theta$的样本，</p>
<script type="math/tex; mode=display">\widehat\theta_1=\widehat\theta_1(X_1,X_2,\cdots,X_n),\widehat\theta_2=\widehat\theta_2(X_1,X_2,\cdots,X_n)</script><p>都是$\theta$的无偏估计，即$E(\widehat\theta_1)=E(\widehat\theta_2)=\theta\ (\forall\theta\in\Theta)$。若$\forall\theta\in\Theta$有$Var(\widehat\theta_1)\leq Var(\widehat\theta_2)$，则称$\widehat\theta_1$较$\widehat\theta_2$有效。</p>
<p><strong>相合性(一致性)</strong>：</p>
<p>设$\widehat\theta_n=\widehat\theta(X_1,X_2,\cdots,X_n)$是位置参数$\theta$的点估计，若$\forall\theta\in\Theta$满足：$\forall\varepsilon&gt;0$有</p>
<script type="math/tex; mode=display">\lim\limits_{n→\infty}P\{|\widehat\theta_n-\theta|\ge \varepsilon\}=0</script><p>即$\widehat\theta_n\stackrel{P}{\longrightarrow}\theta\ (n→\infty)$，则称$\widehat\theta_n$是$\theta$相合估计。</p>
<p>对任意总体$X$，若期望$\mu$与方差$\sigma^2$存在，则$\widehat\mu=\bar X$，$\widehat\sigma^2=S^2$都是相合估计。</p>
<p><strong>关于相合估计的一般结论</strong>：</p>
<ul>
<li><p>由辛钦大数定律，$\theta$的矩估计$\widehat\theta$是相合估计</p>
</li>
<li><p>$\theta$的MLE$\widehat\theta$一般也是相合估计</p>
</li>
<li><p>$\theta$的相合估计不一定是无偏估计</p>
</li>
<li><p>若$\widehat\theta$是$\theta$的无偏估计，则由Chebyshev不等式有</p>
<script type="math/tex; mode=display">P\{|\widehat\theta-\theta|\ge \varepsilon\}\leq \frac{Var(\widehat\theta)}{\varepsilon^2}</script><p>故当$\lim\limits_{n→\infty}Var(\widehat\theta)=0$时，$\widehat\theta$是$\theta$的相合估计(充分条件)</p>
</li>
</ul>
<h2 id="§7-3-区间估计"><a href="#§7-3-区间估计" class="headerlink" title="§7.3 区间估计"></a>§7.3 区间估计</h2><p><strong>区间估计</strong>：</p>
<p>设总体$X\sim F(x;\theta)\ (\theta\in\Theta)$。若对给定的$0&lt;\alpha&lt;1$，存在两个统计量</p>
<script type="math/tex; mode=display">\underline\theta=\underline\theta(X_1,X_2,\cdots,X_n),\ \overline\theta=\overline\theta(X_1,X_2,\cdots,X_n)\ (\underline\theta\leq \overline\theta)</script><p>使得$\forall\theta\in\Theta$，有</p>
<script type="math/tex; mode=display">P\{\underline\theta\leq \theta\leq \overline\theta\}\ge 1-\alpha</script><p>则称随机区间$(\underline\theta,\overline\theta)$为$\theta$的置信水平为$1-\alpha$的<strong>置信区间</strong>，$\underline\theta,\overline\theta$分别称为<strong>置信下限</strong>和<strong>置信上限</strong>。</p>
<p>$1-\alpha$置信区间的含义是随机区间$[\underline\theta,\overline\theta]$至少以$1-\alpha$的概率套住$\theta$的真值。</p>
<ul>
<li><p>可靠性：置信度$1-\alpha$应尽量大，即要求估计尽量可信(可靠)。</p>
</li>
<li><p>精确性：区间长度应尽量小，即估计的精度要尽可能地高。</p>
</li>
<li>上述两个要求是相互矛盾的：先保证可靠性，在此前提下尽可能提高精度。</li>
</ul>
<p><strong>求未知参数置信区间的一般过程</strong>：</p>
<ul>
<li><p>找出参数$\theta$的一个较好的点估计$\widehat\theta=T(X_1,X_2,\cdots,X_n)$。</p>
</li>
<li><p>找出枢轴量函数$W(T,\theta)$，使得$W$的分布不依赖于未知参数</p>
</li>
<li><p>对于给定置信水平$1-\alpha$定出两个常数$a,b$使得</p>
<script type="math/tex; mode=display">P\{a\leq W(T,\theta)\leq b\}=1-\alpha</script></li>
<li><p>根据等价形式得到$\underline\theta\leq \theta\leq \overline\theta$，则$[\underline\theta,\overline\theta]$就是$\theta$的一个置信水平为$1-\alpha$的置信区间</p>
</li>
</ul>
<p><strong>单正态总体参数的区间估计</strong>：</p>
<p>单个正态总体$X\sim \mathbf N(\mu,\sigma^2)$，$X_1,X_2,\cdots,X_n$是一个样本。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">待估参数</th>
<th style="text-align:center">其他参数</th>
<th style="text-align:center">枢轴量及其分布</th>
<th style="text-align:center">置信区间</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">$\mu$</td>
<td style="text-align:center">$\sigma^2$已知</td>
<td style="text-align:center">$\frac{\bar X-\mu}{\sigma/\sqrt n}\sim \mathbf N(0,1)$</td>
<td style="text-align:center">$\left [\bar X-\frac{\sigma}{\sqrt n}u_{1-\frac{\alpha}{2}},\bar X+\frac{\sigma}{\sqrt n}u_{1-\frac{\alpha}{2}}\right]$</td>
</tr>
<tr>
<td style="text-align:center">$\mu$</td>
<td style="text-align:center">$\sigma^2$未知</td>
<td style="text-align:center">$\frac{\bar X-\mu}{S/\sqrt n}\sim t(n-1)$</td>
<td style="text-align:center">$\left[\bar{X}-\frac{S}{\sqrt{n}} t_{1-\frac{\alpha}{2}}(n-1), \bar{X}+\frac{S}{\sqrt{n}} t_{1-\frac{\alpha}{2}}(n-1)\right]$</td>
</tr>
<tr>
<td style="text-align:center">$\sigma^2$</td>
<td style="text-align:center">$\mu$已知</td>
<td style="text-align:center">$\sum\limits_{i=1}^{n}(\frac{X_i-\mu}{\sigma})^2\sim \chi^2(n)$</td>
<td style="text-align:center">$\left[\frac{\sum\limits_{i=1}^n (X_i-\mu)^2}{\chi^2_{1-{\alpha\over 2}}(n)},\frac{\sum\limits_{i=1}^n (X_i-\mu)^2}{\chi^2_{\alpha\over 2}(n)}\right]$</td>
</tr>
<tr>
<td style="text-align:center">$\sigma^2$</td>
<td style="text-align:center">$\mu$未知</td>
<td style="text-align:center">$\frac{(n-1)S^2}{\sigma^2}\sim \chi^2(n-1)$</td>
<td style="text-align:center">$\left[\frac{(n-1) S^{2}}{\chi_{1-{\alpha\over  2} }^{2}(n-1)}, \frac{(n-1) S^{2}}{\chi_{\alpha \over 2}^{2}(n-1)}\right]$</td>
</tr>
</tbody>
</table>
</div>
<p><strong>双正态总体参数的区间估计</strong>：</p>
<p>正态总体$\mathbf N(\mu_1,\sigma_1^2)$和$\mathbf N(\mu_2,\sigma_2^2)$的两组相互独立的样本$X_1,X_2,\cdots,X_m$和$Y_1,Y_2,\cdots,Y_n$。</p>
<p>样本均值和样本方差分别是$\bar X,S_1^2$和$\bar Y,S_2^2$，记$S_\omega^2=\frac{\left(m-1\right) S_{1}^{2}+\left(n-1\right) S_{2}^{2}}{\left(m+n-2\right)}$。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">待估参数</th>
<th style="text-align:center">其他参数</th>
<th style="text-align:center">枢轴量及其分布</th>
<th style="text-align:center">置信区间</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">$\mu_1-\mu_2$</td>
<td style="text-align:center">$\sigma_1^2,\sigma_2^2$已知</td>
<td style="text-align:center">$\frac{\bar{X}-\bar{Y}-\left(\mu_{1}-\mu_{2}\right)}{\sqrt{\frac{\sigma_{1}^{2}}{n_{1}}+\frac{\sigma_{2}^{2}}{n_{2}}}} \sim \mathbf N(0,1)$</td>
<td style="text-align:center">$\left[\bar{X}-\bar{Y}- \sqrt{\frac{\sigma_{1}^{2}}{m}+\frac{\sigma_{2}^{2}}{n}}u_{1-\frac{\alpha}{2}}, \bar{X}-\bar{Y}+\sqrt{\frac{\sigma_{1}^{2}}{m}+\frac{\sigma_{2}^{2}}{n}}u_{1-\frac{\alpha}{2}}\right]$</td>
</tr>
<tr>
<td style="text-align:center">$\mu_1-\mu_2$</td>
<td style="text-align:center">$\sigma_1^2=\sigma_2^2$未知</td>
<td style="text-align:center">$\frac{\bar{X}-\bar{Y}-\left(\mu_{1}-\mu_{2}\right)}{S_{\omega} \sqrt{\frac{1}{n_{1}}+\frac{1}{n_{2}}}} \sim t\left(n_{1}+n_{2}-2\right)$</td>
<td style="text-align:center">$\left[(\bar{X}-\bar{Y}) - S_{\omega} \sqrt{\frac{1}{m}+\frac{1}{n}}t_{1-\frac{\alpha}{2}}(m+n-2),(\bar{X}-\bar{Y}) + S_{\omega} \sqrt{\frac{1}{m}+\frac{1}{n}}t_{1-\frac{\alpha}{2}}(m+n-2)\right]$</td>
</tr>
<tr>
<td style="text-align:center">${\sigma_1^2}/{\sigma_2^2}$</td>
<td style="text-align:center">$\mu_1,\mu_2$未知</td>
<td style="text-align:center">$\frac{S_{1}^{2}}{S_{2}^{2}} \cdot \frac{\sigma_{2}^{2}}{\sigma_{1}^{2}} \sim F\left(n_{1}-1, n_{2}-1\right)$</td>
<td style="text-align:center">$\left[\frac{S_{1}^{2}}{S_{2}^{2}} \cdot \frac{1}{F_{1-\frac{\alpha}{2}}\left(m-1, n-1\right)}, \frac{S_{1}^{2}}{S_{2}^{2}} \cdot \frac{1}{F_{\frac{\alpha}{2}}\left(m-1, n-1\right)}\right]$</td>
</tr>
<tr>
<td style="text-align:center">${\sigma_1^2}/{\sigma_2^2}$</td>
<td style="text-align:center">$\mu_1,\mu_2$已知</td>
<td style="text-align:center">$\frac{\sum_{i=1}^{n_{1}}\left(\frac{X_{i}-\mu_{1}}{\sigma_{1}}\right)^{2} / n_{1}}{\sum_{i=1}^{n_{2}}\left(\frac{Y_{i}-\mu_{2}}{\sigma_{2}}\right)^{2} / n_{2}} \sim F\left(n_{1}, n_{2}\right)$</td>
<td style="text-align:center">$\left[\frac{\sum\limits_{i=1}^{m}\left(X_{i}-\mu_{1}\right)^{2} / m}{\sum\limits_{i=1}^{n}\left(X_{i}-\mu_{2}\right)^{2} / n} \cdot \frac{1}{F_{1-\frac{\alpha}{2}}(m, n)}, \frac{\sum\limits_{i=1}^{m}\left(X_{i}-\mu_{1}\right)^{2} / m}{\sum\limits_{i=1}^{n}\left(X_{i}-\mu_{2}\right)^{2} / n} \cdot \frac{1}{F_{\frac{\alpha}{2}}(m, n)}\right]$</td>
</tr>
</tbody>
</table>
</div>
<p><del>这玩意能背下来就有鬼了= =</del></p>
<p><strong>单侧置信区间</strong>：</p>
<p>将上表中的区间两端值取出，将$\frac{\alpha}{2}$全部更换为$\alpha$，即可得到置信水平为$1-\alpha$的单侧置信限。</p>
<p><strong>大样本下非正态总体参数的区间估计</strong>：</p>
<p>根据中心极限定理，当$n$充分大时有$\frac{\bar X-\mu}{\sigma/\sqrt n}\overset{近似}\sim\mathbf N(0,1)$</p>
<p>然后把$\mu$和$\sigma^2$用参数代回，按标准正态得到置信区间，解不等式得到参数的区间估计。</p>
<p><img src="https://s2.loli.net/2022/12/31/LhebI7dEgq9fz3N.png" alt="image.png" style="zoom:50%;" /></p>
<h1 id="Chapter-8"><a href="#Chapter-8" class="headerlink" title="Chapter 8"></a>Chapter 8</h1><h2 id="§8-1-假设检验概述"><a href="#§8-1-假设检验概述" class="headerlink" title="§8.1 假设检验概述"></a>§8.1 假设检验概述</h2><p><strong>建立假设</strong>：</p>
<p>对问题提出原假设(零假设)，记为$H_0$，其对立面称为对立假设(备择假设)，记为$H_1$或$H_\alpha$。</p>
<p>原假设一般有符号$=$，$\leq$或$\ge$。</p>
<p>假设检验就是要根据样本判断是否拒绝$H_0$。</p>
<ul>
<li>双侧假设检验：$H_0:\theta=\theta_0$，$H_1:\theta\ne\theta_0$</li>
<li>右侧检验：$H_0:\theta\leq \theta_0$，$H_1:\theta&gt;\theta_0$</li>
<li>左侧检验：$H_0:\theta\geq \theta_0$，$H_1:\theta&lt;\theta_0$</li>
</ul>
<p><strong>检验统计量</strong>：由样本对原假设进行检验总是通过一个统计量完成，称为检验统计量。</p>
<p><strong>拒绝域</strong>：使原假设被拒绝的样本所组成的区域称为拒绝域，即拒绝$H_0$的样本值的取值区域，其补集称为接受域。</p>
<p><strong>第一类错误</strong>：在原假设$H_0$为真的情况下拒绝$H_0$，一般设置为更严重的错误。</p>
<p><strong>第二类错误</strong>：在原假设$H_0$为假的情况下接受$H_0$。</p>
<p><strong>显著性检验</strong>：控制犯第一类错误的概率在一个较小的数$\alpha$以内，倾向于保护$H_0$</p>
<p>显著性检验倾向于“宁可错杀也不可放过$H_0$”，一般原假设也是依此选定：</p>
<ul>
<li><p>判断病人得两种病中的哪种，需要控制把重症误判成轻症的错误率，因此倾向于把轻症$H_1$判成重症$H_0$，而非把重症$H_0$当轻症$H_1$放过。</p>
</li>
<li><p>想检验某结论成立，应提出$H_0$：结论不成立，然后说明样本取值在拒绝域内，即概率反证法。</p>
<p>e.g. 是否有显著提高？$H_0$：没有显著提高，代入数据若能拒绝$H_0$说明确实有显著提高。</p>
</li>
</ul>
<p>“如果连$H_0$都保护不住的结论，其真实性势必应当受到怀疑。”</p>
<h2 id="§8-2-正态总体参数的假设检验"><a href="#§8-2-正态总体参数的假设检验" class="headerlink" title="§8.2 正态总体参数的假设检验"></a>§8.2 正态总体参数的假设检验</h2><p><strong>双边u检验法</strong>：</p>
<p>已知$\sigma_0^2$，关于$H_0:\mu=\mu_0$的检验问题</p>
<p>拒绝域：$|\bar X-\mu_0|$的值偏大，Ⅰ类风险$P_{H_0}\left\{\frac{|\bar X-\mu_0|}{\sigma_0/\sqrt n}&gt;u_{1-\frac{\alpha}{2}}\right\}=\alpha$</p>
<p><strong>单边u检验法</strong>：</p>
<ol>
<li><p>已知$\sigma_0^2$，关于$H_0:\mu\leq\mu_0$的检验问题</p>
<p>拒绝域：$\bar X-\mu_0$的值偏大，Ⅰ类风险$P_{H_0}\left\{\frac{\bar X-\mu_0}{\sigma_0/\sqrt n}&gt;u_{1-\alpha}\right\}=\alpha$</p>
</li>
<li><p>已知$\sigma_0^2$，关于$H_0:\mu\geq\mu_0$的检验问题</p>
<p>拒绝域：$\bar X-\mu_0$的值偏小，Ⅰ类风险$P_{H_0}\left\{\frac{\bar X-\mu_0}{\sigma_0/\sqrt n}&lt;u_{\alpha}\right\}=\alpha$</p>
</li>
</ol>
<p><strong>双边t检验法</strong>：</p>
<p>未知$\mu,\sigma^2$，关于$H_0:\mu=\mu_0$的检验问题</p>
<p>拒绝域：$|\bar X-\mu_0|$的值偏大，Ⅰ类风险$P_{H_0}\left\{\frac{|\bar X-\mu_0|}{S/\sqrt n}&gt;t_{1-\frac{\alpha}{2}}(n-1)\right\}=\alpha$</p>
<p><strong>单边t检验法</strong>：</p>
<ol>
<li><p>未知$\mu,\sigma^2$，关于$H_0:\mu\leq\mu_0$的检验问题</p>
<p>拒绝域：$\bar X-\mu_0$的值偏大，Ⅰ类风险$P_{H_0}\left\{\frac{\bar X-\mu_0}{S/\sqrt n}&gt;t_{1-\alpha}(n-1)\right\}=\alpha$</p>
</li>
<li><p>未知$\mu,\sigma^2$，关于$H_0:\mu\geq\mu_0$的检验问题</p>
<p>拒绝域：$\bar X-\mu_0$的值偏小，Ⅰ类风险$P_{H_0}\left\{\frac{\bar X-\mu_0}{S/\sqrt n}&lt;t_{\alpha}(n-1)\right\}=\alpha$</p>
</li>
</ol>
<p><strong>双边$\chi^2$检验法</strong>：</p>
<p>未知$\mu,\sigma^2$，关于$H_0:\sigma^2=\sigma_0^2$的检验问题</p>
<p>拒绝域：$S^2$不在$\sigma_0^2$附近波动或幅度太大，Ⅰ类风险$P_{H_0}\left\{\frac{(n-1)S^2}{\sigma_0^2}&lt;\chi^2_{\frac{\alpha}{2}}(n-1)\ or\ \frac{(n-1)S^2}{\sigma_0^2}&gt;\chi^2_{1-\frac{\alpha}{2}}(n-1)\right\}=\alpha$</p>
<p>已知$\mu$未知$\sigma^2$，关于$H_0:\sigma^2=\sigma_0^2$的检验问题</p>
<p>拒绝域：$P_{H_0}\left\{\frac{1}{\sigma_0^2}\sum\limits_{i=1}^{n}(X_i-\mu)^2&lt;\chi^2_{\frac{\alpha}{2}}(n)\ or\ \frac{1}{\sigma_0^2}\sum\limits_{i=1}^{n}(X_i-\mu)^2&gt;\chi^2_{1-\frac{\alpha}{2}}(n)\right\}=\alpha$</p>
<p><strong>单边$\chi^2$检验法</strong>：</p>
<ol>
<li><p>未知$\mu,\sigma^2$，关于$H_0:\sigma^2\leq\sigma_0^2$的检验问题</p>
<p>拒绝域：$P_{H_0}\left\{\frac{(n-1)S^2}{\sigma_0^2}&gt;\chi^2_{1-\alpha}(n-1)\right\}=\alpha$</p>
</li>
<li><p>未知$\mu,\sigma^2$，关于$H_0:\sigma^2\geq\sigma_0^2$的检验问题</p>
<p>拒绝域：$P_{H_0}\left\{\frac{(n-1)S^2}{\sigma_0^2}&lt;\chi^2_{\alpha}(n-1)\right\}=\alpha$</p>
</li>
<li><p>已知$\mu$未知$\sigma^2$，关于$H_0:\sigma^2\leq\sigma_0^2$的检验问题</p>
<p>拒绝域：$P_{H_0}\left\{\frac{1}{\sigma_0^2}\sum\limits_{i=1}^{n}(X_i-\mu)^2&gt;\chi^2_{1-\alpha}(n-1)\right\}=\alpha$</p>
</li>
<li><p>已知$\mu$未知$\sigma^2$，关于$H_0:\sigma^2\leq\sigma_0^2$的检验问题</p>
<p>拒绝域：$P_{H_0}\left\{\frac{1}{\sigma_0^2}\sum\limits_{i=1}^{n}(X_i-\mu)^2&lt;\chi^2_{\alpha}(n-1)\right\}=\alpha$</p>
</li>
</ol>
<p><strong>双总体均值差的检验</strong>：</p>
<p>已知$\sigma_1^2,\sigma_2^2$，$U=\frac{\bar X-\bar Y-\delta}{\sqrt{\frac{\sigma_1^2}{n}+\frac{\sigma_2^2}{m}}}\sim \mathbf N(0,1)$</p>
<ol>
<li><p>关于$H_0:\mu_1-\mu_2=\delta$的检验问题，拒绝域$|U|\ge u_{1-\frac \alpha 2}$</p>
</li>
<li><p>关于$H_0:\mu_1-\mu_2\ge\delta$的检验问题，拒绝域$U\leq u_\alpha$</p>
</li>
<li><p>关于$H_0:\mu_1-\mu_2\le\delta$的检验问题，拒绝域$U\geq u_{1-\alpha}$</p>
</li>
</ol>
<p>未知$\sigma_1^2,\sigma_2^2$但$\sigma_1^2=\sigma_2^2$，$T=\frac{\bar X-\bar Y-\delta}{\sqrt{\frac{1}{n}+\frac{1}{m}}S_\omega}\sim T(n+m-2)$，其中$S_\omega=\sqrt \frac{\left(n-1\right) S_{1}^{2}+\left(m-1\right) S_{2}^{2}}{\left(n+m-2\right)}$</p>
<ol>
<li><p>关于$H_0:\mu_1-\mu_2=\delta$的检验问题，拒绝域$|T|\ge t_{1-\frac \alpha 2}(n+m-2)$</p>
</li>
<li><p>关于$H_0:\mu_1-\mu_2\ge\delta$的检验问题，拒绝域$T\leq t_\alpha(n+m-2)$</p>
</li>
<li><p>关于$H_0:\mu_1-\mu_2\le\delta$的检验问题，拒绝域$T\geq t_{1-\alpha}(n+m-2)$</p>
</li>
</ol>
<p><strong>双总体方差比的检验</strong>：</p>
<p>未知$\mu_1,\mu_2$，$F=\frac{S_1^2}{S_2^2}\sim F(n-1,m-1)$</p>
<ol>
<li><p>关于$H_0:\sigma_1^2=\sigma_2^2$的检验问题，拒绝域$F\ge F_{1-\frac{\alpha}{2}}(n-1,m-1)$或$F\le F_{\frac \alpha 2}(n-1,m-1)$</p>
</li>
<li><p>关于$H_0:\sigma_1^2\ge \sigma_2^2$的检验问题，拒绝域$F\le F_\alpha(n-1,m-1)$</p>
</li>
<li>关于$H_0:\sigma_1^2\le \sigma_2^2$的检验问题，拒绝域$F\ge F_{1-\alpha}(n-1,m-1)$</li>
</ol>
]]></content>
      <categories>
        <category>Math</category>
      </categories>
      <tags>
        <tag>Probability &amp; Statistics</tag>
      </tags>
  </entry>
  <entry>
    <title>MA212 概率论与数理统计 半期复习</title>
    <url>/2023/01/10/MA212_Probability_Statistics_Midterm/</url>
    <content><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><blockquote>
<p>本文为南方科技大学MA212概率论与数理统计课程2022秋季学期前半学期的知识点整理，大部分内容摘选自MA212-03班的课件，编者仅进行了一定转述和搬运工作。由于复习材料的目的性强，本文对考点有一定的强调和浓缩，忽略了一些非考点，但也并不能视为与考纲完全相符，同时可能存在一定错误。阅读本文并不能让你两三天速通概统，本文的定位在于用一篇文章看完课件内容，因此建议读者在学完该部分内容后借本文复习概念，并结合题目练习。</p>
<p>祝你在这门课程取得优秀成绩！</p>
<p>咕桃</p>
<p>2023.1</p>
</blockquote>
<p>本文使用<strong>CC BY-NC-SA</strong>协议，即您可以对本文在注明作者的情况下进行非商业目的的重新编排、节选，或以本文为基础进行创作，依此创作的成果亦须使用该协议。</p>
<p>由于编者能力有限，恳请各位读者在阅读过程中勘误，如果您对其中内容有疑问或发现错误，抑或是希望联系编者，欢迎通过该QQ联系：<a href="tencent://AddContact/?fromId=45&amp;fromSubId=1&amp;subcmd=all&amp;uin=3425811925&amp;website=www.oicqzone.com">3425811925</a>，非常感谢！</p>
<p><img src="https://s2.loli.net/2023/01/10/P7CdEvfXxBheuwi.png" alt="image.png" style="zoom:25%;" /></p>
<h1 id="Chapter-1"><a href="#Chapter-1" class="headerlink" title="Chapter 1"></a>Chapter 1</h1><h2 id="§1-2-样本空间"><a href="#§1-2-样本空间" class="headerlink" title="§1.2 样本空间"></a><strong>§1.2 样本空间</strong></h2><h3 id="试验"><a href="#试验" class="headerlink" title="试验"></a>试验</h3><p><strong>随机试验(试验)</strong>：</p>
<ul>
<li>可以在相同的条件下重复进行</li>
<li>试验前知道所有可能结果</li>
<li>试验前无法确定会出现哪个结果</li>
</ul>
<p><strong>样本空间 $𝛀$</strong>：试验的全部样本点构成的集合</p>
<p><strong>样本点$\omega$</strong>：不可分的试验结果</p>
<h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><p><strong>随机事件(事件)</strong>：满足一定条件的样本点的集合</p>
<p><strong>基本事件</strong>：一个样本点构成的单点集</p>
<p><strong>必然事件</strong>：每次试验都总发生的事件</p>
<p><strong>不可能事件</strong>：每次试验都不会发生的事件</p>
<p><strong>事件域</strong>：$\mathcal A = \{ A | A ⊂𝛀 , A 是 事 件 \}$</p>
<p><strong>事件运算</strong>：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>$A⊂B$</th>
<th>$A∪B$ 和</th>
<th>$A∩B$ 积</th>
<th>$A-B$ 差</th>
</tr>
</thead>
<tbody>
<tr>
<td>$A$发生必导致$B$发生</td>
<td>$A、B$ 至少有一个发生</td>
<td>$A、B$同时发生</td>
<td>$A$发生$B$不发生</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>若$A⊃B$，则$A-B$为<strong>真差</strong></li>
<li>若$A∩B=\phi$，则$AB$<strong>互不相容(互斥)</strong></li>
<li>若$A∪B=𝛀$且$A∩B=\phi$，则$AB$互为<strong>逆事件/对立事件</strong>，记作$A=B^C=\bar B$</li>
</ul>
<p><strong>事件运算定律</strong>：</p>
<p>交换、结合、分配、德摩根</p>
<p><strong>可列</strong>：无穷集S可与自然数集建立双射，可表示为$S=\{s1,s2,…\}$，“最小的无穷”</p>
<p><strong>至多可列</strong>：可列/有限</p>
<h2 id="§1-3-概率测度"><a href="#§1-3-概率测度" class="headerlink" title="§1.3 概率测度"></a>§1.3 概率测度</h2><h3 id="频率"><a href="#频率" class="headerlink" title="频率"></a>频率</h3><p>设 $A$ 为一随机事件 ,在相同条件下进行 $n$ 次重复试验</p>
<p><strong>频数</strong>：$n_A=n$次试验中$A$发生的次数</p>
<p><strong>频率</strong>：$f_\mathbf N(A)=\frac{n_A}{n}$</p>
<p><strong>频率的基本性质</strong>：</p>
<ul>
<li><p>$0\leq f_\mathbf N(A) \leq 1$</p>
</li>
<li><p>$f_\mathbf N(𝛀)=1$</p>
</li>
<li><p>若$A_1,A_2,…A_m$两两不相容，则</p>
<script type="math/tex; mode=display">f_\mathbf N(\bigcup_\limits{i=1}^{m} A_i)=\sum_\limits{i=1}^{m} f_\mathbf N(A_i)</script></li>
</ul>
<h3 id="概率"><a href="#概率" class="headerlink" title="概率"></a>概率</h3><p><strong>概率</strong>：事件$A$发生的可能性大小$P(A)=\lim\limits_{n \to +\infty} f_\mathbf N(A)$</p>
<p><strong>概率空间</strong>：样本空间+事件域+概率，$\{𝛀，\mathcal{A} ，P\}$</p>
<p><strong>概率的公理化定义</strong>：</p>
<ul>
<li><p><strong>非负性</strong>：$0\leq P(A) \leq 1， (\forall A \in \mathcal{A})$</p>
</li>
<li><p><strong>规范性</strong>：$P(𝛀)=1$</p>
</li>
<li><p><strong>可列可加性</strong>：对于两两不相容的事件列$\{A_k\}^\infty_{k=1}$有</p>
<script type="math/tex; mode=display">P(\bigcup_\limits{i=1}^{\infty} A_i)=\sum_\limits{i=1}^{\infty} P(A_i)</script></li>
</ul>
<p><strong>概率的基本性质</strong>：</p>
<ul>
<li><p>$P(\emptyset)=0$</p>
</li>
<li><p><strong>有限可加性</strong>：对于两两不相容的事件列$\{A_k\}^n_{k=1}$有</p>
<script type="math/tex; mode=display">P(\bigcup_\limits{i=1}^{n} A_i)=\sum_\limits{i=1}^{n} P(A_i)</script></li>
<li><p>若$A \subset B$，则$P(B-A)=P(B)-P(A)$，$P(B)\ge P(A)$</p>
</li>
<li><p>$0\leq P(A) \leq 1$</p>
</li>
<li>$P(\bar A)=1-P(A)$</li>
<li><strong>多事件的加法定律</strong></li>
</ul>
<h2 id="§1-4-概率计算：计数方法"><a href="#§1-4-概率计算：计数方法" class="headerlink" title="§1.4 概率计算：计数方法"></a>§1.4 概率计算：计数方法</h2><p><strong>古典概型(等可能概型)</strong>：仅有<u>有限个等可能</u>出现的基本结果的随机试验</p>
<p><strong>有利场合</strong>：导致事件发生的方式个数</p>
<p><strong>排列与组合</strong>：$A^k_n=\frac{n!}{(n-k)!}$，$\binom{n}{k}=C^k_n=\frac{n!}{k!(n-k)!}$，$\binom{n}{n_1\ n_2\ …\ n_r}=\frac{n!}{n_1!n_2!…n_r!}$</p>
<p><strong>乘法原理&amp;加法原理</strong>：略</p>
<p><strong>几何概型</strong>：e.g. 向平面有界区域$𝛀$投掷一个点，点落在可测量的平面区域$A$的试验</p>
<h2 id="§1-5-条件概率"><a href="#§1-5-条件概率" class="headerlink" title="§1.5 条件概率"></a>§1.5 条件概率</h2><h3 id="条件概率基础"><a href="#条件概率基础" class="headerlink" title="条件概率基础"></a>条件概率基础</h3><p><strong>Monty Hall Problem(三门问题)</strong>：</p>
<p><strong>条件概率</strong>：$A、B$是两个事件，且$P(B)&gt;0$，记<script type="math/tex">P(A|B)=\frac{P(AB)}{P(B)}</script>为在事件$B$发生的条件下事件$A$发生的条件概率</p>
<ul>
<li>$P(B)=0$时条件概率无意义</li>
<li>$B$发生带来的“信息”对$A$的“推断”的新认识</li>
<li>$A|B$不是一个事件</li>
<li>$P(A|B)\ge P(AB)$</li>
</ul>
<p><strong>条件概率的基本性质</strong>：</p>
<ul>
<li><p><strong>非负性</strong>：$P(A|B)\ge0$</p>
</li>
<li><p><strong>规范性</strong>：$P(𝛀|B)=1$</p>
</li>
<li><p><strong>可列可加性</strong>：对于两两不相容的事件列$\{A_k\}$有</p>
<script type="math/tex; mode=display">P(\bigcup_{i=1}^{\infty} A_i|B)=\sum_{i=1}^{\infty} P(A_i|B)</script></li>
</ul>
<p>样本空间$\widetilde𝛀=B\cap𝛀$，事件域$\widetilde{\mathcal{A}}=\{B\cap A|A\in\mathcal{A}\}$，概率$P_B(A)=P(A|B)$</p>
<h3 id="条件概率相关公式"><a href="#条件概率相关公式" class="headerlink" title="条件概率相关公式"></a>条件概率相关公式</h3><p><strong>乘法定律(公式)</strong>：$P(AB)=P(A|B)\cdot P(B)$</p>
<p><strong>分划</strong>：事件列$\{B_k\}$两两不相容，且$\bigcup_{i=1}^{n}B_i=𝛀$</p>
<p><strong>全概率公式</strong>：${B_k}$是$𝛀$的一个分划，对任意事件$A$有</p>
<script type="math/tex; mode=display">P(A)=\sum^{n}_{i=1}P(A|B_i)P(B_i)</script><p><strong>贝叶斯公式</strong>：通过原因概率和先验概率计算后验概率</p>
<script type="math/tex; mode=display">P(B_i|A)=\frac{P(A|B_i)P(B_i)}{\sum_{j=1}^{n}P(A|B_j)P(B_j)}</script><h2 id="§1-6-独立性"><a href="#§1-6-独立性" class="headerlink" title="§1.6 独立性"></a>§1.6 独立性</h2><p><strong>相互独立(独立)</strong>：两两独立，三三独立…</p>
<script type="math/tex; mode=display">P(A_{i_1}A_{i_2}...A_{i_k})=P(A_{i_1})P(A_{i_2})...P(A_{i_k})</script><script type="math/tex; mode=display">(1\le i_1<...<i_k\le n，k=2...n)</script><ul>
<li><p>$AB$<strong>独立</strong>与$AB$<strong>不相容</strong>不能同时成立</p>
<p>$P(AB)=P(A)P(B)≠0$</p>
</li>
<li><p>$AB$独立，则$A \bar B$独立，$\bar AB$独立，$\bar A\bar B$独立</p>
<p>$P(AB)=P(A)(1-P(\bar B))=P(A)-P(A)P(\bar B)$</p>
<p>$P(A)P(\bar B)=P(A)-P(AB)=P(A-AB)=P(A\bar B)$</p>
</li>
<li><p>两两独立是相互独立的必要不充分条件</p>
</li>
</ul>
<h1 id="Chapter-2"><a href="#Chapter-2" class="headerlink" title="Chapter 2"></a>Chapter 2</h1><h2 id="§2-1-离散随机变量"><a href="#§2-1-离散随机变量" class="headerlink" title="§2.1 离散随机变量"></a>§2.1 离散随机变量</h2><h3 id="离散型随机变量基础"><a href="#离散型随机变量基础" class="headerlink" title="离散型随机变量基础"></a>离散型随机变量基础</h3><p><strong>随机变量</strong>：令$𝛀$为一个样本空间，令$X$是定义在$𝛀$上的一个实函数 ，则称$X$为一个(一维)随机变量。随机事件可以用随机变量的取值来表示。</p>
<p><strong>离散型随机变量</strong>：随机变量$X$仅取至多可列个值</p>
<p><strong>概率质量函数/频率函数(PMF)</strong>：所有可能的取值→取各个值的概率</p>
<script type="math/tex; mode=display">P\{X=x_k\}=p(x_k)\ (k=1,2,...)</script><p><strong>频率函数的本质特征(充分必要)</strong>：</p>
<ul>
<li>$p(x_k\ge0)，k=1,2…$</li>
<li>$\sum_{k=1}^{\infty}p(x_k)=1$</li>
</ul>
<p><strong>累积分布函数/分布函数(CDF)</strong>：$F(x)=P\{X\leq x\}, -\infty&lt;x&lt;\infty$</p>
<p><strong>分布函数的本质特征(充分必要)</strong>：</p>
<ul>
<li>$F(x)$是单调不减函数</li>
<li><p>$0\leq F(X)\leq 1$且$F(-\infty)=0,F(\infty)=1$</p>
</li>
<li><p>$F(x)$右连续，即$\lim_{t→x^+}F(t)=F(x)$</p>
</li>
</ul>
<p><strong>分布函数的其他性质</strong>：</p>
<ul>
<li><p>$P\{a&lt;X\leq b\}=F(b)-F(a),\ a&lt;b$</p>
</li>
<li><p>$P\{X=c\}=\lim_{\Delta t→0^+}[F(c)-F(c-\Delta t)]=F(c)-F(c-0)$</p>
</li>
</ul>
<h3 id="离散随机变量的分布"><a href="#离散随机变量的分布" class="headerlink" title="离散随机变量的分布"></a>离散随机变量的分布</h3><p><strong>单点分布(退化分布)</strong>：事件几乎处处发生，$P(X=c)=1$，记为$X\overset{a.e}{=}c$或$X=c\ (a.e)$</p>
<p><strong>(0-1)两点分布(伯努利随机变量)</strong>：$P\{X=1\}=p，P\{X=0\}=1-p$</p>
<p><strong>伯努利试验</strong>：只产生两个结果$A,\bar A$的试验</p>
<p><strong>二项分布</strong>：$P\{X=k\}=C^k_np^k(1-p)^{n-k}\ (k=0,1,2,…n)$，记为$X\sim b(n,p)$</p>
<ul>
<li>$b(k;n,p):=C^k_np^k(1-p)^{n-k}$</li>
<li>当$k&lt;(n+1)p$时，$b(k;n,p)$随$k$增加而增加</li>
<li>当最可能出现次数$k=(n+1)p$为正整数时，中心项$b(k;n, p)= b(k-1;n, p)$</li>
</ul>
<p><strong>几何分布</strong>：前面的$k-1$次伯努利试验失败，第$k$次试验成功，故</p>
<script type="math/tex; mode=display">p(k)=P\{X=k\}=(1-p)^{k-1}p,\ k=1,2,3,...</script><p><strong>负二项分布</strong>：连续独立地试验直到成功$r$次为止，停止时做了$k$次试验</p>
<script type="math/tex; mode=display">p(k)=P\{X=k\}=C_{k-1}^{r-1} p^{r}(1-p)^{k-r}</script><p><strong>超几何分布</strong>：$n$个球，$r$黑，$n-r$白，盒中不放回地抽取$m$球，$X$代表抽到的黑球个数</p>
<script type="math/tex; mode=display">P\{X=k\}=\frac{C^k_rC^{m-k}_{n-r}}{C_n^m},\ k=1,...m</script><p><strong>泊松分布</strong>：参数$\lambda&gt;0$，r.v. $X$的取值为0,1,2…，取值概率为</p>
<script type="math/tex; mode=display">P\{X=k\}=\frac{\lambda^k}{k!}e^{-\lambda},\ k=0,1,2,...</script><p>记为$X\sim \pi(\lambda)$或$X\sim P.(\lambda)$</p>
<p><strong>泊松分布的性质</strong>：</p>
<ul>
<li>$P\{X=k\}&gt;0,\ k=0,1,2,…$</li>
<li>$\sum_{k=0}^{\infty}P\{X=k\}=\sum_{k=0}^{\infty}\frac{\lambda^k}{k!}e^{-\lambda}=e^{\lambda}\cdot e^{-\lambda}=1$</li>
</ul>
<p><strong>泊松流与泊松分布</strong>：记时间间隔$(0,t]$中出现的质点数为$X$，则$X\sim P(\lambda t)$，其中泊松强度$\lambda&gt;0$</p>
<p><strong>泊松定理</strong>：设$\lambda&gt;0$为一常数，$n$为正整数，$\lim_{n\to\infty}np_n=\lambda$，则对任一非负整数$k$有</p>
<script type="math/tex; mode=display">\lim _{n \rightarrow \infty} C_{n}^{k} p_{n}^{k}\left(1-p_{n}\right)^{n-k}=\frac{\lambda^{k} e^{-\lambda}}{k !}</script><p>当$n$很大$p$很小时，$C_{n}^{k} p^{k}(1-p)^{n-k} \approx \frac{\lambda^{k} e^{-\lambda}}{k !}$</p>
<h2 id="§2-2-连续随机变量"><a href="#§2-2-连续随机变量" class="headerlink" title="§2.2 连续随机变量"></a>§2.2 连续随机变量</h2><h3 id="连续型随机变量基础"><a href="#连续型随机变量基础" class="headerlink" title="连续型随机变量基础"></a>连续型随机变量基础</h3><p><strong>连续型随机变量</strong>：若r.v. $X$的分布函数能够表示为</p>
<script type="math/tex; mode=display">F(x)=\int_{-\infty}^xf(t)dt,\ -\infty<x<\infty</script><p>其中$f(t)\ge0$且可积，则称$X$为连续性r.v. </p>
<p><strong>概率密度函数(PDF)</strong>：$f(t)$，反映了概率集 中在该点附近的程度，不代表概率</p>
<p><strong>密度函数的本质特征</strong>：</p>
<ul>
<li>$f(t)\ge0$</li>
<li>$\int_{-\infty}^{\infty}f(t)dt=1$</li>
</ul>
<p><strong>密度函数的性质</strong>：</p>
<ul>
<li><p>$\forall x_1&lt;x_2$有</p>
<p>$P\left\{x_{1}&lt;X \leq x_{2}\right\}=F\left(x_{2}\right)-F\left(x_{1}\right)=\int_{x_{1}}^{x_{2}} f(x) d x$</p>
</li>
<li><p>在$f(x)$的连续点处有$f(x)=F’(x)$</p>
</li>
<li><p>补充几个不可导处点值不影响积分值</p>
</li>
<li>$\forall c$，$P\{X=c\}=0$</li>
</ul>
<p><strong>$p$分位数</strong>：对于$X\sim f(x)$，若$\forall 0&lt;p&lt;1$，存在常数$x_p$满足$F(x_p)=p$，则$x_p$为密度函数$f(x)$的$p$分位数</p>
<p><strong>概率函数</strong>：</p>
<script type="math/tex; mode=display">f(x)\left\{\begin{array}{c}
\text { 对离散型 } r.v\  X \text { 表示频率函数,即 } \\
f(x)=P\{X=x\}, x=x_{1}, x_{2}, \cdots \\
\text { 对连续型 } r.v\  X \text { 表示密度函数,即有 } \\
f(x) \geq 0, \int_{-\infty}^{\infty} f(x) d x=1
\end{array}\right.</script><h3 id="连续随机变量的分布"><a href="#连续随机变量的分布" class="headerlink" title="连续随机变量的分布"></a>连续随机变量的分布</h3><h4 id="正态分布"><a href="#正态分布" class="headerlink" title="正态分布"></a>正态分布</h4><p><strong>正态分布</strong> $f(x)=\frac{1}{\sigma \sqrt{2 \pi}} e^{-\frac{(x-\mu)^{2}}{2 \sigma^{2}}} $ ，其中$-\infty&lt;\mu&lt;\infty$，$\sigma&gt;0$，记为$X\sim \mathbf N(\mu,\sigma^2)$</p>
<p><strong>正态分布函数的性质</strong>：</p>
<ul>
<li><p>$f(\mu+x)=f(\mu-x)$，即$f(x)$关于$x=\mu$对称</p>
</li>
<li><p>$x&lt;\mu$，$f’(x)&gt;0$，$f(x)↑$</p>
<p>$x&gt;\mu$，$f’(x)&lt;0$，$f(x)↓$</p>
<p>极大值$f(\mu)=\frac{1}{\sqrt{2\pi}\sigma}$</p>
</li>
<li><p>$\mu$不改变形状，改变对称轴位置；$\sigma$不改变对称轴，改变图像形状</p>
</li>
</ul>
<p><strong>标准正态分布</strong>：$X\sim \mathbf N(0,1)$</p>
<script type="math/tex; mode=display">\varphi(x)=\frac{1}{\sqrt{2 \pi}} e^{-\frac{x^{2}}{2}}$$，$$\quad \Phi(x)=\int_{-\infty}^{x} \frac{1}{\sqrt{2 \pi}} e^{-\frac{t^{2}}{2}} d t</script><p>若$X\sim \mathbf N(\mu,\sigma^2)$，则$ Z=\frac{X-\mu}{\sigma} \sim \mathbf N(0, 1)$</p>
<h4 id="均匀分布"><a href="#均匀分布" class="headerlink" title="均匀分布"></a>均匀分布</h4><p><strong>均匀分布</strong>：若r.v. $X$的密度函数为</p>
<script type="math/tex; mode=display">f(x)=\left\{\begin{array}{cc}
\frac{1}{b-a}, & a<x<b \\
0, & \text {Others}
\end{array}\right.</script><p>则称$X$服从区间$(a,b)$上的均匀分布，记为$X\sim\mathbf U(a,b)$</p>
<ul>
<li>$\forall (c,c+L) ⊂ (a,b)$，$P\{c&lt;X \leq c+L\}=\int_{c}^{c+L} \frac{d x}{b-a}=\frac{L}{b-a}$</li>
</ul>
<h4 id="指数分布"><a href="#指数分布" class="headerlink" title="指数分布"></a>指数分布</h4><p><strong>指数分布</strong>：若r.v. $X$的密度函数为</p>
<script type="math/tex; mode=display">f(x)=\left\{\begin{array}{cc}
\lambda e^{-\lambda x}, & x>0 \\
0, & x \leq 0
\end{array}\right.</script><p>则称$X$服从参数为$\lambda&gt;0$的指数分布，记为$X\sim \mathbf{EXP}(\lambda)$</p>
<ul>
<li><p>$X$的分布函数为$F(x)=\left\{\begin{array}{cc}<br>1-e^{-\lambda x}, &amp; x&gt;0 \\<br>0, &amp; x \leq 0<br>\end{array}\right.$</p>
</li>
<li><p>泊松流中第一个质点出现的时间服从指数分布：$P\{Y&gt;t\}=P\{X=0\}=e^{-\lambda t}$</p>
</li>
<li><p>$\lambda$称为失效率，$\lambda^{-1}$表示平均寿命</p>
</li>
<li>无记忆性：$P\{ X&gt;s+t| X&gt;s\}=P\{ X&gt;t\}$</li>
</ul>
<h4 id="伽马分布、贝塔分布-了解"><a href="#伽马分布、贝塔分布-了解" class="headerlink" title="伽马分布、贝塔分布(了解)"></a>伽马分布、贝塔分布(了解)</h4><p><strong>伽马分布</strong>：一般地，设$X$为连续型r.v，概率密度为</p>
<script type="math/tex; mode=display">f(x)=\left\{\begin{array}{cc}
\frac{\lambda^{r}}{\Gamma(r)} x^{r-1} e^{-\lambda x}, & x>0 \\
0, & x \leq 0
\end{array}\right.</script><p>其中$r &gt; 0, \lambda &gt; 0$为常数，则称$X$服从参数为$(r,\lambda)$的$\Gamma$分布，记为$X\sim\Gamma(r,\lambda)$，此处$\Gamma(r)=\int_{0}^{\infty} x^{r-1} e^{-x} d x \quad(r&gt;0)$</p>
<p>当$r$为自然数时，$\Gamma(r)=(r-1)!$</p>
<p><strong>伽马分布的应用</strong>：假如在$(0,t]$内元件受到的冲击次数$N_t$是一个Poisson流。 当$r$是任意自然数时，元件寿命就是第$r$次冲击来到的时间， 记为$X$，则$X\sim\Gamma(r,\lambda)$，它的可靠度函数</p>
<script type="math/tex; mode=display">R(t)=P\{X>t\}=\sum_{i=0}^{r-1} P\left\{N_{t}=i\right\}=e^{-\lambda t} \sum_{i=0}^{r-1} \frac{(\lambda t)^{i}}{i !}</script><p><strong>贝塔分布</strong>：</p>
<p>贝塔密度用来刻画$[0,1]$区间上的随机变量：</p>
<p>$f(u)=\frac{\Gamma(a+b)}{\Gamma(a) \Gamma(b)} u^{a-1}(1-u)^{b-1}, \quad 0 \leq u \leq 1$</p>
<p>特别地，$a=b=1$时为均匀分布</p>
<h2 id="§2-3-随机变量的函数"><a href="#§2-3-随机变量的函数" class="headerlink" title="§2.3 随机变量的函数"></a>§2.3 随机变量的函数</h2><p><strong>随机变量的函数</strong>：对于r.v. $X$，$g(\cdot):𝑹\to 𝑹$是一个函数，将$X$代入函数$g(\cdot)$，得到新的随机变量$𝒀=g(X):\ 𝛀 → 𝑹$，即$𝒀(\omega)=g(X(\omega)),\forall \omega\in 𝛀 $</p>
<p>随机变量$𝒀$称为随机变量$X$的函数</p>
<h3 id="离散型-r-v-函数的频率函数"><a href="#离散型-r-v-函数的频率函数" class="headerlink" title="离散型 r.v. 函数的频率函数"></a>离散型 r.v. 函数的频率函数</h3><ol>
<li>列出$ Y$的可能取值</li>
<li>找出$\{ Y=y\}$的等价事件$\{ X\in D\}$</li>
<li>$P\{ Y=y\}=P\{ X\in D\}$</li>
</ol>
<p><strong>离散→离散</strong>：</p>
<p>$y=g(x_1)=g(x_2)=…=g(x_k)$，$P\{𝒀=y\}=\sum_{i=1}^{k}P\{X=x_i\}$</p>
<p><strong>连续→离散</strong>：</p>
<p>$ Y=c,a&lt; X\leq b$，$P\{ Y=c\}=P\{a&lt; X\leq b\}=F_{ X}(b)-F_{ X}(a)$</p>
<h3 id="连续型-r-v-的频率函数"><a href="#连续型-r-v-的频率函数" class="headerlink" title="连续型 r.v. 的频率函数"></a>连续型 r.v. 的频率函数</h3><ol>
<li>求$ Y$的分布函数$F_{ Y}(y)=P\{ Y\leq y\}=P\{g( X)\leq y\}$</li>
<li>转化为关于r.v. $ X$的概率计算问题(用到$y=g(x)$的性质)</li>
<li>求导得$f_{ Y}(y)=\frac{d}{dy}F_{ Y}(y)$</li>
</ol>
<p><strong>定理</strong>：设r.v. $ X$的密度函数为$f(x)$，又$y=g(x)$是严格单调函数，其反函数$h(y)=g^{-1}(y)$连续可导，则$ Y=g( X)$的密度函数为：</p>
<script type="math/tex; mode=display">{f}_({y})=\left\{\begin{array}{cl}
\left|{h}^{\prime}({y})\right| \cdot {f}({h}({y})), & {h}({y}) \text { 有意义 } \\
0, & \text { 其他 }
\end{array}\right.</script><p><strong>结论</strong>：正态r.v.的线性函数仍是正态r.v.</p>
<p><strong>推广的定理</strong>：设r.v$X$的密度函数为$f(𝒙)$,又函数$g(x)$在若干互不相交的区间 $(a_i,b_i)$上逐段严格单调, 且其反函数$h_i(y)$均连续可导,则$Y=g(X)$的密度函数为</p>
<script type="math/tex; mode=display">f_{Y}(y)=\left\{\begin{array}{cc}
\sum_{i=1}\left|h_{i}^{\prime}(y)\right| \cdot f\left(h_{i}(y)\right), & h_{1}(y), h_{2}(y), \cdots \text { 有意义 } \\
0, & \text { 其他 }
\end{array}\right.</script><p><strong>均匀分布与其他连续分布的关系</strong>：</p>
<p>设r.v. $X$的密度为$f(x)$, 分布函数为$F(x)$。其中$F(x)$在某区间$I$上严格递增,$I$的左端点处 $F=0$, 右端点处$F=1$。$I$ 可以是有界区间, 也可以是无界区间. 因此, $F^{-1}(x)$在$I$上都有定义.</p>
<ol>
<li><p>令$Z=F(X)$，则$Z\sim \mathbf U(0,1)$。</p>
</li>
<li><p>令$U\sim\mathbf U(0,1)$，$X=F(U)$，那么$X$的分布函数是$F^{-1}(x)$。</p>
</li>
</ol>
<p>应用：要生成分布函数为$F(x)$的r.v., 只需将$F^{-1}$作用在均匀分布的随机数上即可.</p>
<h1 id="Chapter-3"><a href="#Chapter-3" class="headerlink" title="Chapter 3"></a>Chapter 3</h1><h2 id="§3-1-联合累积分布函数"><a href="#§3-1-联合累积分布函数" class="headerlink" title="§3.1 联合累积分布函数"></a>§3.1 联合累积分布函数</h2><p><strong>二维随机变量(向量)</strong>：设$𝛀$为样本空间,$X=X(\omega),Y=Y(\omega)\ (\omega\in𝛀)$ 是 定义在$𝛀$上的两个随机变量，记</p>
<script type="math/tex; mode=display">(X, Y) ≜ (X(\omega), Y(\omega)) (\omega ∈ 𝜴)</script><p>称$(X,Y)$为二维随机变量（向量）。</p>
<p><strong>联合累积分布函数</strong>：设$(X,Y)$是二维r.v.，$\forall x,y\in(-\infty,\infty)$，定义</p>
<script type="math/tex; mode=display">F(x,y)≜P(\{X\leq x\}\cap\{Y\leq y\})=P\{X\leq x,Y\leq y\}</script><p>则称$F(x,y)$为二维r.v. $(X,Y)$的联合累积分布函数。</p>
<p><strong>联合累积分布函数的本质特征</strong>：</p>
<ol>
<li><p>$\forall x_0$，$F(x_0,y)$是$y$的单调不减函数</p>
<p>$\forall y_0$，$F(x,y_0)$是$x$的单调不减函数</p>
</li>
<li><p>$0\leq F(x,y)\leq 1$，且</p>
<p>$F(\infty,\infty)=1$，$F(-\infty,-\infty)=0$</p>
<p>$\forall x,y$，$F(-\infty,y)=F(x,-\infty)=0$</p>
</li>
<li><p>$F(x,y)$关于$x$和$y$分别右连续</p>
</li>
<li><p>$\forall x_1&lt;x_2,y_1&lt;y_2$有</p>
<script type="math/tex; mode=display">F(x_2,y_2)-F(x_1,y_2)-F(x_2,y_1)+F(x_1,y_1)\ge 0</script><script type="math/tex; mode=display">=P\{x_1<X\leq x_2,y_1<Y\leq y_2\}</script></li>
</ol>
<p><strong>n维随机变量及其联合分布函数</strong>：Trivial.</p>
<h2 id="§3-2-二维离散随机变量"><a href="#§3-2-二维离散随机变量" class="headerlink" title="§3.2 二维离散随机变量"></a>§3.2 二维离散随机变量</h2><p><strong>联合频率函数</strong>：$P\{X=x_i,Y=y_j\}=p(x_i,y_j)≜p_{ij}$</p>
<p><strong>边际分布函数</strong>：$F_X(x)=P\{X\leq x\}=P\{X\leq x,Y\leq \infty\}=F(x,\infty)$</p>
<p>随机变量的边际分布完全由其联合分布确定</p>
<p><strong>边际频率函数</strong>：</p>
<p>$P\{X=x_i\}=\sum_{j=1}^{\infty}p_{ij}≜p_{i\cdot}$</p>
<p>$P\{Y=y_j\}=\sum_{i=1}^{\infty}p_{ij}≜p_{\cdot j}$</p>
<p><strong>n维离散随机变量的频率函数</strong>：trivial.</p>
<p><strong>多项分布</strong>：假设进行$n$次独立试验, 每次试验有$r$种可能的结果, 各自出现的概率分别为$p_1,p_2,…p_r$。</p>
<p>令$N_i$是第$n$次试验出现第$i$种试验结果的所有次数，其中$i=1…r$。$N_1,N_2,…N_r$的联合频率函数是</p>
<p>$p\left(n_{1}, \ldots, n_{r}\right)=\left(\begin{array}{c}<br>n \\<br>n_{1}, \cdots, n_{r}<br>\end{array}\right) p_{1}^{n_{1}} p_{2}^{n_{2}} \cdots p_{r}^{n_{r}}$</p>
<p>$N_i\sim b(n,p_i)$，<script type="math/tex">p_{N_{i}}\left(n_{i}\right)=\left(\begin{array}{c}
n \\
n_{i}
\end{array}\right) p_{i}^{n_{i}}\left(1-p_{i}\right)^{n-n_{i}}</script></p>
<h2 id="§3-3-二维连续随机变量"><a href="#§3-3-二维连续随机变量" class="headerlink" title="§3.3 二维连续随机变量"></a>§3.3 二维连续随机变量</h2><h3 id="二维连续型r-v"><a href="#二维连续型r-v" class="headerlink" title="二维连续型r.v."></a>二维连续型r.v.</h3><p><strong>二维连续型随机变量</strong>：设r.v. $(X,Y)$的联合分布函数为$F(x,y)=P\{X\leq x,Y\leq y\}$，若存在非负可积函数$f(x,y)\ge 0$使得</p>
<script type="math/tex; mode=display">F(x,y)=\int_{-\infty}^{x}\int_{-\infty}^{y}f(u,v)dvdu,\ (\forall (x,y)\in R^2)</script><p>则称$(X,Y)$为二维连续型随机变量</p>
<p><strong>联合概率密度</strong>：上述$f(x,y)$称为$X,Y$的联合概率密度</p>
<p><strong>密度函数的本质特征</strong>：</p>
<ol>
<li><p>$f(x,y)\ge0\ (\forall (x,y)\in R^2)$</p>
</li>
<li><p>$\int_{-\infty}^{\infty}\int_{-\infty}^{\infty}f(u,v)dudv=1$</p>
</li>
</ol>
<p><strong>密度函数的基本性质</strong>：</p>
<ol>
<li><p>$\forall D⊂R^2$，其中$D$为由逐段光滑曲线围成的平面区域</p>
<script type="math/tex; mode=display">P\{(X,Y)\in D\}=\iint\limits_Df(x,y)dxdy</script></li>
<li><p>在$f(x,y)$的连续点处，有</p>
<p>$\frac{\partial^2F(x,y)}{\partial x\partial y}=f(x,y)$</p>
</li>
</ol>
<p><strong>约定</strong>：</p>
<p>$\left(X_{1}, X_{2}, \cdots, X_{n}\right) \sim F\left(x_{1}, x_{2}, \cdots, x_{n}\right)$，$n$维随机变量的分布函数是$F$</p>
<p>$\left(X_{1}, X_{2}, \cdots, X_{n}\right) \sim f\left(x_{1}, x_{2}, \cdots, x_{n}\right)$，$n$维随机变量的频率函数是$f$</p>
<p><strong>边际分布函数</strong>：</p>
<script type="math/tex; mode=display">F_X(x)=P\{X\leq x\}=P\{X\leq x, Y\leq \infty\}=\int_{-\infty}^{x}\int_{-\infty}^{\infty}f(u,y)dydu</script><p><strong>边际密度函数</strong>：</p>
<script type="math/tex; mode=display">f_X(x)=\int_{-\infty}^{\infty}f(x,y)dy</script><p><strong>$n$维边际密度函数</strong>：</p>
<script type="math/tex; mode=display">f_{X}(x)=\int_{-\infty}^{\infty} \int_{-\infty}^{\infty} f(x, y, z) d y d z</script><h3 id="二维联合分布"><a href="#二维联合分布" class="headerlink" title="二维联合分布"></a>二维联合分布</h3><p><strong>二维均匀分布</strong>：设$G$是平面上的有界区域,面积为$A$,若二维随机变量$(X,Y)$具有概率密度</p>
<script type="math/tex; mode=display">f(x, y)=\left\{\begin{array}{lr}
\frac{1}{A}, & (x, y) \in G \\
0, & \text { 其他 }
\end{array}\right.</script><p>则称$(X,Y)$在$G$上服从均匀分布。若$G_1$是$G$内的面积为$A_1$的子区域，则有</p>
<script type="math/tex; mode=display">P\{(X,Y)\in G_1\}=\iint\limits_{G_1}\frac{1}{A}dxdy=\frac{A_1}{A}</script><p><strong>二维正态分布</strong>：设$X,Y$的联合密度为：</p>
<script type="math/tex; mode=display">f(x, y)=\frac{1}{2 \pi \sigma_{1} \sigma_{2} \sqrt{1-\rho^{2}}} e^{-\frac{1}{2\left(1-\rho^{2}\right)}\left[\frac{\left(x-\mu_{1}\right)^{2}}{\sigma_{1}^{2}}-\frac{2 \rho\left(x-\mu_{1}\right)\left(y-\mu_{2}\right)}{\sigma_{1} \sigma_{2}}+\frac{\left(y-\mu_{2}\right)^{2}}{\sigma_{2}^{2}}\right]}</script><p>则称$(X,Y)$服从参数为$(\mu_1,\mu_2,\sigma_1^2,\sigma_2^2,\rho)$的二维正态分布，记为</p>
<script type="math/tex; mode=display">(X,Y)\sim \mathbf N(\mu_1,\mu_2,\sigma_1^2,\sigma_2^2,\rho)</script><p>其中各参数满足$-\infty&lt;\mu&lt;\infty,\sigma&gt;0,|\rho|&lt;1$，峰值$f(\mu_1,\mu_2)=\frac{1}{2 \pi \sigma_{1} \sigma_{2} \sqrt{1-\rho^{2}}}$</p>
<p><strong>二维正态分布的性质</strong>：二维正态r.v.的边际分布均为一维正态分布，若$(X,Y)\sim \mathbf N(\mu_1,\mu_2,\sigma_1^2,\sigma_2^2,\rho)$，则$X\sim\mathbf N(\mu_1,\sigma_1^2),Y\sim\mathbf N(\mu_2,\sigma_2^2)$</p>
<p>边际密度均为正态分布的随机变量，其联合分布不一定是二维正态分布。</p>
<p>由随机变量的边际分布不能确定联合分布，反之可以。</p>
<p><strong>连接函数(了解)</strong>：略</p>
<h2 id="§3-4-独立随机变量"><a href="#§3-4-独立随机变量" class="headerlink" title="§3.4 独立随机变量"></a>§3.4 独立随机变量</h2><p><strong>相互独立</strong>：设$(X,Y)\sim F(x,y),\ X\sim F_X(x),\ Y\sim F_Y(y)$，若$\forall x,y\in(-\infty,\infty)$有</p>
<script type="math/tex; mode=display">P\{X\leq x,Y\leq y\}=P\{X\leq x\}\cdot P\{Y\leq y\}</script><p>即$F(x,y)=F_X(x)\cdot F_Y(y)$，则称随机变量$X,Y$相互独立</p>
<p>若$(X,Y)$相互独立，对于“合理”的集合$A,B⊂R$，$\{X\in A\},\{Y\in B\}$相互独立</p>
<p><strong>离散r.v.相互独立</strong>：两个离散r.v.相互独立的充要条件是$p_{ij}=p_{i\cdot}\cdot p_{\cdot j}$</p>
<p><strong>连续r.v.相互独立</strong>：$f(x,y)\overset{a.e.}=f_X(x)f_Y(y)$</p>
<p>若$(X,Y)$的密度函数能分解为$f(x,y)=g(x)h(y)$，$g(x)\ge0$且$h(y)\ge0$且支撑区域可分离，则$X,Y$相互独立</p>
<p><strong>二维正态分布的性质</strong>：设$(X,Y)\sim \mathbf N(\mu_1,\mu_2,\sigma_1^2,\sigma_2^2,\rho)$，则$X,Y$相互独立⇔$\rho=0$</p>
<p><strong>$n$维随机变量的独立性</strong>：</p>
<ol>
<li><p>$\forall x_1,x_2,…x_n\in R$，若有</p>
<script type="math/tex; mode=display">F(x_1,x_2,...x_n)=F_{X_1}(x_1)F_{X_2}(x_2)\cdots F_{X_n}(x_n)</script><p>则称$X_1,X_2,…,X_n$相互独立</p>
</li>
<li><p>设</p>
<script type="math/tex; mode=display">\begin{array}{c}
\left(X_{1}, X_{2}, \cdots, X_{m}\right) \sim F_{1}\left(x_{1}, x_{2}, \cdots, x_{m}\right) \\
\left(Y_{1}, Y_{2}, \cdots, Y_{n}\right) \sim F_{2}\left(y_{1}, y_{2}, \cdots, y_{n}\right) \\
\left(X_{1}, X_{2}, \cdots, X_{m}, Y_{1}, Y_{2}, \cdots, Y_{n}\right) \sim F\left(x_{1}, x_{2}, \cdots, x_{m}, y_{1}, y_{2}, \cdots, y_{n}\right)
\end{array}</script><p>$\forall x_1,x_2,…,x_m,y_1,y_2,…,y_n\in R$，若有</p>
<script type="math/tex; mode=display">F(x_1,...,x_m,y_1,...,y_n)=F_1(x_1,...,x_m)\cdot F_2(y_1,...,y_n)</script><p>则称$(X_1,…,X_m)$，$(Y_1,…,Y_n)$相互独立</p>
</li>
<li><p>设$(X_1,…,X_m)$，$(Y_1,…,Y_n)$相互独立，则</p>
<ul>
<li>$X_i,Y_j$相互独立</li>
<li>设$h,g$分别是$m$元和$n$元的连续函数，则$h(X_1,…,X_m),g(Y_1,…,Y_n)$相互独立。</li>
</ul>
</li>
</ol>
<h2 id="§3-5-条件分布"><a href="#§3-5-条件分布" class="headerlink" title="§3.5 条件分布"></a>§3.5 条件分布</h2><p><strong>二维离散型r.v.的条件频率函数</strong>：设$(X,Y)$的频率函数为$P\{X=x_i,Y=y_j\}=p_{ij}$</p>
<p>考虑在$\{Y=y_j\}$已发生的条件下，${X=x_i}$发生的条件概率$P\{X=x_i|Y=y_j\}$为</p>
<script type="math/tex; mode=display">P\{X=x_i|Y=y_j\}=\frac{P\{X=x_i,Y=y_j\}}{P\{Y=y_j\}}=\frac{p_{ij}}{p_{\cdot j}}</script><p>记为$P_{X|Y}(x_i|y_j)$，即为在$Y=y_j$的条件下，r.v. $X$的条件频率函数</p>
<p><strong>条件频率函数的性质</strong>：</p>
<ul>
<li><p>若$X,Y$独立，则$P_{X|Y}(x|y)=f_X(x)$</p>
</li>
<li><p>$P\{X=x_i|Y=y_j\}\ge0$</p>
</li>
<li><p>$\overset{\infty}\sum\limits_{i=1}P\{X=x_i|Y=y_j\}=1$，由上述两条可知条件频率函数也是频率函数</p>
</li>
<li><p>全概率公式：$f_X(x)=\sum\limits_{y}P_{X|Y}(x|y)f_Y(y)$</p>
<p>若$f_Y(y)=0$，则定义$P_{X|Y}(x|y)=0$</p>
</li>
</ul>
<p><strong>二维r.v.的条件分布函数</strong>：$F_{X|Y}(x|y)=P\{X\leq x| Y= y\}=\frac{P\{X\leq x, Y=y\}}{P\{Y=y\}}$</p>
<ul>
<li>对于连续型随机变量，若极限$\lim\limits_{𝜺→0^+}P\{X\leq x|y&lt;Y\leq y+𝜺\}$存在，则称其为在条件$Y=y$下$X$的条件分布函数</li>
</ul>
<p><strong>二维连续型随机变量的条件概率密度</strong>：</p>
<script type="math/tex; mode=display">\lim\limits_{𝜺→0^+}P\{X\leq x|y<Y\leq y+𝜺\}=\int_{-\infty}^{x}\frac{f(u,y)}{f_Y(y)}du</script><p><strong>条件密度</strong>：$f_{X|Y}(x|y)≜\frac{f(x,y)}{f_Y(y)}$</p>
<p><strong>条件分布</strong>：$F_{X|Y}(x|y)≜\int_{-\infty}^{x}f_{X|Y}(u|y)du$</p>
<p><strong>全概率公式 连续ver.</strong>：$f_Y(y)=\int_{-\infty}^{\infty}f_{Y|X}(y|x)f_X(x)dx$</p>
<p><strong>条件密度的性质</strong>：</p>
<ul>
<li>$f_{X|Y}(x|y)\ge0$</li>
<li>$\int_{-\infty}^{\infty}f_{X|Y}(x|y)dx=1$</li>
</ul>
]]></content>
      <categories>
        <category>Math</category>
      </categories>
      <tags>
        <tag>Probability &amp; Statistics</tag>
      </tags>
  </entry>
  <entry>
    <title>Fisher Information Matrix</title>
    <url>/2023/06/23/Fisher_Info_Matrix/</url>
    <content><![CDATA[<p>Learning a parameter vector $\theta$:</p>
<script type="math/tex; mode=display">\underset{\theta\in\mathbb R^n}{\arg\max}\ p(x|\theta)</script><p>Here $p(x|\theta)$ is the likelihood, which we need to maximize wrt. $\theta$.</p>
<p><strong>Score function</strong>:</p>
<script type="math/tex; mode=display">s(\theta) =\nabla_{\theta}\log p(x\vert\theta)</script><p><strong>Claim.</strong> The expected value of $s(\theta)$ wrt. $\theta$ is $0$.</p>
<p><strong>Proof.</strong> </p>
<script type="math/tex; mode=display">\begin{align*} \mathop{\mathbb{E}}_{p(x\vert\theta)}\left[ s(\theta)\right] &=\mathop{\mathbb{E}}_{p(x\vert\theta)}\left[\nabla\log p(x\vert\theta)\right]\\[5pt]    &=\int\nabla\log p(x\vert\theta)  p(x\vert\theta)\text{d}x\\[5pt]    &=\int\frac{\nabla p(x\vert\theta)}{p(x\vert\theta)} p(x\vert\theta)\text{d}x\\[5pt]    &=\int\nabla p(x\vert\theta)\text{d}x\\[5pt]    &=\nabla\int p(x\vert\theta)\text{d}x\\[5pt]    &=\nabla 1\\[5pt]    &= 0\end{align*}</script><p><strong>Fisher Information Matrix</strong> is the covariance of score function:</p>
<p>$\text F=\mathop{\mathbb{E}}_{p(x\vert\theta)}\left[ (s(\theta) - 0)(s(\theta) - 0)^{\text{T}}\right] =\mathop{\mathbb{E}}_{p(x\vert\theta)}\left[\nabla\log p(x\vert\theta)\nabla\log p(x\vert\theta)^{\text{T}}\right] $</p>
<p>Calculating the exact expectation can be hard, so we approximate the expectation by using <a href="https://en.wikipedia.org/wiki/Empirical_distribution_function">empirical distribution</a>. Given training data $X =\{ x_1, x_2,\cdots, x_N\}$, we have <strong>Empirical Fisher Information Matrix</strong>:</p>
<script type="math/tex; mode=display">\begin{align}\text F &=\frac{1}{N}\sum_{i=1}^{N}\nabla\log p(x_i\vert\theta)\nabla\log p(x_i\vert\theta)^{\text{T}} .\end{align}</script><p>Not sure: Calculating empirical FIM takes $O(nk^2)$ time, where $n$ is the size of training set and $k$ is the number of parameters.</p>
]]></content>
      <categories>
        <category>Math</category>
      </categories>
      <tags>
        <tag>Probability &amp; Statistics</tag>
      </tags>
  </entry>
  <entry>
    <title>基于重复因子的字符串匹配</title>
    <url>/2022/11/12/String%20matching%20based%20on%20repetition%20factors/</url>
    <content><![CDATA[<p>出处：CLRS Problem 32-1，DSAA(H) 2021 Fall Midterm Final Problem</p>
<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>记$y^i$为字符串$y$进行$i$次重复后的拼接字符串，例如$(ab)^3=ababab$。</p>
<p>对于字符串$x\in\Sigma^{\star}$，若存在字符串$y\in\Sigma^{\star}$和正整数$r$，使得$x=y^r$，则称$r$为$x$的一个<strong>重复因子</strong>。</p>
<p>记$\rho(x)$为字符串$x$的<strong>最大重复因子</strong>。</p>
<ol>
<li><p>设计算法对于输入字符串$P[1_\cdots m]$，对于$1\leq i\leq m$，求解$\rho(P[1_\cdots i])$，即$P$每个前缀串的最大重复因子。</p>
</li>
<li><p>记$\rho^{\star}(P)=max\{\rho(P[1_\cdots i])\}, 1\leq i\leq m$，即$P$所有前缀串中最大重复的因子。</p>
<p>证明：从长度为$m$的二进制串集合中任取其一，则$\rho^{*}(P)$的期望值是$O(1)$的。</p>
</li>
<li><p>证明Galil &amp; Seiferas算法的正确性：</p>
<p>该算法能在$O(\rho^{\star}(P)n+m)$的时间内，从文本串$T[1_\cdots n]$中匹配模式串$P[1_\cdots m]$的所有出现位置，且除模式串和文本串外，空间开销仅为$O(1)$。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">REPETITION_MATCHER(P, T)</span><br><span class="line">    m = P.length</span><br><span class="line">    n = T.length</span><br><span class="line">    k = 1 + ρ*(P)</span><br><span class="line">    q = 0</span><br><span class="line">    s = 0</span><br><span class="line">    while s ≤ n - m</span><br><span class="line">        if T[s + q + 1] == P[q + 1]</span><br><span class="line">            q = q + 1</span><br><span class="line">            if q == m</span><br><span class="line">                print &quot;Pattern occurs with shift&quot; s</span><br><span class="line">        if q == m or T[s + q + 1] != P[q + 1]</span><br><span class="line">            s = s + max(1, ceil(q / k))</span><br><span class="line">            q = 0</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="算法设计"><a href="#算法设计" class="headerlink" title="算法设计"></a>算法设计</h3><p>求出最长公共前后缀数组$\pi[m]$，记$k=m-\pi[m]$。</p>
<p>若$k|m$，则$k$就是最小循环节，$\rho(P)=\frac{m}{k}$。</p>
<p>$\pi[m]=0$的情况：除$P$本身外不存在循环节，$k=m$，显然$\rho(P)=1$成立。</p>
<p>$\pi[m]&gt;0$的情况：由于$k|m$又$k≠m$，则$2k\leq m$，又有$\pi[m]\ge \frac{m}{2}$，因此最长公共前后缀有交集(如图)。</p>
<p><img src="https://s2.loli.net/2022/11/12/ifog5x8TtJZ2nWA.png" alt="image.png" style="zoom: 33%;" /></p>
<p>利用公共前后缀的性质，后缀(蓝色)的末尾$k$个字符与前缀的末尾$k$个字符相等，而前缀的末尾$k$个字符又是后缀(蓝色)的末尾倒数$k+1\sim2k$共$k$个字符，由此递推，由于$k|m$，有$k|\pi[m]$，末尾$k$个字符也就是$P$的循环节了。</p>
<p><img src="https://s2.loli.net/2022/11/12/IRE4jmoYUKyQCXg.png" alt="image.png" style="zoom: 40%;" /></p>
<p>现用反证法证明不存在更小的循环节/更大的$\rho(P)$：若存在更小的循环节，则说明$P$最长公共前后缀可以更长($\pi[m]$可以更大)，然而现在保证了$\pi[m]$的正确性，因而不存在更小的循环节。</p>
<p>若$k\nmid m$，则除$P$本身外不存在循环节，$\rho(P)=1$，证明如下：</p>
<p>假设$\rho(P)\ge2$，则说明$P$有至少重复两次的循环节，那么$P$最长公共前后缀应为恰好循环$\rho(P)-1$次的循环节，此时$k$应为单个循环节长度$\frac{m}{\rho(P)}$，则$k|m$，矛盾。</p>
<p>时间复杂度：求$\pi[m]$耗时$O(m)$，判断整除等运算均为$O(1)$，整体时间复杂度$O(m)$</p>
<h3 id="期望值证明"><a href="#期望值证明" class="headerlink" title="期望值证明"></a>期望值证明</h3><blockquote>
<p>$^\star$这里貌似怪怪的，不太懂概率上界为什么是4就能说明期望有界了。</p>
<p>$^\star$我感觉最后那个概率沿着这种思路应该不能粗暴相加要用容斥，现在没时间想先留个坑。</p>
</blockquote>
<p>二进制串$P$的长度为$i$的前缀子串一共有$2^i$种。假设$r|i$，则可以构造长度为$\frac{i}{r}$的循环节，共有$2^{\frac{i}{r}}$种，选中概率为$\frac{2^{\frac{i}{r}}}{2^i}=\frac{1}{2^{i\frac{r-1}{r}}}$。则利用布尔不等式计算$\rho(P[1_{\cdots}i])&gt; r$的概率为</p>
<script type="math/tex; mode=display">\begin{aligned}
\sum_{r^{\prime}>r, r^{\prime} \mid i} \frac{1}{2^{i \frac{\left(r^{\prime}-1\right)}{r^{\prime}}}} &=\frac{1}{2^{i}} \sum_{r^{\prime}>r, r^{\prime} \mid i} 2^{i / r^{\prime}} \\
&=\frac{1}{2^{i}} \sum_{j=1}^{\left\lfloor{i/r}\rfloor\right.} 2^{j} \\
& \leq \frac{2^{i / r}}{2^{i-1}} \\
&=2^{i / r-i+1}
\end{aligned}</script><p>接下来对于每个$i\in[1,m]$，用布尔不等式加和求$\rho(P)&gt;r$的概率上界：</p>
<script type="math/tex; mode=display">\begin{aligned}
\sum_{i=0}^{m} 2^{i / r-i+1} &=2 \sum_{i=1}^{m} 2^{\left(\frac{1}{r}-1\right)^{i}} \\
&=2 \frac{1-2^{\frac{m+1}{r}-m-1}}{1-2^{\left(\frac{1}{r}-1\right)}} \\
& \leq 2 \frac{1}{2^{\left(\frac{1}{r}-1\right)}}
\end{aligned}</script><p>该式随$r$增长，较快地收敛到4，期望值是有界的且与$m$无关，因而为$O(1)$</p>
<h3 id="Galil-amp-Seiferas算法"><a href="#Galil-amp-Seiferas算法" class="headerlink" title="Galil &amp; Seiferas算法"></a>Galil &amp; Seiferas算法</h3><blockquote>
<p>This algorithm correctly finds the occurrences of the pattern $P$ for reasons similar to the Knuth Morris Pratt algorithm. That is, we know that we will only increase $q\ \rho^{\star}(P)$ many times before we have to bite the bullet and increase $s$, and $s$ can only be increased at most $n − m$ many times. It will definitely find every possible occurrence of the pattern because it searches for every time that the primitive root of $P$ occurs, and it must occur for $P$ to occur.</p>
</blockquote>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/07/10/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>杂</category>
      </categories>
      <tags>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>Reinforcement Learning Seminar Ⅱ</title>
    <url>/2023/07/09/RL_Seminar_2/</url>
    <content><![CDATA[<h2 id="Info"><a href="#Info" class="headerlink" title="Info"></a>Info</h2><p>深圳市-福田区-景田路-中国茶宫-6层</p>
<h2 id="Markov-Decision-Process-MDP"><a href="#Markov-Decision-Process-MDP" class="headerlink" title="Markov Decision Process (MDP)"></a>Markov Decision Process (MDP)</h2><h3 id="State-Space-Form-with-Controller"><a href="#State-Space-Form-with-Controller" class="headerlink" title="State Space Form, with Controller"></a>State Space Form, with Controller</h3><script type="math/tex; mode=display">x_{t+1}=f(x_t,u_t)</script><p>Consider a space system with perturbation</p>
<script type="math/tex; mode=display">x_{t+1}=f(x_t,u_t,w_t)</script><p>where $w_t\sim P$.</p>
<p>The system $x_{t+1}=f(x_t,u_t,w_t)$ is equivalent to $x_{t+1}=D(x_t,u_t)$. </p>
<h3 id="MDP"><a href="#MDP" class="headerlink" title="MDP"></a>MDP</h3><p><strong>Assumption.</strong> $|S|,|A|\le \infty$</p>
<p>An infinite-horizon Markov Decision Process is a tuple $(S,A,r,\gamma,\mathbb P)$, where $S$ is the state space, $A$ is the action space, $r: A\times S\rightarrow [0,1]$, $\gamma\in(0,1)$ is the discount factor and $\mathbb P: S\times A\rightarrow \Delta(S)$ is the transition kernel(aka. model/dynamics).</p>
<p><strong>State-Value function</strong></p>
<p>$V:S\rightarrow [0,1]$, defined as</p>
<script type="math/tex; mode=display">V^\pi(s)\triangleq \mathbb E_{s_{h+1}\sim \mathbb P(s_h,a_h),a_h\sim\pi(s_h)}(\sum\limits_{h=1}^\infty \gamma^hr(s_h,a_h)|s_1=s)</script><p>where $\pi = (\pi_1,\pi_2,\cdots)$</p>
<p>State-Action Value Function</p>
<p>$Q^\pi(s,a) \triangleq ?$</p>
<h2 id="Value-Iteration"><a href="#Value-Iteration" class="headerlink" title="Value Iteration"></a>Value Iteration</h2><p>$\{Q_1,Q_2,\cdots,Q_\infty\}$. Goal: $Q_\infty=Q^\star$, $Q^\star\triangleq Q^{\pi^\star}$, $Q^\star(s,a)\triangleq r(s,a) + \gamma\mathbb E_{s’\sim\mathbb P(s,a)}(V^{\pi^\star}(s’))$.</p>
<script type="math/tex; mode=display">V_{k+1(s)}\leftarrow r(s,a)+\gamma\max\limits_{a'\in A}(\mathbb E_{s'\sim\mathbb P(s,a)}(Q_k(s',a')))</script><script type="math/tex; mode=display">\pi^\star(s) = \mathop{\arg\max}\limits_{a\in A} Q_\infty(s,a)</script><p><strong>Bellman Optimality Operator</strong></p>
<p>$\text T^\star: Q\rightarrow Q$ defined as</p>
<script type="math/tex; mode=display">Q_{k+1}\triangleq \text T^\star Q_k</script><script type="math/tex; mode=display">V_{k+1(s)}\leftarrow r(s,a)+\gamma\max\limits_{a'\in A}(\mathbb E_{s'\sim\mathbb P(s,a)}(Q_k(s',a')))</script><p>for all $(s,a)\in S\times A$.</p>
<p><strong>Theorem.</strong> $Q_\infty$ is the fixed point of $\text T^\star$, i.e., $Q_\infty=\text T^\star Q_\infty$</p>
<p>Proof: $Q$ is a contraction mapping of $\text T^\star$’s Banach Space</p>
<h2 id="Appendix"><a href="#Appendix" class="headerlink" title="Appendix"></a>Appendix</h2><p>$r(s,a) = \int R(s,a)d D(s,a) = \mathbb E(R(s,a))$</p>
<p>$\Delta_n$: Probability simplex</p>
<p>$\Delta_2 = \{x\in \mathbb R^3 : \mathbb 1^T x=1,x\succeq 0\}$</p>
<p>Policy: $\pi: S\rightarrow \Delta(A)$</p>
<p>Deterministic policy $\pi:S\rightarrow A$</p>
<p>Nonstationary policy $\pi: S\times T\rightarrow \Delta(A)$</p>
<p>Optimal policy $\pi^\star=\mathop{\arg\max}\limits_{\pi} V^\pi(s_1)$</p>
<p><strong>Banach space</strong></p>
<ul>
<li>Complete: Any Cauchy Sequence converges<ul>
<li>Cauchy Sequence: $\{x_k\}_{k=1}^\infty,\ \forall \epsilon\ \exists N$ s.t. $k&gt;N$, $|x_{k+1}-x_k|&lt;\epsilon$</li>
</ul>
</li>
<li>Normed: Distance can be defined (Metric space?)<ul>
<li>Metric: two-point distance, norm: distance to $O$</li>
</ul>
</li>
<li>Vector space</li>
</ul>
<p><strong>Contraction mapping</strong></p>
<p>$\text T: V\rightarrow V$</p>
<p>$\mathbb F||v||\le ||v||,\ F||v||\le\gamma||v||, \gamma\in(0,1)$</p>
<p><strong>Theorem.</strong> Banach Space Fixed Point Theorem</p>
<p>If $\text T$ is a contraction mapping on $\mathscr B$</p>
<p>$\forall x\in \mathscr B, \text T^\infty x=t_{fix}$</p>
<p>where $\text T^\infty t_{fix}=t_{fix}$ </p>
<h2 id="Assignment"><a href="#Assignment" class="headerlink" title="Assignment"></a>Assignment</h2><ol>
<li>Prove that the system $x_{t+1}=f(x_t,u_t,w_t)$ is equivalent to $x_{t+1}=D(x_t,u_t)$.</li>
<li>Prove that an infinite horizon MDP with a stationary policy $\pi$ is a Markov process. (hint: prove $s’\sim\mathbb P(s,\pi(s))$ is Markovian)</li>
<li>Prove that for an infinite horizon MDP with discount factor $\gamma\in (0,1)$, the optimal policy is stationary and deterministic, i.e., $\pi^\star = (\pi^\star,\pi^\star,\cdots,\pi^\star)$ or $\pi^\star:S\rightarrow \Delta(A)$.</li>
<li>State and prove the Banach Space Fixed Point Theorem.</li>
<li>Prove that $Q_\infty=\text T^\star Q_\infty$ using Banach Space Fixed Point Theorem. (Hint: Prove that the $\text T^\star$ in )</li>
</ol>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Artificial Intelligence</tag>
        <tag>Reinforcement Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>学长团手册-线上迎新</title>
    <url>/2023/03/30/%E5%AD%A6%E9%95%BF%E5%9B%A2-%E7%BA%BF%E4%B8%8A%E6%8B%9B%E6%96%B0/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试⚠" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="479ab5bd4fc427e7dea5cd0b54fa521cb21f0f15fa7dcfb17600df3a9781252c"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Password required to read this article</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>学长团</category>
      </categories>
      <tags>
        <tag>学长团</tag>
      </tags>
  </entry>
  <entry>
    <title>6.17 概览与前瞻</title>
    <url>/2023/03/30/%E5%AD%A6%E9%95%BF%E5%9B%A2%E4%BC%9A%E8%AE%AE22-6-17/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试⚠" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="16bf22781539fa004f73441c48925be1482c55f3e6662bd0e3238a1d94b6b7c1">165d50f05814027fb7fe5e4ae8a088d8cabf1ea2d88ccf0f53dc7b0b289f3333b8d2949f94994cc231f32263420b1d9d763dbc72d1004f40b159812cf1b62bfcad5ec3a77bf270dda4d0ef90d57fe411e3ee768cc6af26b003073a63e2529650ed3ceda60643f41694ac71dc381fa747f083692dec538e9986f9c4f325f546e4cf5eff1a925f8d8b1dadb45a22a725d7d1866b964bca67e9f51f8311d3bf16627957a7d66c3001ae24386c7a71b361c8244421f562e623d692a74b76ac15941f64ce2f2722ab1036a255f3057c0747743b2afb3a64011bf5806f22d813c4cce73cc8a868cd842637cb42d6fab0fbce9b61dfbb63c5cf5db55d237adf61523a8e6634e1af168f3812adaa9dd16da325bd48ad0b4bea9c4e49fcef7f737b5ee3e8ae1e215fdb8ac87bb37644628305099174c2a464e09fd05af38fdf0ae8989993e6468279b6c6425901151de925a3cfc387382e7bd5aebdb1aa37a630276647e8d8d872d53cbf8f5de4640bb2f78fbbafd151a8f7d73bac40e31f6dee342c1e92eb74b6e54196141b3b25f1e379d98660cc0b84eeb5ab51dec3b1715f85e44a36bd7619e1a5050393e6e5845c6527f8a2f9c96a728cae815fd4330add4f1ba98535d2def22b3c8cbc3316e25414b7d5311c833445492db6d284b83cc9c540bfdbe521cd3c0b595172ac0f8564c8d9284deaed38d6f68f90646cc2dc54d96f3fc783725b510feeb3e20d1981b28c1184fee6bb392ba2a8a4961ad58811ebeb8e79cb06ed89d72ff0a05a6f1118c78ffebca4fd791b927d7c5c9f402e72f245c09394f2826b34597f8568ea04e471a9545198df008ab990d1324f62cdf2f1754c42ff03754cb97cf51d2c2b49d1cb72580fa0faec4d59b18315c22c74558527d2b3005149d424e589b7e57c122bab4523f9491ca5efdcd755b3ce0333361f4b1b98b7745302d21f0cc5c0e7f6bf10de640d0cdaf1db966d7a8bf37019053810cead973c6ad3019e397cd47bbdad60c45f427d8bbecfd99f93c177643ac6c2d4ebfd09bf2291c75ea2af96d1e1ea60691ae48125f89ccf81d58de00dfd450329bb2c2a8ff0e81f610a3b1ea231c2f347dee5c03004f3b1ffebd77be16511dbc205a34f6cc41bb9c3edced16c0b6671a7f5e8926a8684e37ef021a83425476eab5ccef0f574f924fa7852eff34b4cc39db7f54b7e67b01cda7f26a917b7600fde0e6cd6dc2d96414f279ccaa0d41434a56a8a50f1fddd7ed5f398a2b3a09a666e8e7fc14891a33103931b96e5a131a3af97081adef8b21cdccac72516ad14adf25f6d6b7ada73e6de96d8bed7643e8260cbb8f7993c2c9d8ef57179e725d8177e1d2ba50aa87b62cf57033dab6223584e8ae41604f6cfa85de90e93ebc6d2b6020f35fda40343360a37d2a58811021b47a8b841bb307e42363016a8bac15fc08a9cebc6a975a237d54da1d090859d8f028c7d3051b5e354644f79e042f9f427e8aecabd98d97f1cbd46c6fb0700b1e0069f245aed9839153a8a5e03f0b4c515b8d535f1fae6a668501b86a6901d9e009eb3524c24a346f620c3d3db2b5c2c649e9d73fd27c5b4010d803d99c9afb9cd2d012489d048fd3921e2be44eefe259841f7d763b6dccbc0a4fa18a08846f77d883d4ad0b9fc1fc8ef669a527c9d82000df303193ded19f63b646828e7b5877e56b4e942c800067de76e9e22eb96e571cd43a578a540e2ed0bed2d2801edf08e017e0f1fbfa4fd73c09b49070bc58b4802a08192e58e379c864b6e9fb75e96b2dac693294faba532f4aa77a637ad6a4a9a0d7dfd62f74d4dd31045833832a7500100a258e5a00b5e79e05f7bf3e9b8d87a6bc60fdc6b251fd0a7955b5c6c479aec086db3b759186afbf0fb0a96fb123d937b8474a6c37c04cfd177c57f48c39852b946267529fea964e42f0a802e169f1470c0bfaee4792d552d29ec7af3efdac35a08b9968b0b4c0432f375ac7d2d72e8fd1c3fb0186d9cb453a8a654214643a91cc08549939446361a909350c2ea9a86435e5a43585b74725327930c0e556363c015d7f0da6688ecd0962e86ede5f4a3fa49d1f676562e35cb384ff0601638f0c24b0c181340789419e7c31b9e87241bfb1fbfaebd65466dc5123c480c79d390187b8cafa30b6f765c1e327995821080b10272e86fc52adbce356ff5d719ccb5d3b1c61b7c7e517b2eccb332869ed789102f81bb584aa4de50ad1894ebb09714592fd48e1135dccbb93715474447dfbf95f88323779bbf17368a5a7cdfd6d920b296cb58026be514a60b93fa4a573f10b57c8120910b0b693c86c6093af5bf395f1015aa57f120ddaa41a4a23771a233d9e72af40c7559f6583c2b2cc5f794e3d96eaf36784298ca9349237973ad1fa4cd0de31d01a5ba9512e3eb1d0dab4fa9df345af373f9cfe95d92b6f15dec466d5cdd1e2dac8d963222aa4c1a3d41b91c75807c66c731386232b0300c62a23a3700b76df44559138735e6e82dab3d1c58a0f36727d361e3b6b6a78c3b157b4893ecfb54da9adf52fcd3883d6305c1bd63d600c91ad638c5c58cb89411efee9ec38a40827b3fba5194c50b25f8a057d051e843ad34de9daf206ea40189f90b5477f6873669bfd2d159c33d177baa874cc36c4857104c18e8c2d4b806f3869c16d99c9843e3fd602769caad234798a08061c8cb8a3fb7aef8db645394c51f8c52a7f07b2838bcab109211ec51326a95d39baa9d66b0072c28b0eec0ddd3bbc87eaf0c146ca38e587065769e10e4c3e1cad08fe5e9040ba37d3b10bc8fad5e07486ffa40</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Password required to read this article</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>学长团</category>
      </categories>
      <tags>
        <tag>学长团</tag>
      </tags>
  </entry>
  <entry>
    <title>Reinforcement Learning Seminar Ⅰ</title>
    <url>/2023/07/02/RL_Seminar_1/</url>
    <content><![CDATA[<h2 id="Info"><a href="#Info" class="headerlink" title="Info"></a>Info</h2><p>Text editor: $\text{Textmacs}$</p>
<p>Email: <a href="mailto: yli340@uic.edu">yli340@uic.edu</a></p>
<h2 id="From-Physics-to-Control-Theory"><a href="#From-Physics-to-Control-Theory" class="headerlink" title="From Physics to Control Theory"></a>From Physics to Control Theory</h2><p>State of Newton’s System(deterministic):</p>
<script type="math/tex; mode=display">s(t) = \begin{bmatrix}x(t)\\\dot x(t)\end{bmatrix}.</script><p>State-space form of Newton’s 2nd Law:</p>
<script type="math/tex; mode=display">\begin{align*}\dot s(t) &=\begin{bmatrix}\dot x(t)\\\ddot x(t)\end{bmatrix}\\&= \begin{bmatrix}0\quad1\\0\quad0\end{bmatrix} \begin{bmatrix}x(t)\\\dot x(t)\end{bmatrix} + \begin{bmatrix}0\quad0\\0\quad1\end{bmatrix}\begin{bmatrix}0\\u\end{bmatrix}\\&=A s(t) + B\begin{bmatrix}0\\u\end{bmatrix}.\end{align*}</script><p>What’s a linear transformation? </p>
<script type="math/tex; mode=display">\mathscr A(x) = \begin{bmatrix}\mathscr Ae_1\quad \mathscr Ae_2\end{bmatrix}x.</script><p>Group, Flow, Lie Group</p>
<p>General form of state transform:</p>
<script type="math/tex; mode=display">\dot s(t) = f(s(t), u(t)).</script><h2 id="From-Deterministic-to-Stochastic"><a href="#From-Deterministic-to-Stochastic" class="headerlink" title="From Deterministic to Stochastic"></a>From Deterministic to Stochastic</h2><blockquote>
<p>Discrete System Only</p>
</blockquote>
<h3 id="Without-Controller"><a href="#Without-Controller" class="headerlink" title="Without Controller:"></a>Without Controller:</h3><p>$\dot s(t)=f(s(t)) \rightarrow s_{t+1} = f(s_t)$</p>
<p>Stochastic dynamic system:</p>
<p>$s_{t+1} = f(s_t) \rightarrow s_{t+1} \sim p(s_t)$</p>
<p>Markov System (memoryless):</p>
<p>$s_{t+1} \sim p(s_0,\cdots,s_t)=p(s_t)$</p>
<h3 id="With-Controller"><a href="#With-Controller" class="headerlink" title="With Controller:"></a>With Controller:</h3><p>$x_{t+1}=f(x_t,u_t)\rightarrow s_{t+1}\sim p(s_t,a_t)$</p>
<h2 id="Introduction-to-RL"><a href="#Introduction-to-RL" class="headerlink" title="Introduction to RL"></a>Introduction to RL</h2><p>Interact with environment</p>
<p>Logic -&gt; Supervised -&gt; RL</p>
<p>Safe RL</p>
<p>Sim2Real</p>
<h2 id="Next-Seminar-MDP"><a href="#Next-Seminar-MDP" class="headerlink" title="Next Seminar: MDP"></a>Next Seminar: MDP</h2><p>Maximize reward function</p>
<p>$\pi: S\rightarrow\Delta(A)$</p>
<p>$r: S\times A\rightarrow[0,1]$</p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Artificial Intelligence</tag>
        <tag>Reinforcement Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>SUSTech 选课指南 by 咕桃</title>
    <url>/2022/08/17/SUSTech%E9%80%89%E8%AF%BE%E6%8C%87%E5%8D%97%20by%20%E5%92%95%E6%A1%83/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试⚠" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="c5c868f1f0142dc6510e1aa380ffaeffd03ea28a2b2b051961e4106cc4029954"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">阅读该指南需要获得作者的许可</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>SUSTech</category>
      </categories>
      <tags>
        <tag>妮可指南</tag>
      </tags>
  </entry>
  <entry>
    <title>7.2 树德学长团培训 PartⅠ</title>
    <url>/2022/07/10/%E5%AD%A6%E9%95%BF%E5%9B%A2%E4%BC%9A%E8%AE%AE22-7-2/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试⚠" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="8075695463b5671e24f7b1713da9bec5a33a8acec1ae06e1876a2d265abda8ba">165d50f05814027fb7fe5e4ae8a088d8cabf1ea2d88ccf0f53dc7b0b289f3333d74f2de33e539b091090e807495808ece201338b2f7b581712d926053403ef1ab31d0cc27c948f5933c813367b273e7290fb86acc1dfa1697d9fe5732ebc9cea098394032df1573965274c060f87f4c517ab84bae6a35c2a1e07929531d306c89acf91ba7a43e7682a4d582367e6b5ed70d0e136225b6a20155489b140dc5d16c591aff08204028558da0a5d09f3dc2ac843f460daa6fa5e918d446e92ddccb94805ef03c905149a9112c6750b7340087bb4b1a57f9d41bb8518d950c9204ef400bbd97338ce89f0bf8f9351a89cf9d1480b4a84b66e43bbc79b2116b84822b412cf727ba315d22319414480ef476a40cd5fa974228f4a8cd80b205f5f3fc9197b1fc5bc4eae926a10cc221820299629a3d94eb2ac405302c40cc427d5d5a1cdfa27ab7c416c7f0f16edb0f59d803903e765026be9783b62973ed3cd7679a68b5beff477b6e34a880567b0662ed127b2167848ede0da42e5fb0dd547122365db7dc2264c9dd148fdc740c0eb853651f30e56107699062e89ccba91961f1fa4e500c466c704025f5673f187c5cd80add87ae1dee9c64665048ee408d7459c6036c07f109b2afb629d419ee00ead8f79e92d11589763a1f88c3bf1fe2bbbfbbc4d422d0f7cbefd862a01e2a6b023cc29bd02a9c276c7582019bcc48f53f76e64c1544d6f14335237987ff0a77c9e972c101140f711a9ca79dfd3fb63aaef951641b202b9ec52c0d1b47c1bc2b1e47ea1f8c00cd84eb6b4784da15abaca05075af91ac830efe41a9befaee0dbf37416488ec7743df7472733aeec34e8cbb433d3b4987d7219ac4692603437d77baf8278055d8a8a64746c14851c0ba4c7118637f074f07412014834008e40c151cc7870dc53f270764ce42842a6b3b3a2846cdc1e2e24876c7c2ab4442abe337900434cd32a8da365e75318d5c7b4e70c2d0943bab34d3232f6436a497cb1fcebb858ffae7488c7c29143f1bddeb2b15bdc010dfa2a7ea7ed228fbf12f1c0e46da3d82c6d267c376f16c4a71016f1c35bd6a8d16e918ebffc01e3c6ccb1f72a087c49290086cfd3a60d906543b6a486b571418cb9aff78933ecca86face58c2865f313a368ff029e0153e60c7f379d6699aabdfa3bc96bac777b4da7b07201b72dc9f4da7660a55e0cb4a4af21e71346e1d08909cfeea07e82678d844c75c2fed37c600b246ca503a6f3d887a6edd3be33d9758b9a68b01cedee05abf7ba83b4824f9805c772ff08067a6ecde6805cd5947f1d756277e51f3c0914425865d601d5b244cb198dc6bbf24e7664d853d2d4899a190247615c41c33d7e5db594293e57b49a17679da0035510996521a3e082946fd228e789396a58a2715ccfc908cf74f19b59c077793d492349a5c4dc8451b25b30335b7b3989784159a42c831d8cdd0f9976c24e716bf09a4bfc1a16d4d40ce2ca436955388620522436f2a5e662fe22097c6f1d3c3f215801800017216e9e2caf24aabd54d241249d561352a67d41c7d300f3fbb2b67f27e57546adbaf1c9df94252b7de2a56eb3e4072391370a2d37ba69fcc24855ded73e54fed0a3244771702d1f2361140dac033b34c0d04501fa68bcb81395fabbe1240a3583ad6bda50b9df69f234cd0531e102ef3d96044d38ae843f3d0d1ddea6d3956445769ba5e4bb52486755ebd86dbb22bb1502cf5d9f92e6422836d9609732a45553c7b5f2725d2db5bdd88e43b7bf4aa27694da7f1d1b1e9028576aa50a58c8fd515cc44197ef79f52996998205564215942d89f6fbd51b8a0bb88c7c4c90e18cbbaf418d0ee9f3cd94a84f8b8c883a956a4d08441fc7c8a65714a060a05045e0f4270a2f49c04a210e0b51766c50616fe04ce9a8a3b590e2315b001f2d313609af02195ada486ad5b3eb8656fa1751105634358fb2735663a7362df11e6198b5df7e07317741c3a4af32d502a1e5e25d8894d88952ca156c41a5183bbcdde71de58ce7c28bca9cbe390eebc64384a20df86a67d9e1df111e844d03363b9617abeee4730eb452488a2fadb1dd42050265e0349b05fdb4a3c2850d3074ce0efa73128073c0c76429317f7278aac2d75cac05b3778a93680f3c6ab7eb324235345b4d09b98ba53f2982ccac2d784c25a3b63d6a5d81c904478dfb154628244f3c40e5f55a6df52588b4df76bbe6b1cf28c6fd4a9309bafb7fe10c1c1197dc62543dd2588d75af78339751be083eda79b08ee058dacc2ddb810fc553b032d4329b20c7aaf9aa17ba954ebdfdbe108fdc9fc96fed57c4c2186a310736dbe7bbb1a35ec9b489c24a3474817e4f431e0714f20a116e6b72f57e4e477766dd7fc381ee985744d5ed64f050018429ab74eced64eb1418f4895551d0baf4a5a7fd91f5f0cfe3ea5d5fd70a8e73d5d2b0c112cf9c112c2beb2846276bb4d3b9e1a75bb68217d79856d0aee33fb1fe327e5b700268a8c9b7713562229e95fdd40829e5cb31c2d109b96958f3432fe0ae6e305f5af47ff80b94d06dabcf35c93f228b65bf06a9e1b396fc68d3f450d856dbf2eb2fabfedfd47099c335d6a25ba2a76373b22119f4d127ce5cfa54c73b750d2674940aadb2d2cbfa75291ed69a3989f36cd4cddadaf648d49b4cce8b90b217a12b512835642dbf7ec1529b743a89c91100a1c94a5c2bbb301779ac97cfe48feed3af06e96314eecec24cd503efcdd61b0b1f60ac1028e410b27cb538be36e816088f8edf1cf93ed9bb922c6c04bd8a819960515bb166acca3816597525b5e2ad3bae3745dfc79494f8dab50c1e0dda1cc3c6a3a5fc7de2d74504687b8328e7dec5f76160f69d7361ade3fe077f1bf02041df325b92ba523d44d548e30cd1af1ce3f5208367585ae6e73530aa1467eab95aea32f594bbd7b91e189dd2205786869a784117114cca8c307150de87a3126f7b22087c756adc32ee71391b10395af92cd0ef1e0c514f8b5e03832c9835eecea50f2aeee9daf2c81cdf67fd92deee515d5256458a9f75d8b57a8173da40146dd6f48e865ec75bc6513d24a14659eb033e28cb5f3e293aa2f1ac7f318b617b809b242e58fa62e30f40fc3cc20a2fc2afe6c8e67367699446c84965edc838ce36e13521341a1f5e3f7977449a572c7ec4dbe9277cc627bb4e5925e1884d9c766f0e25c61c994cbe3e8a5efeaf84e93fb275b3bcbd2386c20e582e319c7a3c2e951944a5f8669f15ce909aa72d5bc5d8d186b2bd3eac02701bd785bc2c376c31eba31b709f2697a45cc6d968806ffed902758b940e93158803996dfd2baef4531d5d4984b00942b8661cb7c7f1eacb58d1a00a701055a460be26fd60c7d674e1ba9df42da5e1956a861037a7b1ff2763ac633153a26a07c53b84184c927cf234de1ee2aea84c40110e79168395035a7ab49fc553f7633266500d4a6d6010bf87311fb0dd06bb904855f5fee1f5f8ba757c117dc7767d69c69c001cfd91c29373293de94f0c41d4ea2934de183fb66087d1e2ea34067ced43ca6e746384a4c1ee696213bd8dfffe1c1dc8f43611647841f6330bb6b2c240e42b7082cfc69848f81c45edc661f846a727dd48d0663998fcfc2d17db9e4142fe20cdf5494970868332eebeb3a87f95c70d6f8598f5b14ff8f8d156855ce2ca00f97ab469dee4bc5e8b24a5b64a063bc052041759d550f0844bb03100cf626e38e16d45cb85a81470440f6041420865547ee417740b80e24c48cc11d2c873337ee70da8b7c6ff6c793da39937f4d8889520b0c97b7c190b571c5a8a09fbf5bfb2ba9ee4e77c7d6ab232504ea81261f3f48c44422b626ff0ec947fe28507649e9ad26e5c776f528a30b4fd6c190fe07491481ff29cec055714b713e9215b0895ddae4bed1556d3717e4cdc01538661f4a56a738defefd9f637afdf761ad63ee0fe87b8150ee55a2f77d7c99900fb93f3d4179751a5d60ecf1a743e54e0f29f00d0ed1adf24ac41689f7ccb741ff95bfc23d2cedac3e15f3bc125e43363e742aa9d313aa1d040bae34764a9361283c00bd1651d9189dd993849f0e9cb8c47d77958d5198cfa760d50ab09d0b34cd961bceba20453fbd15cfc35811c72ea7f8b210cb558377091d9830df21da78f94abe08cc2e1946e0f4bb7267f64ea15d5f49f3b82cfa3c1465a6b19b126fa5c22d4e362fa766bdea132b44f95db4b7aa7b5b1b1f0753aded6b858a7b5ed7709aba2575623da42b686f5f00bf1b1da5b2545b8956d2116f14c123ed1f4aa3292f85d8d1d41bf26bf2256a46782bf922800602c11c3b91fc31c61699c5c1b31c839ce3117944709201f0493d1dd1fbb8602d2004e7f61ca6db08c800172430b7dfacbc636766ba1bfaf89badff38520d1949d4b56b209ad87408ee4bc52108f41a2d2c3fda20e85b3f109fdd24e1aeff1b72eb5655d4d7206d4a3360bc6e9a401c5cebd272296f42632daf1d0392b589901e8013219443eae1cc1078043538e6f936c1be7030fa96f688dad114368251b501d30eba22f54852a3f227380e4d60da51337dd8a56388bd3b4b50352ae3fabbfe9467469def175cfe5cf2d5c59d6eb03e509d987c0269b518d89d95eecaa3070e1c000b3ae39b4f0b12bd8113c85707f28320a99cba0cba5f1fdce987e233d59bcc012e03426861e8721ba40950743a61f5af82de7cacc61a0e96e8789077923180de4fca996383b37a10b6a2977694f11a22d469b445c45fafe95f415db4d7622d04115d6fc6d0c0949e5e6247705da0a098396803f2772f7740b02355bfb670c359c9761b1fe01b214b9c2c80e5dc886957825808f36d2025ce0b9515502785a9b93c41fb745f40a050b2e7575fa7cefaf23e73f21527e76e9562ff91a577100e29896ccc2895446a868dfcc1d065a1bf4cf4bca931b2aa76c1337e37f110ff9a9d6f602ede2fce63b3952319f088db167871d9a09a48b61b1928cd38d7a240b78dbfb652eba346e5baa38bc90a1b64390f038ca110af</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Password required to read this article</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>学长团</category>
      </categories>
      <tags>
        <tag>学长团</tag>
      </tags>
  </entry>
  <entry>
    <title>学长团记录</title>
    <url>/2022/11/06/%E5%AD%A6%E9%95%BF%E5%9B%A2%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试⚠" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="869800b3866acc2e562159214bf9d907aab07773e6d2a3cd3a1b474a41a13a39">165d50f05814027fb7fe5e4ae8a088d8cabf1ea2d88ccf0f53dc7b0b289f33337c5ff3e33f9fda8760e22a713cf49319fc9c4c144fa48547ff2f9dd0c87dd1b018989d16b92927a9da5da069bb9b19066136f1c903c117bd87fff074977cdfeeab5f82b40dbc8a335f54f3a123bf10b48437a568060138adb2324e2dfb4e6d8826e28306ca13500f9fbc83b5e66d61e65fd902cb1fe5cb4005dd959c1a4a14b692a6bf5334799429c5d8b03c87ba4dc71f921da323df04baee495cebd6445589eb6a5e3eed1f7667d52ea2999215954978af5669ee626dd8d4c825589e5065fc6702af85d7ddb6962770d91e0ffb85461e131def205630ee635c32a4969d80dc97c932bd9cd712fe040b9ecae5d2c5d8e8f31774a35be86a44da86eb7ad8b0de956d20e860124b02551164766a05c96bf764913c12f6b2cc0940be5b167ee5b1beb2f36a28cc36fcee2bb6bb8f499879920cd8af0c6a8794f0fd99dadf8a79aeda05888ff3b36ef8baa31574181c1bdff3423ac6702ab88253cf6390f50ecd73b67c5d52c9186445bf829c7a34eda9afee385ff658cbdfc19d735149064ff28ef123865abd69f62beece3eb4d1b5ebb1cd3d047b930ec2d4b80baadb23881f016bcbd5986ee5e3fdc4e2eb7b1b512f3101ec8708495591b970211dbe65b49d274563020809dafb0d2d0b3b0b7e42e66c02cde9a35f99cf6233251dc8f5979d5a78df72af84b250ce2744b5ec6723cf9efeafbd61670d0c72d4c1bf72b54a883a322d7475ac29a507a650ebd34fdc9658da613f38083f53e3c90fe48ddb79c48bb159885f54a0b7374c8855f4b8cf71f5906fcf42a65478079dcab862e9b4ed0dfd4cc48e1fd469714f4fb6e8efe6407e9fbea654a2a6147e873da991d5cd141a8c2026796a3a109ba11766832d252c0934889c02b78f3229c2953b7ec95a866d90743b63b44992e9a44e1e6fe23d295607d3926d0b9b4740862b2b6946e13b79</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Password required to read this article</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>学长团</category>
      </categories>
      <tags>
        <tag>学长团</tag>
      </tags>
  </entry>
  <entry>
    <title>SUSTech 培养方案指南 2023 by 咕桃</title>
    <url>/2023/07/28/2023%E5%9F%B9%E5%85%BB%E6%96%B9%E6%A1%88%E8%A7%A3%E8%AF%BB%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p><strong>教工部官方页面：</strong><a href="https://tao.sustech.edu.cn/page/id-184.html"><strong>南方科技大学2023级本科人才培养方案</strong></a></p>
<blockquote>
<p><strong>本博客适用于南方科技大学2023级新生</strong></p>
<p>南科大会在每个年级入学前发布对应年级的培养方案，内容包含：</p>
<ul>
<li>通识课程培养方案</li>
<li>各系下设专业情况</li>
<li>所有专业在1+3/2+2进系时对于先修课程的要求</li>
<li>所有专业对于不同课程的推荐修读学期</li>
<li>所有专业在毕业时对于修读课程的要求</li>
</ul>
<p>本文意在简单讲解培养方案该怎么读，培养方案上有哪些东西没写出来，以及如何结合培养方案来进行大一的选课。如果本文能对你有所帮助，在下当不胜荣幸。</p>
<p>——咕桃</p>
</blockquote>
<h1 id="Part-Ⅰ-通识培养方案"><a href="#Part-Ⅰ-通识培养方案" class="headerlink" title="Part Ⅰ. 通识培养方案"></a>Part Ⅰ. 通识培养方案</h1><p>这是对于所有专业都适用的通识课要求，其中需要重点看(各专业培养方案不会重点提)的主要是下面几个部分</p>
<h2 id="思想政治教育模块"><a href="#思想政治教育模块" class="headerlink" title="思想政治教育模块"></a>思想政治教育模块</h2><p>一共10门课17学分，要求全部修读，其中有5门理论课程(姑且这么叫吧)和5门实践课。</p>
<p>理论课程是需要在选课系统里进行积分选课的，需要平时每周去上课。</p>
<p>实践课程则是每个学期末书院会安排实践课论文的提交，以及青马班/寒假母校行/重走长征路这一类的假期实践活动可以算入实践课时长，认证时长后才能提交论文，这个等大一上期末书院会具体讲解。</p>
<p><del>妮可在选上双一流之后，思政课形势稳中向好，期末考查形式可能会逐渐向严发展，建议尽早完成修读</del></p>
<h2 id="基础素质培养模块"><a href="#基础素质培养模块" class="headerlink" title="基础素质培养模块"></a>基础素质培养模块</h2><h3 id="体育类"><a href="#体育类" class="headerlink" title="体育类"></a>体育类</h3><p>一共6门课4学分，需要在选课系统上选择(种类非常丰富建议多选几种体验)，最后两门体育课是没有学分的。</p>
<p>不一定要每学期都选，但毕业需要读完六门体育课，建议跟大多数人一起大一到大三六学期学完。</p>
<h3 id="军训类"><a href="#军训类" class="headerlink" title="军训类"></a>军训类</h3><p>军训通过则大一上期末会自动加进你的已修课程，无需选课。</p>
<p>军训期间正常表现，不要太皮就能过，以及会有一次开卷军事理论考试，正常做态度不太离谱都能过。军训需要重训的是极个别同学。</p>
<h3 id="综合素质类"><a href="#综合素质类" class="headerlink" title="综合素质类"></a>综合素质类</h3><p>不需要在教务系统选课，默认大一完成。</p>
<p>成长通识会在大一学年的周四下午，由书院安排进行成长通识课程，大概是关于大学中如何更好地发展进行的系列教学。</p>
<p>劳动教育也是在大一的周四下午由书院安排，包括但不限于做手工、法制教育等形式的劳动和劳动科普。</p>
<p>这两门课都需要写一篇论文反馈成果，不过都比较轻松。</p>
<h3 id="美育类"><a href="#美育类" class="headerlink" title="美育类"></a>美育类</h3><p>也叫艺术类，需要在选课系统选课，培养方案上列出的课程数量较少，具体可以在选课系统的<strong>开课院系</strong>筛选<strong>艺术中心</strong>即可，选一门两学分的就可以了。</p>
<h2 id="基础能力培养模块"><a href="#基础能力培养模块" class="headerlink" title="基础能力培养模块"></a>基础能力培养模块</h2><h3 id="计算机类"><a href="#计算机类" class="headerlink" title="计算机类"></a>计算机类</h3><p>目前选课系统暂未显示有开设计算机导论课程，因此入学是否有计算机分级考试<u>尚不明确</u>，2022年的计算机分级考试已取消。</p>
<p>计算机课程有五门，其中CS109 计算机程序设计基础为较高阶课程，教学语言为Java，难度较CS110 Java 程序设计基础略高一些。CS110~CS113四门课程设定难度相近，且不同专业会要求不同的进系先修计算机课程，请具体查看各个专业的进系先修要求。</p>
<p>在部分专业培养方案中，修读CS109可以代替CS110~CS113，但<strong>部分专业不接受代替方案</strong>，请仔细阅读培养方案的进系先修要求！</p>
<h3 id="写作类"><a href="#写作类" class="headerlink" title="写作类"></a>写作类</h3><p>需要选课系统自选，只有写作与交流一门pf课，<strong><em><u>非常非常非常</u></em></strong>建议大一修读，会教你如何调整论文格式、如何参考文献、如何作报告、如何用好电子图书馆…务必认真学！不要折磨你的队友，让他收你的论文烂摊子熬夜到三点（</p>
<p>虽然只是pf课，但绝对是非常实用的一门课程，你学的越早，折磨队友折磨的越少。</p>
<h3 id="外语类"><a href="#外语类" class="headerlink" title="外语类"></a>外语类</h3><p>需要选课系统自选。可以确定今年仍然会进行英语分级考试，根据考试结果将同学分为三类以安排最合适的课程。</p>
<ul>
<li><p>A类(不到10%)：</p>
<p>仅需修读SUSTech English Ⅲ 和 English for Academic Purposes(EAP) 和至少一门CLE选修课</p>
</li>
<li><p>B类(大部分同学)：</p>
<p>需修读SUSTech English Ⅱ，SUSTech English Ⅲ 和 EAP 和至少一门CLE选修课</p>
</li>
<li><p>C类：</p>
<p>需修读SUSTech English Ⅰ，SUSTech English Ⅱ，SUSTech English Ⅲ 和 EAP</p>
</li>
</ul>
<p>语言中心(CLE)课程有必修有选修，入学分级考试决定你必修上什么，以及需不需要上选修。</p>
<p>SUSTech English一周两节四学分，EAP一周一节两学分，多学和少学各有优势：</p>
<p>多学两门SUSTech English，给分都很漂亮，可以用来提绩点，不用上选修</p>
<p>少学两门SUSTech English，可以腾出更多的时间和学分选其他课，并且提前结束语言课修读</p>
<h2 id="人文社科基础模块"><a href="#人文社科基础模块" class="headerlink" title="人文社科基础模块"></a>人文社科基础模块</h2><p>毕业要求8学分，国学类2学分，人文2学分，社科2学分，剩余2学分在人文/社科中任选，大一没时间/没学分可以考虑大三大四。</p>
<h2 id="自然科学基础模块"><a href="#自然科学基础模块" class="headerlink" title="自然科学基础模块"></a>自然科学基础模块</h2><p>这是毕业要求，在大四前修读完就行，但是其实很多课都是进系的先修，只有个别不要求，大一没时间可以大三大四补上。</p>
<p>以下每一行选一个就可以了(括号内从易到难)：</p>
<p>(高等微积分，高等数学，数学分析)</p>
<p>(线性代数，高等代数)</p>
<p>(大学物理，普通物理学)</p>
<p>基础物理实验</p>
<p>(大学化学，化学原理)</p>
<p>(生命科学概论，地球科学概论，生物学原理)</p>
<blockquote>
<p>地概与生概难度不太好比较，此处顺序不代表前者比后者难</p>
</blockquote>
<h2 id="通专衔接模块"><a href="#通专衔接模块" class="headerlink" title="通专衔接模块"></a>通专衔接模块</h2><p>通识-专业衔接模块，随便选两学分自己感兴趣的就行。</p>
<h2 id="自然科学基础模块及基础能力培养模块计算机类课程介绍"><a href="#自然科学基础模块及基础能力培养模块计算机类课程介绍" class="headerlink" title="自然科学基础模块及基础能力培养模块计算机类课程介绍"></a>自然科学基础模块及基础能力培养模块计算机类课程介绍</h2><p>这个部分详细介绍了各个通识课程适合的对象，以及教学的大致内容，大家可以参考专业培养方案以及自己的兴趣方向辅助你进行选择。</p>
<h1 id="Part-Ⅱ-各系下设专业情况"><a href="#Part-Ⅱ-各系下设专业情况" class="headerlink" title="Part Ⅱ. 各系下设专业情况"></a>Part Ⅱ. 各系下设专业情况</h1><p>这个在通识培养方案里有，可以看看有没有自己感兴趣的专业awa</p>
<p><img src="https://s2.loli.net/2023/07/28/XUMKN6OwQCgsYt1.png" alt="image.png"></p>
<h1 id="Part-Ⅲ-进系先修要求解读"><a href="#Part-Ⅲ-进系先修要求解读" class="headerlink" title="Part Ⅲ. 进系先修要求解读"></a>Part Ⅲ. 进系先修要求解读</h1><p>每个专业培养方案前面都会简单把通识培养方案重复一遍，这里就跳过了，让我们从专业先修开始吧。</p>
<h2 id="进系模式"><a href="#进系模式" class="headerlink" title="进系模式"></a>进系模式</h2><p>南方科技大学专业选择主要有两个模式：1+3进系和2+2进系，两种选择没有本质差别，也有各自的优点。</p>
<h3 id="1-3进系"><a href="#1-3进系" class="headerlink" title="1+3进系"></a>1+3进系</h3><p>这种模式其实是后来添加的，目前暂时是主流。</p>
<ul>
<li>提前进系，选导师比较自由</li>
<li>更早进行专业课学习（不过其实没进专业也能选专业课</li>
</ul>
<h3 id="2-2进系"><a href="#2-2进系" class="headerlink" title="2+2进系"></a>2+2进系</h3><ul>
<li>有更多的时间了解各个专业（多一年了解不同专业的吐槽</li>
<li>先修课压力较小(平均每学期所需的先修课更少)，可以专心卷绩点</li>
<li><del>可以以通识通修专业的身份卡一些课程的bug降低难度</del></li>
</ul>
<h2 id="先修要求"><a href="#先修要求" class="headerlink" title="先修要求"></a>先修要求</h2><h3 id="简单看一眼"><a href="#简单看一眼" class="headerlink" title="简单看一眼"></a>简单看一眼</h3><p>因为作者是计算机科学与工程系-计算机科学与技术专业本科生，因此这里以2023级计算机科学与技术专业培养方案为例解读。</p>
<p><img src="https://s2.loli.net/2022/08/11/Tmjx3VKvHRLrpIn.png" alt="__U6R__@__S0B5~YPDJQMMS.png" style="zoom:50%;" /></p>
<p>这张表其实说的很清楚了，我就不再重复讲一遍，讲点培养方案没说的。</p>
<h3 id="如果你爱某个专业爱得深沉"><a href="#如果你爱某个专业爱得深沉" class="headerlink" title="如果你爱某个专业爱得深沉"></a>如果你爱某个专业爱得深沉</h3><p>别急，大一一年多跟对应专业的教授聊一聊，一定确认自己喜欢这个专业，想做相关的课题再留下来。</p>
<p>如果你已经确定，那么就一定确认进系前按照培养方案修读完了<strong>所有的先修课</strong>，大部分专业<strong>不允许</strong>不满足进系先修的同学进专业，差一门也不行。</p>
<p>一定想清楚自己进系前怎么排课，比如进系需要电路基础，就必须要第一学期学电路基础的先修：线性代数，第二学期再选电路基础</p>
<p>以及，专业先修不要求你读的课，就没有太大必要大一去选，计系这种需要笔试+面试才能进的系是会看你的先修课成绩的，所以能少选就少选(但是要比15学分高，不要为了专精几门课收到学业警示啊你个混蛋)。</p>
<h3 id="如果你还不清楚自己喜欢什么"><a href="#如果你还不清楚自己喜欢什么" class="headerlink" title="如果你还不清楚自己喜欢什么"></a>如果你还不清楚自己喜欢什么</h3><p>高数大物线代，这几乎是每个专业都会要求的课程，所以可以无脑选。</p>
<p>你可以同时<strong>参考多个专业的培养方案</strong>来安排自己的课程，例如选择<strong>计算机程序设计基础</strong>这种很多专业都有要求的课程。作者在大一结束时，由于在计系要求外多修了很多课，其实满足了十多个专业的先修要求（</p>
<p>不过需要注意的是，人类是有极限的，不要为了给自己更多的选择就每学期顶满25学分，那样的课程压力很少有人能承受住。</p>
<p>南科大为你提供了一年或两年的时间来慢慢了解自己喜欢的专业，在这段时间里可以主动联系实验室、联系教授，多聊聊你也许会发现你真正喜欢的兴趣。</p>
<h2 id="进系考查方式"><a href="#进系考查方式" class="headerlink" title="进系考查方式"></a>进系考查方式</h2><p>现在对于23级的进系考查各种解读都有，先来看看培养方案原文：</p>
<blockquote>
<ol>
<li>如本院系所有专业第一学年结束时进专业的学生总人数大于等于该院系教研系列教师（PI）总人数*2*60%，则该院系所有专业可以针对第二学年结束时申请进专业的学生执行所设置的进专业课程要求； </li>
<li>如本院系所有专业第一学年结束时进专业的学生总人数小于该院系教研系列教师（PI）总人数*2*60%，则该院系所有专业针对第二学年结束时申请进专业的学生不执行所设置的进专业课程要求； </li>
<li>如第一学年结束时申请进专业的学生人数超过该院系教研系列教师（PI）总人数的 4 倍，则该院系可以按照事先确定的规则选拔学生。确定规则时原则上考察学生的专业适应性，不以学分绩为依据（具体规则由院系制定并提前公布）。</li>
<li>针对第二学年结束时进专业的学生不执行设置要求的院系，如果第二学年结束时申请进专业的学生人数和第一学年结束时已经进专业的学生人数累计超过该院系教研系列教师（PI）总人数的 4 倍，则该院系可以按照事先确定的规则在申请进专业的学生中进行选拔学生。确定规则时原则上考察学生的专业适应性，不以学分绩为依据（具体规则由院系制定并提前公布）。</li>
</ol>
</blockquote>
<p>$\frac{申请人数}{PI人数}$这个比值是对1+3和2+2两种进系方式能否进行考察的判定标准，以下分几种情况：</p>
<ol>
<li><p>第一年&lt;1.2，第二年累计≤4</p>
<p>PI人数最充裕的情况，第二年申请进系可以不满足先修课要求。</p>
</li>
<li><p>第一年<1.2，第二年累计>4</p>
<p>1+3默默无闻，2+2人数激增，则院系可以对2+2进行选拔(但也没说要满足先修)。</p>
<p>适用于大家第一年全部潜水，都想不读进系先修第二年进系的情况(^^</p>
<p>不过如果不是上百人合谋的话，大约是不可能发生的吧(笑)</p>
</li>
<li><p>第一年≥1.2</p>
<p>2+2需要满足先修课，最正常的情况。</p>
<p>如果第二年累计&gt;4院系还是可以设置选拔的。</p>
</li>
<li><p>第一年&gt;4</p>
<p>某些大系特供的条例，1+3人数爆满是允许院系设置选拔的。</p>
<p>像这种申请人数多到不行的院系果然设置一点门槛才是对的吧喂= =</p>
</li>
</ol>
<h1 id="Part-IV-专业课安排"><a href="#Part-IV-专业课安排" class="headerlink" title="Part IV. 专业课安排"></a>Part IV. 专业课安排</h1><h2 id="专业课程教学安排一览表"><a href="#专业课程教学安排一览表" class="headerlink" title="专业课程教学安排一览表"></a>专业课程教学安排一览表</h2><p>这部分是培养方案最不讲谜语的部分，说的都很清楚，这里主要提几个问题，大家可以带着问题，结合选课系统看培养方案</p>
<ol>
<li>这门课是必修的吗？在什么时候一定要上？</li>
<li>这门课是全英文吗？有哪些老师教？</li>
<li>这门课多少学分？有没有实验课？作业和project占多少总评？</li>
<li>这门课建议什么时间上？春秋都开吗？有没有先修？先修排哪个学期？</li>
</ol>
<p>对着培养方案上的课，一口气把上面的问题全回答出来，你差不多就做好了选专业课的准备了。</p>
<p>一点补充：</p>
<p><strong>专业基础课</strong>、<strong>专业核心课</strong>和<strong>集中实践课程</strong>在毕业时都需要全部修读，合称为<strong>专业必修课</strong>；</p>
<p><strong>专业选修课</strong>则是给定毕业所需学分要求(有时候也有几门课中选几门修读的要求)，学生可以在列表中根据自己的兴趣、研究方向自行进行选择修读的课程。</p>
<h2 id="课程结构图"><a href="#课程结构图" class="headerlink" title="课程结构图"></a>课程结构图</h2><p>其实想了解一个专业上什么课，最简单的办法是翻到最后看课程结构图，简单明了，排课的时候这张图也很管用。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>介绍到这里你应该就能完全读懂培养方案了。</p>
<p>毕竟培养方案厚是厚，但是每个专业就那么几页，重复的部分挺多的，去年我无聊的时候把整本书翻了一遍（</p>
<p>比较建议选课前多翻翻，考虑一下自己的选课和意向专业之间的对应关系，规划能力还是很重要的。</p>
]]></content>
      <categories>
        <category>SUSTech</category>
      </categories>
      <tags>
        <tag>妮可指南</tag>
      </tags>
  </entry>
  <entry>
    <title>CS329 Machine Learning Notes</title>
    <url>/2023/09/12/CS329_Notes/</url>
    <content><![CDATA[<h2 id="Outline"><a href="#Outline" class="headerlink" title="Outline"></a>Outline</h2><ol>
<li>Introduction</li>
<li>Preliminary</li>
<li>Distributions</li>
<li>Linear Models for Regression</li>
<li>Linear Models for Classification</li>
</ol>
<h2 id="Chapter-1-Introduction"><a href="#Chapter-1-Introduction" class="headerlink" title="Chapter 1 - Introduction"></a>Chapter 1 - Introduction</h2><h3 id="Concepts"><a href="#Concepts" class="headerlink" title="Concepts"></a>Concepts</h3><ul>
<li><strong>Machine Learning</strong>—minimization of some loss function for generalizing data sets with models.</li>
<li><strong>Datasets</strong>—annotated, indexed, organized</li>
<li><strong>Models</strong>—tree, distance, probabilistic, graph, bio-inspired</li>
<li><strong>Optimization</strong>—algorithms can minimize the loss</li>
</ul>
<h3 id="Linear-Optimization-Model"><a href="#Linear-Optimization-Model" class="headerlink" title="Linear Optimization Model"></a>Linear Optimization Model</h3><script type="math/tex; mode=display">
Y=AX+W,\quad W\sim \mathbf N(0,R)\\
L(x)=\frac 1 2 (Y-AX)^\text TR^{-1}(Y-AX)\\</script><p>Find $X^\star$ to minimize the loss function:</p>
<script type="math/tex; mode=display">
\begin{align*}
&X^\star=\min\limits_X(Y-AX)^\text TR^{-1}(Y-AX)\\
&\text {Let } \frac{\partial}{\partial X^\text T}(Y-AX)^\text TR^{-1}(Y-AX)=0\\
&\Rightarrow X^\star = (A^\text T R^{-1}A)A^{\text T}R^{-1}Y
\end{align*}</script><h3 id="Euclidean-Distance-Optimization"><a href="#Euclidean-Distance-Optimization" class="headerlink" title="Euclidean Distance Optimization"></a>Euclidean Distance Optimization</h3><p>Point $x_0$, model $\mathbf b^\text Tx=d$.</p>
<script type="math/tex; mode=display">
x^\star = \min\limits_{x}(x-x_0)^\text T(x-x_0), \text{s.t.}\ \mathbf{b}^\text Tx-d=0</script><p>We have:</p>
<script type="math/tex; mode=display">
\begin{align*}
d&=\mathbf b^\text T(x_0-\lambda \mathbf b)\\
\lambda &= \frac{\mathbf b^\text Tx_0-d}{\mathbf b^\text T\mathbf b}
\end{align*}</script><p>Lagrange optimization:</p>
<script type="math/tex; mode=display">
\begin{align*}
L(x,\lambda)&=\frac 1 2 (x-x_0)^\text T(x-x_0)+\lambda(\mathbf b^\text Tx-d)\\
\frac{\partial L}{\partial x^\text T}&=x^\star-x_0+\lambda \mathbf b=0\\
x^\star&=x_0-\frac{(\mathbf b^\text Tx_0-d)\mathbf b}{\mathbf b^\text T\mathbf b}
\end{align*}</script><h3 id="Convex-Optimization"><a href="#Convex-Optimization" class="headerlink" title="Convex Optimization"></a>Convex Optimization</h3><h4 id="Unconstrained-optimization"><a href="#Unconstrained-optimization" class="headerlink" title="Unconstrained optimization"></a>Unconstrained optimization</h4><h5 id="Gradient-descent"><a href="#Gradient-descent" class="headerlink" title="Gradient descent"></a>Gradient descent</h5><script type="math/tex; mode=display">
f(x_{t+1})=f(x_t)-\eta\nabla f(x_t)^\text T(x-x_t)</script><h5 id="Gauss-Newton’s-Method"><a href="#Gauss-Newton’s-Method" class="headerlink" title="Gauss-Newton’s Method"></a>Gauss-Newton’s Method</h5><p>Use a second-order approximation to function:</p>
<script type="math/tex; mode=display">
f(x+\Delta x)\approx f(x)+\nabla f(x)^\text T\Delta x+\frac 1 2 \Delta x^\text T\nabla^2f(x)\Delta x</script><p>Choose $\Delta x$ to minimize above:</p>
<script type="math/tex; mode=display">
\Delta x=-[\nabla^2f(x)]^{-1}\nabla f(x)</script><p>Descent direction:</p>
<script type="math/tex; mode=display">
\nabla f(x)^\text T\Delta x= -\nabla f(x)^\text T[\nabla^2f(x)]^{-1}\nabla f(x)<0</script><h5 id="Batch-Gradient-Descent"><a href="#Batch-Gradient-Descent" class="headerlink" title="Batch Gradient Descent"></a>Batch Gradient Descent</h5><p>Minimize empirical loss, assuming it’s convex and unconstrained.</p>
<ul>
<li>Gradient descent on the empirical loss</li>
<li>Gradient is the average of the gradient for all samples</li>
<li>Very slow when $n$ is very large</li>
</ul>
<script type="math/tex; mode=display">
w^{k+1}\leftarrow w^k-\eta_t(\frac1 n \sum\limits_{i=1}^n\frac{\partial L(w,x_i,y_i)}{\partial w})</script><h5 id="Stochastic-Gradient-Descent"><a href="#Stochastic-Gradient-Descent" class="headerlink" title="Stochastic Gradient Descent"></a>Stochastic Gradient Descent</h5><p>Compute gradient from just one or a few samples</p>
<script type="math/tex; mode=display">
w^{k+1}\leftarrow w^k-\eta_t \frac{\partial L(w,x_i,y_i)}{\partial w}</script><h4 id="Constrained-optimization"><a href="#Constrained-optimization" class="headerlink" title="Constrained optimization"></a>Constrained optimization</h4><ul>
<li>Lagrange methods</li>
<li>Bayesian methods</li>
</ul>
<h3 id="Non-convex-Optimization"><a href="#Non-convex-Optimization" class="headerlink" title="Non-convex Optimization"></a>Non-convex Optimization</h3><ul>
<li>Heuristic algorithms</li>
<li>Random search</li>
</ul>
<h3 id="Algorithms"><a href="#Algorithms" class="headerlink" title="Algorithms"></a>Algorithms</h3><ul>
<li>Bayes</li>
<li>KNN</li>
<li>K-means</li>
<li>Decision Tree</li>
<li>SVM</li>
<li>Boosting</li>
<li>Ensemble Learning</li>
<li>Linear Statistical Learning</li>
<li>Nonlinear Statistical Learning</li>
<li>Deep Neural Networks</li>
<li>Generative Adversarial Networks</li>
<li>Bayesian Networks</li>
<li>Reinforcement Learning</li>
<li>Federated Learning</li>
</ul>
<h2 id="Chapter-2-Preliminary"><a href="#Chapter-2-Preliminary" class="headerlink" title="Chapter 2 - Preliminary"></a>Chapter 2 - Preliminary</h2><h3 id="Curve-Fitting-and-Regularization"><a href="#Curve-Fitting-and-Regularization" class="headerlink" title="Curve Fitting and Regularization"></a>Curve Fitting and Regularization</h3><p><strong>Polynomial Curve Fitting</strong></p>
<script type="math/tex; mode=display">
y(x,\mathbf{w})=w_{0}+w_{1}x+w_{2}x+...+w_Mx^M=\sum^M_{i=0}w_ix^i</script><p><strong>Sum-of-Squares Error Function</strong></p>
<script type="math/tex; mode=display">
E(\mathbf w)=\frac 1 2 \sum\limits_{n=1}^N\{y(x_n,\mathbf w)-t_n\}^2</script><p><strong>Root-Mean-Square (RMS) Error</strong></p>
<script type="math/tex; mode=display">
E_{\text{RMS}}=\sqrt{2E(\mathbf w^\star)/N}</script><p>where $\mathbf w^\star=\mathop{\text{argmin}}\limits_{\bf w}\ E(\bf w)$.</p>
<p><strong>Regularization</strong></p>
<p>Discourage the coefficients from reaching large values.</p>
<script type="math/tex; mode=display">
\tilde E(\mathbf w)=\frac 1 2 \sum\limits_{n=1}^N\{y(x_n,\mathbf w)-t_n\}^2 + {\color{red}\frac{\lambda}2 \| \mathbf w \| ^2}</script><p>where $|{\bf w}|={\bf w}^T{\bf w}=w_0^2+w_1^2+\cdots+w_M^2$. </p>
<blockquote>
<p>Note that often the coefficient $w_0$ is omitted from the regularizer because its inclusion causes the results to depend on the choice of origin for the target variable (Hastie et al., 2001), or it may be included but with its own regularization coefficient</p>
</blockquote>
<h3 id="Probabilities-Theory"><a href="#Probabilities-Theory" class="headerlink" title="Probabilities Theory"></a>Probabilities Theory</h3><h4 id="Basic-Concepts"><a href="#Basic-Concepts" class="headerlink" title="Basic Concepts"></a>Basic Concepts</h4><ul>
<li><p>Marginal/Joint/Conditional Probability</p>
</li>
<li><p>Sum/Product Rule</p>
</li>
<li><p>Probability Densities</p>
</li>
<li><p>Bayes’ Theorem</p>
<script type="math/tex; mode=display">
p(Y\vert X)=\frac{p(X\vert Y)p(Y)}{p(X)}</script></li>
<li><p>Prior/Posterior Probability</p>
</li>
<li><p>Transformed Densities</p>
<script type="math/tex; mode=display">
\begin{align*}
p_y(y)&=p_x(x)|\frac{dx}{dy}|\\
&=p_x(g(y))|g\prime(y)|
\end{align*}</script></li>
<li><p>Expectations</p>
</li>
<li><p>Variances and Covariances</p>
</li>
</ul>
<h4 id="Gaussian-Distribution"><a href="#Gaussian-Distribution" class="headerlink" title="Gaussian Distribution"></a>Gaussian Distribution</h4><ul>
<li><p>The Gaussian Distribution</p>
<script type="math/tex; mode=display">
\mathcal N(x|\mu,\sigma^2)=\frac 1 {(2\pi\sigma^2)^{1/2}}\exp\left\{-\frac 1 {2\sigma^2}(x-\mu)^2\right\}</script></li>
<li><p>Gaussian Mean and Variance</p>
<script type="math/tex; mode=display">
\begin{align*}
\mathbb E[x]&=\int_{-\infty}^\infty \mathcal N(x\vert \mu,\sigma^2)x dx = \mu\\
\mathbb E[x^2]&=\int_{-\infty}^\infty \mathcal N(x\vert \mu,\sigma^2)x^2 dx = \mu^2 + \sigma^2\\
\text{var}[x]&=\mathbb E[x^2]-\mathbb E[x]^2 = \sigma^2
\end{align*}</script></li>
<li><p><a name="multigaussian">The Multivariate Gaussian</a></p>
<script type="math/tex; mode=display">
\mathcal N(\mathbf x|\mathbf\mu,\mathbf\Sigma)=\frac 1 {(2\pi)^{D/2}}\frac 1 {|\mathbf\Sigma|^{1/2}}\exp\left\{-\frac 1 2(\mathbf x-\mathbf\mu)^\text T\mathbf\Sigma^{-1}(\mathbf x - \mathbf \mu)\right\}</script></li>
</ul>
<h4 id="Likelihood-Function"><a href="#Likelihood-Function" class="headerlink" title="Likelihood Function"></a>Likelihood Function</h4><p>For a data set of independent observations $\mathbf x = (x_1,\cdots,x_N)^\text T$ of a Gaussian Distribution, its likelihood function is</p>
<script type="math/tex; mode=display">
p(\mathbf x \vert \mu,\sigma^2)=\prod\limits_{n=1}^N\mathcal N(x_n\vert\mu,\sigma^2)</script><p>Log Likelihood Function: </p>
<script type="math/tex; mode=display">
\ln p(\mathbf x|\mu,\sigma^2)=-\frac 1 {2\sigma^2}\sum\limits_{n=1}^N(x_n-\mu)^2 - \frac{N}2 \ln \sigma^2-\frac{N}2 \ln(2\pi)</script><p>By maximizing the log likelihood function, we have</p>
<script type="math/tex; mode=display">
\mu_{ML}=\frac 1 N \sum\limits_{n=1}^N x_n,\quad \sigma^2_{ML}=\frac 1 N  \sum\limits_{n=1}^N (x_n-\mu_{ML})^2</script><p>corresponding to the <strong>sample mean</strong> and the <strong>sample variance</strong>.</p>
<h4 id="Properties-of-mu-ML-and-sigma-2-ML"><a href="#Properties-of-mu-ML-and-sigma-2-ML" class="headerlink" title="Properties of $\mu_{ML}$ and $\sigma^2_{ML}$"></a>Properties of $\mu_{ML}$ and $\sigma^2_{ML}$</h4><p>The MLE will obtain the correct mean but will underestimate the true variance by a factor $\frac{N-1}{N}$ (bias).</p>
<script type="math/tex; mode=display">
\begin{align*}
\mathbb E[\mu_{ML}]&=\mu\\
\mathbb E[\sigma^2_{ML}]&=(\frac{N-1}N)\sigma^2\\
\widetilde \sigma^2&= (\frac N{N-1})\sigma^2_{ML}\\
&=\frac 1{N-1} \sum\limits_{n=1}^N (x_n-\mu_{ML})^2
\end{align*}</script><h4 id="Curve-fitting-re-visited"><a href="#Curve-fitting-re-visited" class="headerlink" title="Curve fitting re-visited"></a>Curve fitting re-visited</h4><p>Given $x$, the corresponding value of $t$ has a Gaussian distribution with a mean equal to the value $y(x, \mathbf w)$.</p>
<script type="math/tex; mode=display">
p(t\vert x,\mathbf w,\beta)=\mathcal N(t\vert y(x,\mathbf w),\beta^{-1})</script><p>where $\beta$ is the precision parameter corresponding to the inverse variance of the distribution: $\beta^{-1}=\sigma^2$.</p>
<p>Training data:</p>
<ul>
<li>Input values $\mathbf x=(x_1,\cdots,x_N)^\text T$</li>
<li>Target values $\mathbf t=(t_1,\cdots,t_N)^\text T$</li>
</ul>
<p><a name="likeli">Likelihood function</a>:</p>
<script type="math/tex; mode=display">
p(\mathbf t\vert \mathbf x,\mathbf w,\beta)=\prod\limits_{n=1}^N\mathcal N(t_n\vert y(x_n,\mathbf w),\beta^{-1})</script><p>Log likelihood function:</p>
<script type="math/tex; mode=display">
\ln p(\mathbf t\vert \mathbf x,\mathbf w,\beta)=-\frac\beta 2 \sum\limits_{n=1}^N\{y(x_n,\mathbf w)-t_n\}^2+\frac N 2 \ln \beta -\frac N 2 \ln(2\pi)</script><ul>
<li>The last two terms do not depend on $\bf w$, omitted.</li>
<li>Dividing a positive constant $\beta$ does not alter $\mathbf w_{ML}$, replace $\frac \beta 2$ with $\frac 1 2$.</li>
</ul>
<p>So <strong>maximizing the likelihood function</strong> is equivalent to <strong>minimizing the sum-of-squares error function</strong> $\sum\limits_{n=1}^N\{y(x_n,\mathbf w)-t_n\}^2$.</p>
<p>After obtaining $\mathbf w_{ML}$, we can further maximize the likelihood function w.r.t. $\beta$:</p>
<script type="math/tex; mode=display">
\frac 1 {\beta_{ML}}=\sum\limits_{n=1}^N\{y(x_n,\mathbf w_{ML})-t_n\}^2</script><p>Substitute $\mathbf w_{ML}$ and $\beta_{ML}$ back to get <a name="predictive_distribution"><strong>predictive distribution</strong></a>:</p>
<script type="math/tex; mode=display">
p(\mathbf t\vert \mathbf x,\mathbf w_{ML},\beta_{ML})=\prod\limits_{n=1}^N\mathcal N(t_n\vert y(x_n,\mathbf w_{ML}),\beta^{-1}_{ML})</script><h4 id="MAP-Maximum-Posteriori"><a href="#MAP-Maximum-Posteriori" class="headerlink" title="MAP: Maximum Posteriori"></a>MAP: Maximum Posteriori</h4><p><a name="prior">The prior distribution</a>:</p>
<script type="math/tex; mode=display">
p(\mathbf w\vert \alpha)=\mathcal N(\mathbf w|\mathbf 0,\alpha^{-1}\mathbf I)=(\frac\alpha{2\pi})^{(M+1)/2} \exp\{-\frac\alpha 2 \mathbf w^\text{T}\mathbf w\}</script><p>Review: <a href="#multigaussian">the Multivariate Gaussian</a>:</p>
<p>where $\alpha$ is the precision of the distribution(<em>hyperparameter</em>), and $M+1$ is the total number of elements in the vector $\bf w$ for an $M^\text{th}$ order polynomial.</p>
<p>Bayes’ Theorem: the posterior distribution for $\bf w$ is proportional to the product of the prior distribution and the likelihood function.</p>
<p><a name="posterior">The posterior distribution</a>:</p>
<script type="math/tex; mode=display">
\begin{align*}
&p(\mathbf w \vert\mathbf x,\mathbf t,\alpha,\beta)&\propto\quad&p(\mathbf t\vert \mathbf x,\mathbf w,\beta)&p(\mathbf w\vert\alpha)\\
&\text{posteriori}&\propto\quad&\text{likelihood}&\text{priori}
\end{align*}</script><p>Take the logarithm of the rhs, we already know the <a href="#likeli">likelihood function</a> and <a href="#prior">prior distribution</a> mentioned above, therefore maximizing posterior is to minimizing the following:</p>
<script type="math/tex; mode=display">
\frac\beta 2\sum\limits_{n=1}^N\{y(x_n,\mathbf w)-t_n\}^2+\frac\alpha 2 \mathbf w^\text{T}\mathbf w</script><p><strong>Maximizing the posterior distribution</strong> is equivalent to <strong>minimizing the regularized sum-of-squares error function</strong>, with regularization parameter $\lambda = \frac\alpha\beta$.</p>
<h4 id="Bayesian-Curve-Fitting"><a href="#Bayesian-Curve-Fitting" class="headerlink" title="Bayesian Curve Fitting"></a>Bayesian Curve Fitting</h4><p>Assume that the parameters $\alpha$ and $\beta$ are fixed and known in advance.</p>
<p>In Bayesian treatment, the predictive distribution can be written as:</p>
<script type="math/tex; mode=display">
p(t\vert x,\mathbf x, \mathbf t)=\int p(t\vert x,\mathbf w)p(\mathbf w\vert\mathbf x,\mathbf t)\text d\mathbf w</script><p>$p(t\vert x,\mathbf x, \mathbf t)$ is the <a href="#likeli">likelihood function</a> with omitted dependence on  $\alpha$ and $\beta$ .</p>
<p>$p(\mathbf w\vert\mathbf x,\mathbf t)$ is the <a href="#posterior">posterior distribution</a> which can be found by normalizing the rhs.</p>
<blockquote>
<p>For problems such as curve-fitting, this posterior distribution is a Gaussian and can be evaluated analytically. Similarly, the integration can also be performed analytically.</p>
</blockquote>
<p>The predictive distribution is given by a Gaussian of the form</p>
<script type="math/tex; mode=display">
p(t\vert x,\mathbf x,\mathbf t)=\mathcal N(t\vert m(x),s^2(x))</script><p>where the mean and variance are given by</p>
<script type="math/tex; mode=display">
\begin{align*}
m(x)&=\beta\phi(x)^\text T\textbf S\sum\limits_{n=1}^N \phi(x_n)t_n\\
s^2(x)&=\beta^{-1}+\phi(x)^\text T\textbf S\phi(x)
\end{align*}</script><p>Here the matrix $\textbf S$ is given by</p>
<script type="math/tex; mode=display">
\textbf S^{-1}=\alpha \textbf I + \beta\sum\limits_{n=1}^N\phi(x_n)\phi(x)^\text T</script><p>where $\textbf I$ is the unit matrix, the vector $\phi(x)$ with elements $\phi_i(x)=x^i$ for $i=0,\cdots,M$.</p>
<ul>
<li>The variance and the mean depend on $x$.</li>
<li>$\beta^{-1}$ represents the uncertainty in the predicted value of $t$, expressed in the <a href="#predictive_distribution">maximum likelihood predictive distribution</a> through $\beta^{-1}_{ML}$.</li>
<li>$\phi(x)^\text T\textbf S\phi(x)$ arises from the uncertainty in $\mathbf w$ and is a consequence of the Bayesian treatment.</li>
</ul>
<h3 id="Model-Selection"><a href="#Model-Selection" class="headerlink" title="Model Selection"></a>Model Selection</h3><p>S-fold Cross Validation</p>
<p><img src="https://s2.loli.net/2023/10/08/sa2LJItkVQEUCeS.png" alt="image.png" style="zoom: 50%;" /></p>
<p><em>leave-one-out</em>: $S=N$</p>
<h3 id="Curse-of-Dimensionality"><a href="#Curse-of-Dimensionality" class="headerlink" title="Curse of Dimensionality"></a>Curse of Dimensionality</h3><script type="math/tex; mode=display">
y(\mathbf x,\mathbf w)=w_0+\sum\limits_{i=1}^D w_ix_i+\sum\limits_{i=1}^D\sum\limits_{j=1}^Dw_{ij}x_ix_j+\sum\limits_{i=1}^D\sum\limits_{j=1}^D\sum\limits_{k=1}^Dw_{ijk}x_ix_jx_k+\cdots</script><p>For a polynomial of order $M$, the growth in the number of coefficients is $D^M$.</p>
<p>In spaces of high dimensionality, most of the volume of a sphere is concentrated in a thin shell near the surface, most of the probability mass of a Gaussian is located within a thin shell at a specific radius.</p>
<p><img src="https://s2.loli.net/2023/10/08/QfxjJAYzwHd8TVe.png" alt="image.png" style="zoom: 67%;" /></p>
<h3 id="Decision-Theory"><a href="#Decision-Theory" class="headerlink" title="Decision Theory"></a>Decision Theory</h3><h4 id="Confusion-Matrix"><a href="#Confusion-Matrix" class="headerlink" title="Confusion Matrix"></a>Confusion Matrix</h4><div class="table-container">
<table>
<thead>
<tr>
<th>Truth/Decision</th>
<th>Positive</th>
<th>Negative</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Positive</strong></td>
<td>TP</td>
<td>FN</td>
</tr>
<tr>
<td><strong>Negative</strong></td>
<td>FP</td>
<td>TN</td>
</tr>
</tbody>
</table>
</div>
<p><img src="https://s2.loli.net/2023/10/08/frI2BYLVbCgKNkc.png" alt="image.png" style="zoom:50%;" /></p>
<h4 id="Receiver-Operating-Characteristic-Curve"><a href="#Receiver-Operating-Characteristic-Curve" class="headerlink" title="Receiver Operating Characteristic Curve"></a>Receiver Operating Characteristic Curve</h4><p><img src="https://s2.loli.net/2023/10/08/Edem7OF3T8hXSaU.png" alt="image.png" style="zoom: 33%;" /></p>
<h4 id="Minimizing-the-misclassification-rate"><a href="#Minimizing-the-misclassification-rate" class="headerlink" title="Minimizing the misclassification rate"></a>Minimizing the misclassification rate</h4><p><img src="https://s2.loli.net/2023/10/08/YCeVcwDHuzB4i3k.png" alt="image.png"></p>
<script type="math/tex; mode=display">
\begin{align*}
p(\text{correct})&=\sum\limits_{k=1}^Kp(\mathbf x\in\mathcal R_k,\mathcal C_k) = \sum\limits_{k=1}^K\int_{\mathcal R_k} p(\mathbf x,\mathcal C_k)\text d \mathbf x\\
\end{align*}</script><h4 id="Minimizing-the-expected-loss"><a href="#Minimizing-the-expected-loss" class="headerlink" title="Minimizing the expected loss"></a>Minimizing the expected loss</h4><script type="math/tex; mode=display">
\mathbb E[L]=\sum\limits_k\sum\limits_j\int_{\mathcal R_j}L_{kj}p(\mathbf x,\mathcal C_k)\text d \mathbf x</script><p>Each $\mathbf x$ can be assigned  independently to one of the decision regions $\mathcal R_j$.</p>
<p>Goal is to choose $\mathcal R_j$ to minimize $\mathbb E[L]$, we should minimize $\sum\limits_{k} L_{kj}p(\mathbf x,\mathcal C_k)$ for each $\mathbf x$.</p>
<p>Common factor $p(\mathbf x)$ can be eliminated from $p(\mathbf x,\mathcal C_k)=p(\mathcal C_k\vert\mathbf x)p(\mathbf x)$.</p>
<p>Thus the decision rule that minimizes the expected loss is the one that assigns each new $\mathbf x$ to the class $j$ for which the quantity $\sum\limits_{k} L_{kj}p(\mathcal C_k\vert\mathbf x)$ is a minimum.</p>
<h4 id="Reject-Option"><a href="#Reject-Option" class="headerlink" title="Reject Option"></a>Reject Option</h4><p>Introducing a threshold $\theta$ and rejecting those inputs $x$ for which the largest of the posterior probabilities $p(\mathcal C_k\vert \mathbf x)$ is less than or equal to $\theta$. </p>
<ul>
<li>$\theta=1$: all examples are rejected.</li>
<li>$\theta&lt;\frac 1 K$: ($K$ classes) no examples are  rejected.</li>
</ul>
<p><img src="https://s2.loli.net/2023/10/08/yoqniUgpIN5b71F.png" alt="image.png" style="zoom:50%;" /></p>
<h4 id="Inference-and-Decision"><a href="#Inference-and-Decision" class="headerlink" title="Inference and Decision"></a>Inference and Decision</h4><p><strong>Generative model</strong>: Model the distribution of inputs as well as outputs. Because by sampling from them it is possible to generate synthetic data points in the input space.</p>
<p><strong>Discriminative model</strong>: model the posterior probabilities directly.</p>
<p><strong>Discriminant function</strong>: Learn a function that maps inputs x directly into decisions.</p>
<p><a name="3-ways-to-solve-decision-problems"><strong>3 Ways to Solve Decision Problems</strong></a></p>
<ul>
<li><p>(a)    By inference, determine $p(\mathbf x\vert \mathcal C_k)$ and $p(\mathcal C_k)$, then uses Bayes’ Theorem</p>
<script type="math/tex; mode=display">
p(\mathcal C_k\vert\mathbf x)=\frac{p(\mathbf x\vert\mathcal C_k)p(\mathcal C_k)}{p(\mathbf x)}=\frac{p(\mathbf x\vert\mathcal C_k)p(\mathcal C_k)}{\sum\limits_{k}p(\mathbf x\vert\mathcal C_k)p(\mathcal C_k)}=\frac{p(\mathbf x,\mathcal C_k)}{\sum\limits_{k}p(\mathbf x,\mathcal C_k)}</script><p>Equivalently, we can model the joint distribution $p(\mathbf x, \mathcal C_k)$ directly and then normalize to obtain the posterior probabilities.  (generative model)</p>
</li>
<li><p>(b)    By inference, determine the posterior class probabilities $p(\mathcal C_k\vert\mathbf x)$ directly. (discriminative model)</p>
</li>
<li>(c)    Find a function $f(x)$, called a <strong>discriminant function</strong>, which maps each input $\mathbf x$ directly onto a class label. <em>Probabilities play no role.</em></li>
</ul>
<details>
    <summary>Pros/Cons of the three approaches(extract from PRML)</summary>
    <p>Let us consider the relative merits of these three alternatives. Approach (a) is the most demanding because it involves finding the joint distribution over both <mjx-container class="MathJax CtxtMenu_Attached_0" jax="CHTML" tabindex="0" ctxtmenu_counter="79" style="font-size: 122.1%; position: relative;"><mjx-math class="MJX-TEX" aria-hidden="true"><mjx-texatom texclass="ORD"><mjx-mi class="mjx-b"><mjx-c class="mjx-c1D431 TEX-B"></mjx-c></mjx-mi></mjx-texatom></mjx-math><mjx-assistive-mml unselectable="on" display="inline"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow data-mjx-texclass="ORD"><mi mathvariant="bold">x</mi></mrow></math></mjx-assistive-mml></mjx-container> and <mjx-container class="MathJax CtxtMenu_Attached_0" jax="CHTML" tabindex="0" ctxtmenu_counter="80" style="font-size: 122.1%; position: relative;"><mjx-math class="MJX-TEX" aria-hidden="true"><mjx-msub><mjx-texatom texclass="ORD"><mjx-mi class="mjx-cal mjx-i"><mjx-c class="mjx-c43 TEX-C"></mjx-c></mjx-mi></mjx-texatom><mjx-script style="vertical-align: -0.15em;"><mjx-mi class="mjx-i" size="s"><mjx-c class="mjx-c1D458 TEX-I"></mjx-c></mjx-mi></mjx-script></mjx-msub></mjx-math><mjx-assistive-mml unselectable="on" display="inline"><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow data-mjx-texclass="ORD"><mi data-mjx-variant="-tex-calligraphic" mathvariant="script">C</mi></mrow><mi>k</mi></msub></math></mjx-assistive-mml></mjx-container>. For many applications, <mjx-container class="MathJax CtxtMenu_Attached_0" jax="CHTML" tabindex="0" ctxtmenu_counter="81" style="font-size: 122.1%; position: relative;"><mjx-math class="MJX-TEX" aria-hidden="true"><mjx-texatom texclass="ORD"><mjx-mi class="mjx-b"><mjx-c class="mjx-c1D431 TEX-B"></mjx-c></mjx-mi></mjx-texatom></mjx-math><mjx-assistive-mml unselectable="on" display="inline"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow data-mjx-texclass="ORD"><mi mathvariant="bold">x</mi></mrow></math></mjx-assistive-mml></mjx-container> will have high dimensionality, and consequently we may need a large training set in order to be able to determine the class-conditional densities to reasonable accuracy. Note that the class priors <mjx-container class="MathJax CtxtMenu_Attached_0" jax="CHTML" tabindex="0" ctxtmenu_counter="82" style="font-size: 122.1%; position: relative;"><mjx-math class="MJX-TEX" aria-hidden="true"><mjx-mi class="mjx-i"><mjx-c class="mjx-c1D45D TEX-I"></mjx-c></mjx-mi><mjx-mo class="mjx-n"><mjx-c class="mjx-c28"></mjx-c></mjx-mo><mjx-msub><mjx-texatom texclass="ORD"><mjx-mi class="mjx-cal mjx-i"><mjx-c class="mjx-c43 TEX-C"></mjx-c></mjx-mi></mjx-texatom><mjx-script style="vertical-align: -0.15em;"><mjx-mi class="mjx-i" size="s"><mjx-c class="mjx-c1D458 TEX-I"></mjx-c></mjx-mi></mjx-script></mjx-msub><mjx-mo class="mjx-n"><mjx-c class="mjx-c29"></mjx-c></mjx-mo></mjx-math><mjx-assistive-mml unselectable="on" display="inline"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>p</mi><mo stretchy="false">(</mo><msub><mrow data-mjx-texclass="ORD"><mi data-mjx-variant="-tex-calligraphic" mathvariant="script">C</mi></mrow><mi>k</mi></msub><mo stretchy="false">)</mo></math></mjx-assistive-mml></mjx-container> can often be estimated simply from the fractions of the training set data points in each of the classes. One advantage of approach (a), however, is that it also allows the marginal density of data <mjx-container class="MathJax CtxtMenu_Attached_0" jax="CHTML" tabindex="0" ctxtmenu_counter="83" style="font-size: 122.1%; position: relative;"><mjx-math class="MJX-TEX" aria-hidden="true"><mjx-mi class="mjx-i"><mjx-c class="mjx-c1D45D TEX-I"></mjx-c></mjx-mi><mjx-mo class="mjx-n"><mjx-c class="mjx-c28"></mjx-c></mjx-mo><mjx-texatom texclass="ORD"><mjx-mi class="mjx-b"><mjx-c class="mjx-c1D431 TEX-B"></mjx-c></mjx-mi></mjx-texatom><mjx-mo class="mjx-n"><mjx-c class="mjx-c29"></mjx-c></mjx-mo></mjx-math><mjx-assistive-mml unselectable="on" display="inline"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>p</mi><mo stretchy="false">(</mo><mrow data-mjx-texclass="ORD"><mi mathvariant="bold">x</mi></mrow><mo stretchy="false">)</mo></math></mjx-assistive-mml></mjx-container> to be determined from <mjx-container class="MathJax CtxtMenu_Attached_0" jax="CHTML" tabindex="0" ctxtmenu_counter="84" style="font-size: 122.1%; position: relative;"><mjx-math class="MJX-TEX" aria-hidden="true"><mjx-mi class="mjx-i"><mjx-c class="mjx-c1D45D TEX-I"></mjx-c></mjx-mi><mjx-mo class="mjx-n"><mjx-c class="mjx-c28"></mjx-c></mjx-mo><mjx-texatom texclass="ORD"><mjx-mi class="mjx-b"><mjx-c class="mjx-c1D431 TEX-B"></mjx-c></mjx-mi></mjx-texatom><mjx-mo class="mjx-n"><mjx-c class="mjx-c29"></mjx-c></mjx-mo><mjx-mo class="mjx-n" space="4"><mjx-c class="mjx-c3D"></mjx-c></mjx-mo><mjx-munder space="4"><mjx-row><mjx-base><mjx-mo class="mjx-sop"><mjx-c class="mjx-c2211 TEX-S1"></mjx-c></mjx-mo></mjx-base></mjx-row><mjx-row><mjx-under style="padding-top: 0.167em; padding-left: 0.344em;"><mjx-texatom size="s" texclass="ORD"><mjx-mi class="mjx-i"><mjx-c class="mjx-c1D458 TEX-I"></mjx-c></mjx-mi></mjx-texatom></mjx-under></mjx-row></mjx-munder><mjx-mi class="mjx-i" space="2"><mjx-c class="mjx-c1D45D TEX-I"></mjx-c></mjx-mi><mjx-mo class="mjx-n"><mjx-c class="mjx-c28"></mjx-c></mjx-mo><mjx-texatom texclass="ORD"><mjx-mi class="mjx-b"><mjx-c class="mjx-c1D431 TEX-B"></mjx-c></mjx-mi></mjx-texatom><mjx-mo class="mjx-n"><mjx-c class="mjx-c7C"></mjx-c></mjx-mo><mjx-msub><mjx-texatom texclass="ORD"><mjx-mi class="mjx-cal mjx-i"><mjx-c class="mjx-c43 TEX-C"></mjx-c></mjx-mi></mjx-texatom><mjx-script style="vertical-align: -0.15em;"><mjx-mi class="mjx-i" size="s"><mjx-c class="mjx-c1D458 TEX-I"></mjx-c></mjx-mi></mjx-script></mjx-msub><mjx-mo class="mjx-n"><mjx-c class="mjx-c29"></mjx-c></mjx-mo><mjx-mi class="mjx-i"><mjx-c class="mjx-c1D45D TEX-I"></mjx-c></mjx-mi><mjx-mo class="mjx-n"><mjx-c class="mjx-c28"></mjx-c></mjx-mo><mjx-msub><mjx-texatom texclass="ORD"><mjx-mi class="mjx-cal mjx-i"><mjx-c class="mjx-c43 TEX-C"></mjx-c></mjx-mi></mjx-texatom><mjx-script style="vertical-align: -0.15em;"><mjx-mi class="mjx-i" size="s"><mjx-c class="mjx-c1D458 TEX-I"></mjx-c></mjx-mi></mjx-script></mjx-msub><mjx-mo class="mjx-n"><mjx-c class="mjx-c29"></mjx-c></mjx-mo></mjx-math><mjx-assistive-mml unselectable="on" display="inline"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>p</mi><mo stretchy="false">(</mo><mrow data-mjx-texclass="ORD"><mi mathvariant="bold">x</mi></mrow><mo stretchy="false">)</mo><mo>=</mo><munder><mo data-mjx-texclass="OP" movablelimits="false">∑</mo><mrow data-mjx-texclass="ORD"><mi>k</mi></mrow></munder><mi>p</mi><mo stretchy="false">(</mo><mrow data-mjx-texclass="ORD"><mi mathvariant="bold">x</mi></mrow><mo data-mjx-texclass="ORD" fence="false" stretchy="false">|</mo><msub><mrow data-mjx-texclass="ORD"><mi data-mjx-variant="-tex-calligraphic" mathvariant="script">C</mi></mrow><mi>k</mi></msub><mo stretchy="false">)</mo><mi>p</mi><mo stretchy="false">(</mo><msub><mrow data-mjx-texclass="ORD"><mi data-mjx-variant="-tex-calligraphic" mathvariant="script">C</mi></mrow><mi>k</mi></msub><mo stretchy="false">)</mo></math></mjx-assistive-mml></mjx-container>. This can be useful for detecting new data points that have low probability under the model and for which the predictions maybe of low accuracy, which is known as <em>outlier detection</em> or <em>novelty detection</em>.</p>
    <p>However, if we only wish to make classification decisions, then it can be wasteful of computational resources, and excessively demanding of data, to find the joint distribution <mjx-container class="MathJax CtxtMenu_Attached_0" jax="CHTML" tabindex="0" ctxtmenu_counter="85" style="font-size: 122.1%; position: relative;"><mjx-math class="MJX-TEX" aria-hidden="true"><mjx-mi class="mjx-i"><mjx-c class="mjx-c1D45D TEX-I"></mjx-c></mjx-mi><mjx-mo class="mjx-n"><mjx-c class="mjx-c28"></mjx-c></mjx-mo><mjx-texatom texclass="ORD"><mjx-mi class="mjx-b"><mjx-c class="mjx-c1D431 TEX-B"></mjx-c></mjx-mi></mjx-texatom><mjx-mo class="mjx-n"><mjx-c class="mjx-c2C"></mjx-c></mjx-mo><mjx-msub space="2"><mjx-texatom texclass="ORD"><mjx-mi class="mjx-cal mjx-i"><mjx-c class="mjx-c43 TEX-C"></mjx-c></mjx-mi></mjx-texatom><mjx-script style="vertical-align: -0.15em;"><mjx-mi class="mjx-i" size="s"><mjx-c class="mjx-c1D458 TEX-I"></mjx-c></mjx-mi></mjx-script></mjx-msub><mjx-mo class="mjx-n"><mjx-c class="mjx-c29"></mjx-c></mjx-mo></mjx-math><mjx-assistive-mml unselectable="on" display="inline"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>p</mi><mo stretchy="false">(</mo><mrow data-mjx-texclass="ORD"><mi mathvariant="bold">x</mi></mrow><mo>,</mo><msub><mrow data-mjx-texclass="ORD"><mi data-mjx-variant="-tex-calligraphic" mathvariant="script">C</mi></mrow><mi>k</mi></msub><mo stretchy="false">)</mo></math></mjx-assistive-mml></mjx-container> when in fact we only really need the posterior probabilities <mjx-container class="MathJax CtxtMenu_Attached_0" jax="CHTML" tabindex="0" ctxtmenu_counter="86" style="font-size: 122.1%; position: relative;"><mjx-math class="MJX-TEX" aria-hidden="true"><mjx-mi class="mjx-i"><mjx-c class="mjx-c1D45D TEX-I"></mjx-c></mjx-mi><mjx-mo class="mjx-n"><mjx-c class="mjx-c28"></mjx-c></mjx-mo><mjx-msub><mjx-texatom texclass="ORD"><mjx-mi class="mjx-cal mjx-i"><mjx-c class="mjx-c43 TEX-C"></mjx-c></mjx-mi></mjx-texatom><mjx-script style="vertical-align: -0.15em;"><mjx-mi class="mjx-i" size="s"><mjx-c class="mjx-c1D458 TEX-I"></mjx-c></mjx-mi></mjx-script></mjx-msub><mjx-mo class="mjx-n"><mjx-c class="mjx-c7C"></mjx-c></mjx-mo><mjx-texatom texclass="ORD"><mjx-mi class="mjx-b"><mjx-c class="mjx-c1D431 TEX-B"></mjx-c></mjx-mi></mjx-texatom><mjx-mo class="mjx-n"><mjx-c class="mjx-c29"></mjx-c></mjx-mo></mjx-math><mjx-assistive-mml unselectable="on" display="inline"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>p</mi><mo stretchy="false">(</mo><msub><mrow data-mjx-texclass="ORD"><mi data-mjx-variant="-tex-calligraphic" mathvariant="script">C</mi></mrow><mi>k</mi></msub><mo data-mjx-texclass="ORD" fence="false" stretchy="false">|</mo><mrow data-mjx-texclass="ORD"><mi mathvariant="bold">x</mi></mrow><mo stretchy="false">)</mo></math></mjx-assistive-mml></mjx-container>, which can be obtained directly through approach (b). Indeed, the class-conditional densities may contain a lot of structure that has little effect on the posterior probabilities, as illustrated in Figure 1.27. There has been much interest in exploring the relative merits of generative and discriminative approaches to machine learning, and in finding ways to combine them.</p>
    <p><img src="https://s2.loli.net/2023/10/08/sF7Khkg2mebAyVP.png" alt="image.png" style="zoom:50%;"></p>
    <p>An even simpler approach is (c) in which we use the training data to find a discriminant function <mjx-container class="MathJax CtxtMenu_Attached_0" jax="CHTML" tabindex="0" ctxtmenu_counter="95" style="font-size: 122.1%; position: relative;"><mjx-math class="MJX-TEX" aria-hidden="true"><mjx-mi class="mjx-i"><mjx-c class="mjx-c1D453 TEX-I"></mjx-c></mjx-mi><mjx-mo class="mjx-n"><mjx-c class="mjx-c28"></mjx-c></mjx-mo><mjx-mi class="mjx-i"><mjx-c class="mjx-c1D465 TEX-I"></mjx-c></mjx-mi><mjx-mo class="mjx-n"><mjx-c class="mjx-c29"></mjx-c></mjx-mo></mjx-math><mjx-assistive-mml unselectable="on" display="inline"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></math></mjx-assistive-mml></mjx-container> that maps each <mjx-container class="MathJax CtxtMenu_Attached_0" jax="CHTML" tabindex="0" ctxtmenu_counter="96" style="font-size: 122.1%; position: relative;"><mjx-math class="MJX-TEX" aria-hidden="true"><mjx-mi class="mjx-b"><mjx-c class="mjx-c1D431 TEX-B"></mjx-c></mjx-mi></mjx-math><mjx-assistive-mml unselectable="on" display="inline"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi mathvariant="bold">x</mi></math></mjx-assistive-mml></mjx-container> directly onto a class label, thereby combining the inference and decision stages into a single learning problem. In the example of Figure 1.27, this would correspond to finding the value of <mjx-container class="MathJax CtxtMenu_Attached_0" jax="CHTML" tabindex="0" ctxtmenu_counter="97" style="font-size: 122.1%; position: relative;"><mjx-math class="MJX-TEX" aria-hidden="true"><mjx-mi class="mjx-b"><mjx-c class="mjx-c1D431 TEX-B"></mjx-c></mjx-mi></mjx-math><mjx-assistive-mml unselectable="on" display="inline"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi mathvariant="bold">x</mi></math></mjx-assistive-mml></mjx-container> shown by the vertical green line, because this is the decision boundary giving the minimum probability of misclassification.</p>
    <p>With option (c), however, we no longer have access to the posterior probabilities <mjx-container class="MathJax CtxtMenu_Attached_0" jax="CHTML" tabindex="0" ctxtmenu_counter="98" style="font-size: 122.1%; position: relative;"><mjx-math class="MJX-TEX" aria-hidden="true"><mjx-mi class="mjx-i"><mjx-c class="mjx-c1D45D TEX-I"></mjx-c></mjx-mi><mjx-mo class="mjx-n"><mjx-c class="mjx-c28"></mjx-c></mjx-mo><mjx-msub><mjx-texatom texclass="ORD"><mjx-mi class="mjx-cal mjx-i"><mjx-c class="mjx-c43 TEX-C"></mjx-c></mjx-mi></mjx-texatom><mjx-script style="vertical-align: -0.15em;"><mjx-mi class="mjx-i" size="s"><mjx-c class="mjx-c1D458 TEX-I"></mjx-c></mjx-mi></mjx-script></mjx-msub><mjx-mo class="mjx-n"><mjx-c class="mjx-c7C"></mjx-c></mjx-mo><mjx-texatom texclass="ORD"><mjx-mi class="mjx-b"><mjx-c class="mjx-c1D431 TEX-B"></mjx-c></mjx-mi></mjx-texatom><mjx-mo class="mjx-n"><mjx-c class="mjx-c29"></mjx-c></mjx-mo></mjx-math><mjx-assistive-mml unselectable="on" display="inline"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>p</mi><mo stretchy="false">(</mo><msub><mrow data-mjx-texclass="ORD"><mi data-mjx-variant="-tex-calligraphic" mathvariant="script">C</mi></mrow><mi>k</mi></msub><mo data-mjx-texclass="ORD" fence="false" stretchy="false">|</mo><mrow data-mjx-texclass="ORD"><mi mathvariant="bold">x</mi></mrow><mo stretchy="false">)</mo></math></mjx-assistive-mml></mjx-container>. There are many powerful reasons for wanting to compute the posterior probabilities, even if we subsequently use them to make decisions. These include:</p>
    <ul>
<li>Minimizing risk.</li>
<li>Reject option. </li>
<li>Compensating for class priors.</li>
<li>Combining models. </li>
</ul>
</details>

<h4 id="Loss-functions-for-regression"><a href="#Loss-functions-for-regression" class="headerlink" title="Loss functions for regression"></a>Loss functions for regression</h4><p>For each input $\bf x$, choose a specific estimation $y(\bf x)$ of the value $t$.</p>
<script type="math/tex; mode=display">
\mathbb E[L]=\iint L(t,y(\mathbf x))p({\bf x},t)\text d {\bf x}\text dt</script><p>Take squared loss $L(t,y({\bf x}))=\{y({\bf x})-t\}^2$ for example</p>
<script type="math/tex; mode=display">
\mathbb E[L]=\iint \{y({\bf x})-t\}^2p({\bf x},t)\text d {\bf x}\text dt</script><h5 id="Method-1-Calculus-of-Variations"><a href="#Method-1-Calculus-of-Variations" class="headerlink" title="Method 1. Calculus of Variations"></a>Method 1. Calculus of Variations</h5><p>Using a calculus of variations to give $y({\bf x})$ so as to minimize $\mathbb E[L]$:</p>
<script type="math/tex; mode=display">
\frac{\partial \mathbb E[L]}{\partial y({\bf x})}=2\int \{y({\bf x})-t\}^2p({\bf x},t)\text d t =0</script><p>Solving for $y({\bf x})$, and using the sum and product rules of probability, we obtain the <a name="regression-function">regression function</a>:</p>
<script type="math/tex; mode=display">
y({\bf x})=\frac{\int tp({\bf x},t)\text d t}{p({\bf x})}=\int t p(t\vert \mathbf x)\text d t=\mathbb E_t[t\vert \mathbf x]</script><p>which is the conditional average of $t$ conditioned on $\bf x$.</p>
<h5 id="Method-2-Expanding-the-square-term"><a href="#Method-2-Expanding-the-square-term" class="headerlink" title="Method 2. Expanding the square term"></a>Method 2. Expanding the square term</h5><script type="math/tex; mode=display">
\begin{align*}
\{y({\bf x})-t\}^2&=\{y({\bf x})-\mathbb E_t[t\vert\mathbf x]+\mathbb E_t[t\vert\mathbf x]-t\}^2\\
&=\{y({\bf x})-\mathbb E_t[t\vert\mathbf x]\}^2+2\{y({\bf x})-\mathbb E_t[t\vert\mathbf x]\}\{\mathbb E_t[t\vert\mathbf x]-t\}+\{\mathbb E_t[t\vert\mathbf x]-t\}^2
\end{align*}</script><p>Substitute into the loss function and perform the integral on $t$:</p>
<script type="math/tex; mode=display">
\mathbb E[L]=\int\{y({\bf x})-\mathbb E_t[t\vert\mathbf x]\}^2p(\mathbf x)\text d \mathbf x+\int\{\mathbb E_t[t\vert\mathbf x]-t\}^2p(\mathbf x)\text d\mathbf x</script><p>When $y({\bf x})=\mathbb E_t[t\vert \mathbf x]$, loss function $\mathbb E[L]$ is minimized.</p>
<p>The second term represents the intrinsic variability of the target data and can be regarded as <strong>noise</strong>, or minimum value of the loss function.</p>
<p><strong>3 Ways to Solve Regression Problems</strong> (in order of decreasing complexity)</p>
<ul>
<li>(a)    Inference to determine the joint density $p({\bf x},t)$, then normalize to find the conditional density $p(t\vert \mathbf x)$, finally marginalize to find the conditional mean by the <a href="#regression-function">regression function</a>.</li>
<li>(b)    Inference to determine the conditional density $p(t\vert \mathbf x)$,  then marginalize to find the conditional mean by the <a href="#regression-function">regression function</a>.</li>
<li>(c)    Find a regression function $y(\mathbf x)$ directly from the training data.</li>
</ul>
<p>The relative merits of these three approaches follow the same lines as for <a href="#3-ways-to-solve-decision-problems">classification problems</a>.</p>
<details>
    <summary>Minkowski loss</summary>
<script type="math/tex; mode=display">
\mathbb E[L_q]=\iint \vert y(\mathbf x)-t\vert^q p(\mathbf x,t)\text d \mathbf x\text d t</script><p><img src="https://s2.loli.net/2023/10/08/sq5Oz4LW1bVXuvG.png" alt="image.png" style="zoom: 33%;" /></p>
<p>The minimum of $\mathbb E[L_q]$ is given by:</p>
<ul>
<li>$q\rightarrow 0$: conditional mode</li>
<li>$q=1$: conditional median</li>
<li>$q=2$: conditional mean</li>
</ul>
</details>

<h3 id="Information-Theory"><a href="#Information-Theory" class="headerlink" title="Information Theory"></a>Information Theory</h3><h4 id="Entropy-statistical"><a href="#Entropy-statistical" class="headerlink" title="Entropy(statistical)"></a>Entropy(statistical)</h4><h5 id="Discrete"><a href="#Discrete" class="headerlink" title="Discrete"></a>Discrete</h5><p>Allocate $N$ identical objects in $M$ bins.</p>
<script type="math/tex; mode=display">
W=\frac{N!}{\prod\limits_in_i!}</script><script type="math/tex; mode=display">
\text H=\frac 1 N \ln W\simeq -\lim\limits_{N\rightarrow\infty}\sum\limits_{i}(\frac{n_i}N)\ln(\frac{n_i}N)=-\sum\limits_{i}p_i\ln p_i</script><p>Entropy maximized when $\forall i,\ p_i=\frac 1 M$.</p>
<p><strong>Continuous</strong></p>
<p>Put bins of width $\Delta$ along the real line.</p>
<script type="math/tex; mode=display">
\lim\limits_{\Delta\rightarrow0}\left\{-\sum\limits_{i}p(x_i)\Delta\ln p(x_i)\right\}=-\int p(x)\ln p(x)\text d x</script><p>For fixed $\sigma^2$, when $p(x)=\mathcal N(x\vert\mu,\sigma^2)$, differential entropy is maximized</p>
<script type="math/tex; mode=display">
\text H[x]=\frac 1 2\{1+\ln(2\pi\sigma^2)\}</script><h4 id="Entropy"><a href="#Entropy" class="headerlink" title="Entropy"></a>Entropy</h4><script type="math/tex; mode=display">
\begin{align*}
\text H[x]&=-\sum\limits_x p(x)\ln p(x)\\
\text H[x]&=-\int p(x)\ln p(x)\text d x
\end{align*}</script><h4 id="Conditional-Entropy"><a href="#Conditional-Entropy" class="headerlink" title="Conditional Entropy"></a>Conditional Entropy</h4><script type="math/tex; mode=display">
\text H[y\vert x]=-\iint p(\mathbf y,\mathbf x)\ln p(\mathbf y\vert\mathbf x)\text d\mathbf y\text d\mathbf x</script><script type="math/tex; mode=display">
\text H[\mathbf x,\mathbf y]=\text H[\mathbf y\vert\mathbf x]+\text H[\mathbf x]</script><h4 id="Relative-Entropy-The-Kullback-Leibler-Divergence"><a href="#Relative-Entropy-The-Kullback-Leibler-Divergence" class="headerlink" title="Relative Entropy (The Kullback-Leibler Divergence)"></a>Relative Entropy (The Kullback-Leibler Divergence)</h4><p>KL divergence describes a distance between model $p$ and model $q$.</p>
<script type="math/tex; mode=display">
\begin{align*}
\text{KL}(p\|q)&=\text{Cross Entropy C}(p\|q)-\text {Entropy H}(p)\\
&=-\int p(\mathbf x)\ln q(\mathbf x)\text d\mathbf x-\left(-\int p(\mathbf x)\ln p(\mathbf x)\text d\mathbf x\right)\\
&=-\int p(\mathbf x)\ln \left\{\frac{q(\mathbf x)}{p(\mathbf x)}\right\}\text d\mathbf x
\end{align*}</script><ol>
<li>It is not a symmetrical quantity: $\text{KL}(p|q)\not\equiv \text{KL}(q|p)$.</li>
<li>$\text {KL}(p|q)\ge 0$, with equality IFF $p(\mathbf x)=q(\mathbf x)$.</li>
</ol>
<p>Approximate distribution $p(\mathbf x)$ using distribution $q(\mathbf x\vert\boldsymbolθ)$  governed by a set of adjustable parameters $\boldsymbol\theta$. One way to determine $\boldsymbol\theta$ is to minimize the KL divergence between the two distributions.</p>
<script type="math/tex; mode=display">
\text{KL}(p\|q)\simeq \frac 1 N \sum\limits_{n=1}^N\{\ln q(\mathbf x_n\vert\boldsymbol\theta)+\ln p(\mathbf x_n)\}</script><p>The 1st term is the negative log likelihood function for $\boldsymbol\theta$. The 2nd term is independent of $\boldsymbol\theta$. So minimizing this KL divergence is equivalent to maximizing the likelihood function.</p>
<h4 id="Cross-Entropy-for-Machine-Learning"><a href="#Cross-Entropy-for-Machine-Learning" class="headerlink" title="Cross Entropy for Machine Learning"></a>Cross Entropy for Machine Learning</h4><ul>
<li>Goal of ML: $p(\text{real data})\approx p(\text{model}\vert\theta)$</li>
<li>We assume: $p(\text{training data})\approx p(\text{real data})$</li>
<li>Operation of ML: $p(\text{training data})\approx p(\text{model}\vert\theta)$</li>
</ul>
<p>Minimizing $\text{KL}(p(\text{training data})|p(\text{model}\vert\theta))$ is equivalent to minimizing $\text C(p(\text{training data})|p(\text{model}\vert\theta))$ as $\text H(p(\text{training data}))$ is fixed.</p>
<p><strong>Example. Bernoulli model</strong></p>
<script type="math/tex; mode=display">
p(\text{model}\vert\theta)=\rho^t(1-\rho)^{1-t}</script><script type="math/tex; mode=display">
\text C=-\frac 1 N \sum\limits_nt_n\ln\rho+(1-t_n)\ln(1-\rho)</script><p>where $t_n$ is the training data and $\rho$ is the model parameter.</p>
<p><strong>Example. Gaussian model</strong></p>
<script type="math/tex; mode=display">
p(\text{model}\vert\theta)\propto e^{-\frac{(t-\mu)^2}{2}}</script><script type="math/tex; mode=display">
\text C\propto \frac 1 N \sum\limits_n(t_n-\mu)^2</script><p>where $t_n$ is the training data and $\mu$ is the model parameter.</p>
<h4 id="Mutual-Information"><a href="#Mutual-Information" class="headerlink" title="Mutual Information"></a>Mutual Information</h4><p>Mutual information describes the degree of dependence between $\mathbf x$ and $\mathbf y$ </p>
<script type="math/tex; mode=display">
\begin{align*}
\text I[\mathbf x,\mathbf y]&\equiv\text{KL}(p(\mathbf x,\mathbf y)\|p(\mathbf x)p(\mathbf y))\\
&=-\iint p(\mathbf x,\mathbf y)\ln\left(\frac{p(\mathbf x)p(\mathbf y)}{p(\mathbf x,\mathbf y)}\right)\text d\mathbf x\text d\mathbf y
\end{align*}</script><script type="math/tex; mode=display">
\text I[\mathbf x,\mathbf y]=\text H[\mathbf x]-\text H[\mathbf x\vert\mathbf y]=\text H[\mathbf y]-\text H[\mathbf y\vert\mathbf x]</script><h4 id="Information-Gain"><a href="#Information-Gain" class="headerlink" title="Information Gain"></a>Information Gain</h4><p>Given $N$ balls and a balance, one of these balls is lighter.</p>
<p>$x$: one ball is lighter</p>
<p>$y$: weighing once</p>
<p>$\text H[x]$: uncertain of balls</p>
<p>$\text H[x\vert y]$: uncertain of balls after weighing once</p>
<script type="math/tex; mode=display">
\begin{align*}
\text H[x\vert y_1,\cdots,y_t]-\text H[x\vert y_1,\cdots,y_{t+1}]&=\text H[y_{t+1}\vert y_1,\cdots,y_t]-H[y_{t+1}\vert y_1,\cdots,y_t,x]\\
&=\text H[y_{t+1}\vert y_1,\cdots,y_t]\\
&\le \text H[y_{t+1}]=\log_23
\end{align*}</script><p>Sum the equation above with $t=0,1,\cdots,T$, </p>
<script type="math/tex; mode=display">
\begin{matrix*}
\log_2N = \text H[x]-\text H[x\vert y_1,\cdots,y_T]\le T\log_23\\
T\ge \log_3N
\end{matrix*}</script><h2 id="Chapter-3-Distributions"><a href="#Chapter-3-Distributions" class="headerlink" title="Chapter 3 - Distributions"></a>Chapter 3 - Distributions</h2><h3 id="Binary-Distributions"><a href="#Binary-Distributions" class="headerlink" title="Binary Distributions"></a>Binary Distributions</h3><h4 id="Bernoulli-Distribution"><a href="#Bernoulli-Distribution" class="headerlink" title="Bernoulli Distribution"></a>Bernoulli Distribution</h4><script type="math/tex; mode=display">
\begin{align*}
\text{Bern}(x\vert \mu)&=\mu^x(1-\mu)^{1-x}\\
\mathbb E[x]&=\mu\\
\text{var}[x]&=\mu(1-\mu)
\end{align*}</script><p>Given $\mathcal D=\{x_1,\cdots,x_N\}$, $m$ heads, $N-m$ tails.</p>
<script type="math/tex; mode=display">
\ln p(\mathcal D\vert\mu)=\sum\limits_{n=1}^N\ln p(x_n\vert\mu)=\sum\limits_{n=1}^N\{x_n\ln\mu+(1-x_n\ln(1-\mu)\}</script><script type="math/tex; mode=display">
\mu_\text{ML}=\frac 1 N\sum\limits_{n=1}^Nx_n=\frac m N</script><h4 id="Binomial-Distribution"><a href="#Binomial-Distribution" class="headerlink" title="Binomial Distribution"></a>Binomial Distribution</h4><script type="math/tex; mode=display">
\begin{align*}
\text{Bin}(m\vert N,\mu)&=\left(\begin{matrix}N\\m\end{matrix}\right)\mu^m(1-\mu)^{N-m}\\
\mathbb E[m]&=\sum\limits_{m=0}^Nm\text{Bin}(m\vert N,\mu)=N\mu\\
\text{var}[m]&=\sum\limits_{m=0}^N(m-\mathbb E[m])^2\text{Bin}(m\vert N,\mu)=N\mu(1-\mu)
\end{align*}</script><h4 id="Beta-Distribution"><a href="#Beta-Distribution" class="headerlink" title="Beta Distribution"></a><a href="http://varianceexplained.org/statistics/beta_distribution_and_baseball/">Beta Distribution</a></h4><script type="math/tex; mode=display">
\begin{align*}
\Gamma(x)&\equiv\int_0^\infty u^{x-1}e^{-u}du\\
\text{Beta}(\mu\vert a,b)&=\frac{\Gamma(a+b)}{\Gamma(a)\Gamma(b)}\mu^{a-1}(1-\mu)^{b-1}\\
\mathbb E[\mu]&=\frac a {a+b}\\
\text{var}[\mu]&=\frac{ab}{(a+b)^2(a+b+1)}
\end{align*}</script><p>The Beta distribution provides the <a href="https://en.wikipedia.org/wiki/Conjugate_prior"><strong>conjugate prior</strong></a> for the Bernoulli distribution.</p>
<p>Given $\mathcal D=\{x_1,\cdots,x_N\}$, $m$ heads, $N-m$ tails.</p>
<script type="math/tex; mode=display">
\begin{matrix}
p(\mu\vert a_0,b_0,\mathcal D)\propto p(\mathcal D\vert\mu)p(\mu\vert a_0,b_0)\propto \text{Beta}(\mu\vert a_N,b_N)\\
a_N=a_0+m\quad\quad b_N=b_0+(N-m)
\end{matrix}</script><p>As the size of the dataset $N$ increases,</p>
<script type="math/tex; mode=display">
\begin{align*}
a_N &\rightarrow m\\
b_N &\rightarrow N-m\\
\mathbb E[\mu]&\rightarrow \mu_\text{ML}\\
\text{var}[\mu]&\rightarrow 0
\end{align*}</script><h3 id="Multinomial-Distributions"><a href="#Multinomial-Distributions" class="headerlink" title="Multinomial Distributions"></a>Multinomial Distributions</h3><h4 id="1-of-K-coding-scheme"><a href="#1-of-K-coding-scheme" class="headerlink" title="1-of-K coding scheme"></a>1-of-K coding scheme</h4><p>1-of-K coding scheme: $\mathbf x=(0,0,1,0,0,0)^\text T,\ \sum\limits_{k=1}^Kx_k=1$.</p>
<script type="math/tex; mode=display">
p(\text x\vert\boldsymbol\mu)=\prod\limits_{k=1}^K\mu_k^{x_k}</script><p>where $\boldsymbol\mu=(\mu_1,\cdots,\mu_K)^\text T$, $\sum\limits_k\mu_k=1$.</p>
<script type="math/tex; mode=display">
\mathbb E[\mathbf x\vert\boldsymbol \mu]=\sum\limits_{\mathbf x}p(\mathbf x\vert\boldsymbol\mu)\mathbf x=(\mu_1,\cdots,\mu_K)^\text T=\boldsymbol \mu</script><p>Given $\mathcal D=\{\bf x_1,\cdots,x_N\}$, the likelihood</p>
<script type="math/tex; mode=display">
p(\mathcal D\vert\mu)=\prod\limits_{n=1}^N\prod\limits_{k=1}^K\mu_k^{x_{nk}}=\prod_{k=1}^K\mu_k^{\left(\sum\limits_{n=1}^Nx_{nk}\right)}=\prod_{k=1}^K\mu_k^{m_k}</script><p>where $ m_k=\sum\limits_{n=1}^Nx_{nk}$ denotes the number of observations of $x_k = 1$.</p>
<p>Using Lagrange method, we obtain</p>
<script type="math/tex; mode=display">
\mu^\text{ML}_k=\frac {m_k} N</script><h4 id="Multinomial-Distribution"><a href="#Multinomial-Distribution" class="headerlink" title="Multinomial Distribution"></a>Multinomial Distribution</h4><script type="math/tex; mode=display">
\begin{align*}
\text{Mult}(m_1,\cdots,m_K\vert\boldsymbol\mu,N)&=\left(\begin{matrix}N\\m_1\cdots m_K\end{matrix}\right)\prod\limits_{k=1}^K\mu_k^{m_k}\\
\mathbb E[m_k]&=N\mu_k\\
\text{var}[m_k]&=N\mu_k(1-\mu_k)\\
\text{cov}[m_jm_k]&=-N\mu_j\mu_k
\end{align*}</script><h4 id="Dirichlet-Distribution"><a href="#Dirichlet-Distribution" class="headerlink" title="Dirichlet Distribution"></a>Dirichlet Distribution</h4><p>Conjugate prior for the multinomial distribution.</p>
<script type="math/tex; mode=display">
\begin{matrix}
\text{Dir}(\boldsymbol\mu\vert\boldsymbol\alpha)=\frac{\Gamma(\alpha_0)}{\Gamma(\alpha_1)\cdots\Gamma(\alpha_K)}\prod\limits_{k=1}^K\mu_k^{\alpha_k-1}\\
\alpha_0=\sum\limits_{k=1}^K\alpha_k
\end{matrix}</script><p>Given $\mathcal D=\{m_1,\cdots,m_K\}$, the likelihood</p>
<script type="math/tex; mode=display">
\begin{matrix}
p(\boldsymbol\mu\vert\mathcal D,\boldsymbol\alpha)\propto p(\mathcal D\vert\boldsymbol\mu)p(\boldsymbol\mu\vert\boldsymbol\alpha)\propto\prod\limits_{k=1}^K\mu_k^{\alpha_k+m_k-1}\\
p(\boldsymbol\mu\vert\mathcal D,\boldsymbol\alpha)=\text{Dir}(\boldsymbol\mu\vert\boldsymbol\alpha+\bf m)
\end{matrix}</script><p>where $\mathbf m=(m_1,\cdots,m_K)^\text T$.</p>
<p>We can interpret the parameters $\alpha_k$ of the Dirichlet prior as an effective number of observations of $x_k = 1$.</p>
<h3 id="Gaussian-Distributions"><a href="#Gaussian-Distributions" class="headerlink" title="Gaussian Distributions"></a>Gaussian Distributions</h3><ul>
<li><p>The Gaussian Distribution</p>
<script type="math/tex; mode=display">
\mathcal N(x|\mu,\sigma^2)=\frac 1 {(2\pi\sigma^2)^{1/2}}\exp\left\{-\frac 1 {2\sigma^2}(x-\mu)^2\right\}</script></li>
<li><p>The Multivariate Gaussian</p>
<script type="math/tex; mode=display">
\mathcal N(\mathbf x|\mathbf\mu,\mathbf\Sigma)=\frac 1 {(2\pi)^{D/2}}\frac 1 {|\mathbf\Sigma|^{1/2}}\exp\left\{-\frac 1 2(\mathbf x-\mathbf\mu)^\text T\mathbf\Sigma^{-1}(\mathbf x - \mathbf \mu)\right\}</script></li>
</ul>
<h4 id="Central-Limit-Theorem"><a href="#Central-Limit-Theorem" class="headerlink" title="Central Limit Theorem"></a>Central Limit Theorem</h4><p>The distribution of the sum of $N$ i.i.d. random variables becomes increasingly Gaussian as $N$ grows.</p>
<h4 id="Moments-of-the-Multivariate-Gaussian"><a href="#Moments-of-the-Multivariate-Gaussian" class="headerlink" title="Moments of the Multivariate Gaussian"></a>Moments of the Multivariate Gaussian</h4><script type="math/tex; mode=display">
\begin{align*}
\mathbb E[\mathbf x]&=\boldsymbol\mu\\
\mathbb E[\mathbf x\mathbf x^\text T]&=\boldsymbol\mu\boldsymbol\mu^\text T+\boldsymbol\Sigma\\
\text{cov}[\mathbf x]&=\boldsymbol\Sigma\\
\text{cov}[A\mathbf x]&=A\boldsymbol\Sigma A^\text T
\end{align*}</script><h4 id="Properties-of-Gaussians"><a href="#Properties-of-Gaussians" class="headerlink" title="Properties of Gaussians"></a>Properties of Gaussians</h4><ol>
<li>Linear transformation</li>
</ol>
<script type="math/tex; mode=display">
\begin{align*}
X&\sim\mathcal N(\mu,\sigma^2)\\
Y&=aX+b\\
Y&\sim\mathcal N(a\mu+b,a^2\sigma^2)
\end{align*}</script><ol>
<li><p>Product of Gaussian r.v.</p>
<script type="math/tex; mode=display">
\begin{align*}X_1&\sim\mathcal N(\mu_1,\sigma_1^2)\\X_2&\sim\mathcal N(\mu_2,\sigma_2^2)\\\
p(Y)&=p(X_1)p(X_2)\\
Y&\sim\mathcal N(\frac{\sigma^2_2}{\sigma_1^2+\sigma_2^2}\mu_1+\frac{\sigma^2_1}{\sigma_1^2+\sigma_2^2}\mu_2,\frac 1 {\sigma_1^{-2}+\sigma_2^{-2}})
\end{align*}</script><script type="math/tex; mode=display">
\left\{\begin{align*}\sigma^{-2}&=\sigma_1^{-2}+\sigma_2^{-2}\\\sigma^{-2}\mu&=\sigma_1^{-2}\mu_1+\sigma_2^{-2}\mu_2\end{align*}\right .</script><p>For multivariate Gaussians, use $\Sigma$ to replace $\sigma^2$.</p>
</li>
</ol>
<h4 id="Bayes’-Theorem-for-Gaussian-Variables-Slides"><a href="#Bayes’-Theorem-for-Gaussian-Variables-Slides" class="headerlink" title="Bayes’ Theorem for Gaussian Variables(Slides)"></a>Bayes’ Theorem for Gaussian Variables(Slides)</h4><p>Given $y=Ax+v$, $p(x)=\mathcal N(x\vert\mu,\Sigma)$, $p(v)=\mathcal N(v\vert,0,Q)$.</p>
<p>Hence we have</p>
<script type="math/tex; mode=display">
\begin{align*}
p(y)&=\mathcal N(y\vert A\mu,A\Sigma A^\text T+Q)\\
p(y\vert x)&=\mathcal N(y\vert Ax,Q)
\end{align*}</script><p>Therefore</p>
<script type="math/tex; mode=display">
\begin{align*}
p(x\vert y)&\propto p(y\vert x)p(x)=\mathcal N(y\vert Ax,Q)\mathcal N(x\vert \mu,\Sigma)\\
p(x\vert y) &= \mathcal N(x\vert Hy,L)\\
\end{align*}</script><p>where</p>
<script type="math/tex; mode=display">
\left\{ \begin{align*}
L^{-1}&=A^TQ^{-1}A + \Sigma^{-1}\\
Hy &= L\{A^TQ^{-1}y+\Sigma^{-1}\mu\}
\end{align*}\right.</script><h4 id="Conditional-Gaussian-distributions"><a href="#Conditional-Gaussian-distributions" class="headerlink" title="Conditional Gaussian distributions"></a>Conditional Gaussian distributions</h4><p>If two sets of variables are jointly Gaussian, then the conditional distribution of one set conditioned on the other is again Gaussian.</p>
<p>Given a $D$-dimensional vector $\mathbf x$ with Gaussian distribution $\mathcal N(\mathbf x\vert\boldsymbol\mu,\boldsymbol\Sigma)$, partitioned into two disjoint subsets $\mathbf x_a$ and $\mathbf x_b$.</p>
<script type="math/tex; mode=display">
\mathbf x=\left(\begin{matrix}\mathbf x_a\\\mathbf x_b\end{matrix}\right)\quad\boldsymbol\mu=\left(\begin{matrix}\boldsymbol \mu_a\\\boldsymbol \mu_b\end{matrix}\right)\quad\boldsymbol\Sigma=\begin{pmatrix}\boldsymbol\Sigma_{aa}&\boldsymbol\Sigma_{ab}\\\boldsymbol\Sigma_{ba}&\boldsymbol\Sigma_{bb}\end{pmatrix}</script><p>For conditional distribution $p(\mathbf x_a\vert\mathbf x_b)$,</p>
<script type="math/tex; mode=display">
\begin{align*}
p(\mathbf x_a\vert\mathbf x_b)&=\mathcal N(x_a\vert\boldsymbol\mu_{a\vert b},\boldsymbol\Sigma_{a\vert b})\\
\boldsymbol\mu_{a\vert b}&=\boldsymbol\mu_a+\boldsymbol\Sigma_{ab}\boldsymbol\Sigma_{bb}^{-1}(\mathbf x_b-\boldsymbol\mu_b)\\
\boldsymbol\Sigma_{a\vert b}&=\boldsymbol\Sigma_{aa}-\boldsymbol\Sigma_{ab}\boldsymbol\Sigma_{bb}^{-1}\boldsymbol\Sigma_{ba}
\end{align*}</script><p>And marginal distribution $p(\mathbf x_a)=\mathcal N(\mathbf x_a\vert\boldsymbol\mu_a,\boldsymbol\Sigma_{aa})$.</p>
<h4 id="Bayes’-Theorem-for-Gaussian-Variables-Textbook"><a href="#Bayes’-Theorem-for-Gaussian-Variables-Textbook" class="headerlink" title="Bayes’ Theorem for Gaussian Variables(Textbook)"></a>Bayes’ Theorem for Gaussian Variables(Textbook)</h4><p>Given</p>
<script type="math/tex; mode=display">
\begin{align*}
p(\mathbf x)&=\mathcal N(\mathbf x\vert\boldsymbol\mu,\boldsymbol\Lambda^{-1})\\
p(\mathbf y\vert \mathbf x)&=\mathcal N(\bf y\vert Ax+b, L^{-1})
\end{align*}</script><p>Obtain</p>
<script type="math/tex; mode=display">
\begin{align*}
p(\mathbf y)&=\mathcal N(\bf y\vert A\mu+b,L^{-1}+A\Lambda^{-1}A^\text T)\\
p(\mathbf x\vert\mathbf y)&=\mathcal N(\bf x\vert\boldsymbol \Sigma\{A^\text TL(y-b)+\Lambda\boldsymbol\mu\},\Sigma)
\end{align*}</script><p>where</p>
<script type="math/tex; mode=display">
\boldsymbol\Sigma=(\bf\Lambda+A^\text{T}LA)^{-1}.</script><h4 id="Maximum-Likelihood-for-the-Gaussian"><a href="#Maximum-Likelihood-for-the-Gaussian" class="headerlink" title="Maximum Likelihood for the Gaussian"></a>Maximum Likelihood for the Gaussian</h4><p>Sufficient statistics: $\sum\limits_{n=1}^N\mathbf x_n$ and $\sum\limits_{n=1}^N\mathbf x_n\mathbf x_n^\text T$</p>
<p>Solve the maximum likelihood</p>
<script type="math/tex; mode=display">
\boldsymbol\mu_\text{ML}=\frac 1 N\sum\limits_{n=1}^N\mathbf x_n\quad \boldsymbol\Sigma_\text{ML}=\frac 1 N\sum\limits_{n=1}^N(\mathbf x_n-\boldsymbol\mu_\text{ML})(\mathbf x_n-\boldsymbol\mu_\text{ML})^\text T.</script><p>Under the true distribution</p>
<script type="math/tex; mode=display">
\mathbb E[\boldsymbol \mu_\text{ML}]=\boldsymbol\mu\quad\mathbb E[\boldsymbol \Sigma_\text{ML}]=\frac{N-1}N\boldsymbol\Sigma.</script><p>Hence define</p>
<script type="math/tex; mode=display">
\widetilde{\boldsymbol\Sigma}=\frac 1 {N-1}\sum\limits_{n=1}^N(\mathbf x_n-\boldsymbol\mu_\text{ML})(\mathbf x_n-\boldsymbol\mu_\text{ML})^\text T.</script><h4 id="Sequential-estimation"><a href="#Sequential-estimation" class="headerlink" title="Sequential estimation"></a>Sequential estimation</h4><p><a href="https://en.wikipedia.org/wiki/Stochastic_approximation#Robbins%E2%80%93Monro_algorithm">The Robbins-Monro Algorithm</a></p>
<h4 id="Bayesian-Inference-for-the-Gaussian"><a href="#Bayesian-Inference-for-the-Gaussian" class="headerlink" title="Bayesian Inference for the Gaussian"></a>Bayesian Inference for the Gaussian</h4><h4 id="Student’s-t-distribution"><a href="#Student’s-t-distribution" class="headerlink" title="Student’s t-distribution"></a><a href="https://en.wikipedia.org/wiki/Student%27s_t-distribution">Student’s t-distribution</a></h4><h4 id="Periodic-variables"><a href="#Periodic-variables" class="headerlink" title="Periodic variables"></a>Periodic variables</h4><h4 id="Mixtures-of-Gaussians"><a href="#Mixtures-of-Gaussians" class="headerlink" title="Mixtures of Gaussians"></a>Mixtures of Gaussians</h4><script type="math/tex; mode=display">
p(\mathbf x)=\sum\limits_{k=1}^K\pi_k\mathcal N(\mathbf x\vert\boldsymbol\mu_k,\boldsymbol\Sigma_k)</script><ul>
<li><p>$\pi_k$: mixing coefficients</p>
<p> $\sum\limits_{k=1}^K\pi_k=1,0\le\pi_k\le 1$</p>
</li>
<li><p>$N(\mathbf x\vert\boldsymbol\mu_k,\boldsymbol\Sigma_k)$: component</p>
</li>
</ul>
<p>Log likelihood of mixtures</p>
<script type="math/tex; mode=display">
\ln p(\mathbf X\vert\boldsymbol \pi,\boldsymbol\mu,\boldsymbol\Sigma)=\sum\limits_{n=1}^N\ln\left\{\sum\limits_{k=1}^K\pi_k\mathcal N(\mathbf x\vert\boldsymbol\mu_k,\boldsymbol\Sigma_k)\right\}</script><p>The maximum likelihood solution for the parameters no longer has a closed-form analytical solution.</p>
<p>Alternatives: iterative numerical optimization, expectation maximization.</p>
<h3 id="Exponential-Families"><a href="#Exponential-Families" class="headerlink" title="Exponential Families"></a>Exponential Families</h3><p>The exponential family of distributions over $\mathbf x$, given parameters $\boldsymbol \eta$</p>
<script type="math/tex; mode=display">
p(\mathbf x\vert\boldsymbol\eta)=h(\mathbf x)g(\boldsymbol\eta)\exp\{\boldsymbol\eta^\text T\mathbf u(\mathbf x)\}</script><ul>
<li>$\bf x$: scalar or vector, discrete or continuous.</li>
<li>$\boldsymbol\eta$: natural parameters</li>
<li>$g(\boldsymbol\eta)$: normalization coefficient satisfying ↓</li>
</ul>
<script type="math/tex; mode=display">
g(\boldsymbol\eta)\int h(\mathbf x)\exp\left\{\boldsymbol\eta^\text T \mathbf u(\mathbf x)\right\}\text d\mathbf x=1</script><p><strong>The Bernoulli Distribution</strong>: </p>
<script type="math/tex; mode=display">
p(x\vert \mu)=(1-\mu)\exp\left\{\ln(\frac{\mu}{1-\mu})x\right\}</script><p>So</p>
<script type="math/tex; mode=display">
\begin{align*}
\eta = \ln(\frac \mu{1-\mu}), \mu=&\sigma(\eta)=\frac 1{1+\exp(-\eta)}\\
&\uparrow\text{Logistic Sigmoid}
\end{align*}</script><p><strong>The Multinomial Distribution:</strong></p>
<script type="math/tex; mode=display">
p(\mathbf x\vert\boldsymbol \mu)=\exp\left\{\sum\limits_{k=1}^Mx_k\ln\mu_k\right\}</script><p>Let $\mu_M=1-\sum\limits_{k=1}^{M-1}\mu_k$,</p>
<script type="math/tex; mode=display">
\begin{align*}
\eta_k=\ln\left(\frac {\mu_k} {1-\sum_{j=1}^{M-1}\mu_j}\right), \mu_k = &\frac{\exp(\eta_k)}{1+\sum_{j=1}^{M-1}\exp(\eta_j)}\\
&\uparrow\text{Softmax}
\end{align*}</script><p><strong>The Gaussian Distribution:</strong></p>
<script type="math/tex; mode=display">
p(x\vert\mu,\sigma^2)=\frac 1 {\sqrt{2\pi\sigma^2}}\exp\left\{-\frac 1 {2\sigma^2}(x-\mu)^2\right\}=h(x)g(\boldsymbol\eta)\exp\left\{\boldsymbol\eta^\text T\mathbf u(x)\right\}</script><p>where</p>
<script type="math/tex; mode=display">
\begin{align*}
\boldsymbol\eta &= \left(\begin{matrix}\frac{\mu}{\sigma^2}\\\frac {-1} {2\sigma^2}\end{matrix}\right) &h(x) &= \frac{1}{\sqrt{2\pi}}\\
\mathbf u(x) &= \left(\begin{matrix}x\\x^2\end{matrix}\right) &g(\boldsymbol\eta) &= \sqrt{-2\eta_2}\exp\left(\frac{\eta_1^2}{4\eta_2}\right)
\end{align*}</script><h4 id="Maximum-likelihood-and-sufficient-statistics"><a href="#Maximum-likelihood-and-sufficient-statistics" class="headerlink" title="Maximum likelihood and sufficient statistics"></a>Maximum likelihood and sufficient statistics</h4><p>Likelihood function</p>
<script type="math/tex; mode=display">
p(\mathbf{X} \vert \boldsymbol{\eta})=\left(\prod_{n=1}^{N} h\left(\mathbf{x}_{n}\right)\right) g(\boldsymbol{\eta})^{N} \exp \left\{\boldsymbol{\eta}^{T} \sum_{n=1}^{N} \mathbf{u}\left(\mathbf{x}_{n}\right)\right\}</script><p>Condition of maximum likelihood estimator $\boldsymbol\eta_\text{ML}$</p>
<script type="math/tex; mode=display">
\begin{align*}
-\nabla\ln g(\boldsymbol \eta_\text{ML})=\frac 1 N& \sum\limits_{n=1}^N\mathbf u(\mathbf x_n)\\
&\uparrow\text{Sufficient statistic}
\end{align*}</script><p>The solution for the ML estimator only depends on $\sum\limits_{n=1}^N\mathbf u(\mathbf x_n)$, which is called the sufficient statistic of the distribution.</p>
<p>For example,</p>
<p>Bernoulli distribution $\mathbf u(x) = x$, so we only keep the sum of the data points; Gaussian distribution $\mathbf u(x) = \left(\begin{matrix}x\\x^2\end{matrix}\right)$, we need to keep both the sum of data points and the sum of the square.</p>
<h4 id="Conjugate-Priors"><a href="#Conjugate-Priors" class="headerlink" title="Conjugate Priors"></a>Conjugate Priors</h4><p>Seek a prior that is <strong>conjugate</strong> to the likelihood function: the posterior distribution has the <strong>same functional form</strong> as the prior.</p>
<p>For any member of the exponential family, there exists a conjugate prior</p>
<script type="math/tex; mode=display">
\text{prior} = p(\boldsymbol\eta\vert\chi,\nu) = f(\chi,\nu)g(\boldsymbol\eta)^\nu\exp\left\{\nu\boldsymbol\eta^\text T\chi\right\}</script><p>where</p>
<ul>
<li>$f(\chi,\nu)$ is a normalization coefficient</li>
<li>$g(\boldsymbol\eta)$ is the normalization coefficient of the exponential family.</li>
</ul>
<p>Recall that</p>
<script type="math/tex; mode=display">
\text{Likelihood} =p(\mathbf{X} \vert \boldsymbol{\eta})=\left(\prod_{n=1}^{N} h\left(\mathbf{x}_{n}\right)\right) g(\boldsymbol{\eta})^{N} \exp \left\{\boldsymbol{\eta}^{T} \sum_{n=1}^{N} \mathbf{u}\left(\mathbf{x}_{n}\right)\right\}</script><p>Multiply the prior and the likelihood, the posterior is</p>
<script type="math/tex; mode=display">
\text{Posterior} \propto g(\boldsymbol\eta)^{\nu+N}\exp\left\{\boldsymbol\eta^\text T \left(\sum\limits_{n=1}^N\mathbf u(\mathbf x_n)+\nu\chi\right)\right\}</script><p>which is in the same functional form as the prior.</p>
<ul>
<li>$\nu$: effective number of pseudo-observations in the prior</li>
<li>$\chi$: value of the sufficient statistic for the pseudo-observations</li>
</ul>
<h3 id="Non-informative-Priors"><a href="#Non-informative-Priors" class="headerlink" title="Non-informative Priors"></a>Non-informative Priors</h3><p>Used when little is known about the prior distribution.</p>
<p>Have as little influence on the posterior distribution as possible.</p>
<p>Cons of choose constant as the prior</p>
<ul>
<li>If the domain of the parameter $\lambda$ is unbounded, the integral over $\lambda$ diverges, hence the prior cannot be normalized and is <strong>improper</strong>.</li>
<li>By changing the variable(e.g., $\lambda=\eta^2$), the density over the new variable may not be constant.</li>
</ul>
<p>Example: $\text{Gam}(\lambda\vert a_0,b_0)$ where $a_0=b_0=0$.</p>
<h3 id="Non-parametric-Methods"><a href="#Non-parametric-Methods" class="headerlink" title="Non-parametric Methods"></a>Non-parametric Methods</h3><p><strong>Limitation of parametric methods:</strong></p>
<p>The chosen density might be a poor model of the distribution that generates the data. Multimodal data can never be captured by a unimodal Gaussian.</p>
<h4 id="Histogram-Methods"><a href="#Histogram-Methods" class="headerlink" title="Histogram Methods"></a>Histogram Methods</h4><p><img src="https://picst.sunbangyan.cn/2023/11/21/d15a31fe2fd078f7148522e283831252.jpeg" style="zoom:50%;" /></p>
<script type="math/tex; mode=display">
p_i = \frac{n_i}{N\Delta_i}</script><p>where $\Delta$ acts as a smoothing parameter.</p>
<p>Cons: Curse of Dimensionality</p>
<h3 id="K-Nearest-Neighbors"><a href="#K-Nearest-Neighbors" class="headerlink" title="K-Nearest-Neighbors"></a>K-Nearest-Neighbors</h3><h2 id="Chapter-4-Linear-Models-for-Regression"><a href="#Chapter-4-Linear-Models-for-Regression" class="headerlink" title="Chapter 4 - Linear Models for Regression"></a>Chapter 4 - Linear Models for Regression</h2><h2 id="Chapter-5-Linear-Models-for-Classification"><a href="#Chapter-5-Linear-Models-for-Classification" class="headerlink" title="Chapter 5 - Linear Models for Classification"></a>Chapter 5 - Linear Models for Classification</h2><h3 id="Three-Approaches-to-Classification"><a href="#Three-Approaches-to-Classification" class="headerlink" title="Three Approaches to Classification"></a>Three Approaches to Classification</h3><ul>
<li>Use discriminant functions directly</li>
<li>Infer the posterior probabilities with generative models</li>
<li>Directly construct posterior conditional class probabilities</li>
</ul>
<h3 id="Discriminant-Functions"><a href="#Discriminant-Functions" class="headerlink" title="Discriminant Functions"></a>Discriminant Functions</h3><p><strong>Discriminant Functions for $N$ classes</strong></p>
<ul>
<li>use $N$ two-way discriminant functions</li>
<li>use $\frac{N(N-1)}{2}$ two-way discriminant functions</li>
</ul>
<h3 id="Least-Square-Classification"><a href="#Least-Square-Classification" class="headerlink" title="Least Square Classification"></a>Least Square Classification</h3><ul>
<li>Reduce <strong>classification</strong> to least squares <strong>regression</strong>.</li>
<li>Treat each class as a separate problem, pick the max.</li>
</ul>
<p>Least square regression is sensitive to outliers, use logistic regression to solve this problem:</p>
<p><img src="https://s2.loli.net/2023/11/07/bdLjc4yTiRkGEI7.png" alt="image.png" style="zoom: 33%;" /></p>
<h3 id="Fisher’s-Linear-Discriminants-LDA"><a href="#Fisher’s-Linear-Discriminants-LDA" class="headerlink" title="Fisher’s Linear Discriminants(LDA)"></a>Fisher’s Linear Discriminants(LDA)</h3><p>See the <a href="https://github.com/GuTaoZi/CS329_Machine_Learning/blob/main/Lab_Materials/Lab06.Linear%20Discriminant%20Analysis/Lab6.Linear%20Discriminant%20Analysis.ipynb">course material for Lab06: LDA</a></p>
<p><img src="https://raw.githubusercontent.com/GuTaoZi/CS329_Machine_Learning/daad03239f0966cd39434cf8312ce640a226cb1f/Lab_Materials/Lab06.Linear%20Discriminant%20Analysis/images/example.png" style="zoom:50%;" /></p>
<h3 id="Perceptron"><a href="#Perceptron" class="headerlink" title="Perceptron"></a>Perceptron</h3><script type="math/tex; mode=display">
y(\mathbf x)=f(\mathbf w^\text T\phi(\mathbf x))\quad f(a) = \left\{\begin{matrix}+1,a\ge0 \\ -1, a<0\end{matrix}\right.</script><h4 id="Training"><a href="#Training" class="headerlink" title="Training"></a>Training</h4><p>Criterion:</p>
<script type="math/tex; mode=display">
E_P(\mathbf w)=-\sum\limits_{n\in\mathcal M}\mathbf w^\text T\phi_nt_n</script><p>where $t_n\in\{1,-1\}$ is the label. </p>
<script type="math/tex; mode=display">
\mathbf w^{(\tau+1)}=\mathbf w^\tau-\eta\nabla E_P(\mathbf w)=\mathbf w^\tau + \eta\phi_nt_n</script><p>where $\eta$ is the learning rate.</p>
<script type="math/tex; mode=display">
-\mathbf (w^{(\tau+1)})^\text T\phi_nt_n<-(w^{\tau})^\text T\phi_nt_n</script><p>indicating the convergence of perceptron training.</p>
<h4 id="Simplified-Training"><a href="#Simplified-Training" class="headerlink" title="Simplified Training"></a>Simplified Training</h4><script type="math/tex; mode=display">
\mathbf w^\text{new}=\mathbf w^\text{old}-0.5(y_n-t_n)x_n</script><ul>
<li>guaranteed to find a set of weights that gets the right answer on the whole training set if any such a set exists.</li>
<li>no need to choose a learning rate.</li>
</ul>
<h3 id="Probabilistic-Generative-Models"><a href="#Probabilistic-Generative-Models" class="headerlink" title="Probabilistic Generative Models"></a>Probabilistic Generative Models</h3><script type="math/tex; mode=display">
p(C_1\vert\mathbf x)=\frac{p(C_1)p(\mathbf x\vert C_1)}{p(\mathbf x)}=\frac{1}{1+e^{-z}}=\sigma(z)</script><p>where $z$ is called the logit</p>
<script type="math/tex; mode=display">
z=\ln\frac{p(C_1)p(x\vert C_1)}{\sum\limits_{i\neq 1}p(C_i)p(x\vert C_i)}=\ln \frac{p(C_1\vert \mathbf x)}{1-p(C_1\vert \mathbf x)}</script><h4 id="K-Case-Classification"><a href="#K-Case-Classification" class="headerlink" title="K-Case Classification"></a>K-Case Classification</h4><script type="math/tex; mode=display">
p(C_k\vert\mathbf x)=\frac{p(C_k)p(\mathbf x\vert C_k)}{\sum\limits_{i}p(C_i)p(x\vert C_i)}</script><h4 id="Generative-ML-Gaussian-Mixtures"><a href="#Generative-ML-Gaussian-Mixtures" class="headerlink" title="Generative: ML Gaussian Mixtures"></a>Generative: ML Gaussian Mixtures</h4><script type="math/tex; mode=display">
\begin{array}{l}
p(x, C_{1})=p(C_{1}) p(x \vert C_{1})=\pi \mathcal N(x \vert \mu_{1}, \Sigma) \\
p(x, C_{2})=p(C_{2}) p(x \vert C_{2})=(1-\pi) \mathcal N(x \vert \mu_{2}, \Sigma)
\end{array}</script><p>Likelihood $p\left(\boldsymbol{t}, \boldsymbol{X} \vert \pi, \mu_{1}, \mu_{2}, \Sigma\right)=\prod_{n=1}^{N}\left[\pi N\left(x_{n} \vert \mu_{1}, \Sigma\right)\right]^{t_{n}}\left[(1-\pi) N\left(x_{n} \vert \mu_{2}, \Sigma\right)\right]^{1-t_{n}}$</p>
<script type="math/tex; mode=display">
\begin{align*}
\pi_{M L}&=\frac{1}{N} \sum_{n=1}^{N} t_{n}=\frac{N_{1}}{N}=\frac{N_{1}}{N_{1}+N_{2}} \\
\mu_{1 \mathrm{ML}}&=\frac{1}{N_{1}} \sum_{n=1}^{N} t_{n} x_{n} \\ \mu_{2 \mathrm{ML}}&=\frac{1}{N_{2}} \sum_{n=1}^{N}\left(1-t_{n}\right) x_{n} \\
\Sigma&=\pi \Sigma_{1}+(1-\pi) \Sigma_{2} \\ \Sigma_{i \mathrm{ML}}&=\frac{1}{N_{i}} \sum_{x_{n} \in C_{i}}\left(x_{n}-\mu_{i}\right)\left(x_{n}-\mu_{i}\right)^{T} \quad \mathrm{i}=1,2
\end{align*}</script><p>这里各个参数的意义待补。</p>
<h4 id="Generative-MAP-Gaussian-Mixtures"><a href="#Generative-MAP-Gaussian-Mixtures" class="headerlink" title="Generative: MAP Gaussian Mixtures"></a>Generative: MAP Gaussian Mixtures</h4><script type="math/tex; mode=display">
\pi_0=\frac{N_{10}}{N_{10}+N_{20}}, x\in\mathcal C_i\sim(x\vert\mu_{i0},\Sigma_{i0})</script><script type="math/tex; mode=display">
\pi_\text{MAP} = \frac{N_1+N_{10}}{N+N_0}=\frac{N_1+N_{10}}{N_1+N_2+N_{10}+N_{20}}</script><script type="math/tex; mode=display">
\left\{\begin{align*}\Sigma_{i\text{MAP}}^{-1}&=\Sigma_{i\text{ML}}^{-1}+\Sigma_{i0}^{-1}\\\Sigma_{i\text{MAP}}^{-1}\mu_{i\text{MAP}}&=\Sigma_{i\text{ML}}^{-1}\mu_{i\text{ML}}+\Sigma_{i0}^{-1}\mu_{i0}\end{align*}\right.</script><p>这里各个参数的意义待补。</p>
<h3 id="Probabilistic-Discriminative-Models"><a href="#Probabilistic-Discriminative-Models" class="headerlink" title="Probabilistic Discriminative Models"></a>Probabilistic Discriminative Models</h3><h3 id="Bayesian-Information-Criterion"><a href="#Bayesian-Information-Criterion" class="headerlink" title="Bayesian Information Criterion"></a>Bayesian Information Criterion</h3>]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
        <tag>Artificial Intelligence</tag>
      </tags>
  </entry>
  <entry>
    <title>CS213 Project Report (lite)</title>
    <url>/2022/08/08/CS213%20Project%20Report%20(lite)/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试⚠" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="50708acc4f1c0b12684af31658009d1dcb9b9e32e3351910470bba131d995b72"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">CS213使用的数据源是？</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Database</tag>
      </tags>
  </entry>
  <entry>
    <title>CS323 Compilers Notes</title>
    <url>/2023/09/12/CS323_Notes/</url>
    <content><![CDATA[<h2 id="Outline"><a href="#Outline" class="headerlink" title="Outline"></a>Outline</h2><ol>
<li>Introduction</li>
<li>Lexical Analysis</li>
<li>Finite Automata</li>
<li>Syntax Analysis</li>
<li>Syntax-Directed Translation</li>
<li>Intermediate-Code Generation</li>
</ol>
<h2 id="Lecture-1-Introduction"><a href="#Lecture-1-Introduction" class="headerlink" title="Lecture 1 - Introduction"></a>Lecture 1 - Introduction</h2><blockquote>
<p>To be continued</p>
</blockquote>
<h2 id="Lecture-2-Lexical-Analysis"><a href="#Lecture-2-Lexical-Analysis" class="headerlink" title="Lecture 2 - Lexical Analysis"></a>Lecture 2 - Lexical Analysis</h2><h3 id="The-Role-of-Lexical-Analyzer"><a href="#The-Role-of-Lexical-Analyzer" class="headerlink" title="The Role of Lexical Analyzer"></a>The Role of Lexical Analyzer</h3><ul>
<li>Read the input characters of the source program</li>
<li>Group them into lexemes</li>
<li><p>Produce a sequence of tokens</p>
</li>
<li><p>Add lexemes into the symbol table when necessary</p>
</li>
</ul>
<p><img src="https://s2.loli.net/2023/09/18/SGh7Y2mHFJ8bM63.png" alt="image.png"></p>
<p><strong>lexeme</strong>: a string of characters that is a lowest-level syntactic unit in programming languages</p>
<p><strong>token</strong>: a syntactic category representing a class of lexemes. Formally, it is a pair <em><token name, attribute value></em></p>
<ul>
<li><strong>Token name</strong> (compulsory): an abstract symbol representing the kind of the token</li>
<li><strong>Attribute value</strong> (optional): points to the symbol table</li>
</ul>
<p><strong>pattern</strong>:  a description of the form that the lexemes of the token may take</p>
<p>e.g.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;CS%d&quot;</span>,course_id);</span><br></pre></td></tr></table></figure>
<div class="table-container">
<table>
<thead>
<tr>
<th>Lexeme</th>
<th><code>printf</code></th>
<th><code>course_id</code></th>
<th><code>&quot;CS%d&quot;</code></th>
<th><code>(</code></th>
<th>…</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Token</strong></td>
<td>id</td>
<td>id</td>
<td>literal</td>
<td>left_parenthesis</td>
<td>…</td>
</tr>
</tbody>
</table>
</div>
<p>An <code>id</code> token is associated with:</p>
<ol>
<li>its lexeme</li>
<li>type</li>
<li>the declaration location(where first found)</li>
</ol>
<blockquote>
<p>Q: function?</p>
</blockquote>
<p>Token attributes are stored in the <strong>symbol table</strong>.</p>
<p><strong>Lexical error</strong>: none of the patterns for tokens match any prefix of the remaining input.</p>
<h3 id="Specification-of-Tokens-Regex"><a href="#Specification-of-Tokens-Regex" class="headerlink" title="Specification of Tokens (Regex)"></a>Specification of Tokens (Regex)</h3><p><strong>Alphabet</strong>: any <u>finite</u> set of symbols</p>
<p><strong>String</strong>: (defined over an alphabet) a <u>finite</u> sequence of symbols drawn from an alphabet</p>
<p><strong>Prefix, Proper Prefix, Suffix, Proper Suffix</strong>: n+1, n-1, n+1, n-1</p>
<p><strong>Substring, Proper Substring, Subsequences</strong>: n(n+1)/2+1, n(n+1)/2-1, 2^n</p>
<p><strong>String Operations</strong></p>
<ul>
<li><strong>Concatenation</strong>: $x$=butter, $y$=fly, $xy$=butterfly</li>
<li><strong>Exponentiation</strong>: $s^0=\epsilon, s^1=s, s^i=s^{i-1}s$</li>
</ul>
<p><strong>Language</strong>: any <strong>countable set</strong>$^1$ of strings over some fixed alphabet</p>
<p>✅The set containing only the empty string $\{\epsilon\}$ is a language, denoted $\emptyset$.</p>
<p>✅The set of all grammatically correct English sentences</p>
<p>✅The set of all syntactically well-formed C programs</p>
<blockquote>
<p>$^1$A countable set is a set with the same cardinality (number of elements) as some subset of the set of natural numbers.</p>
</blockquote>
<p><strong>Operations on Languages</strong></p>
<ul>
<li>Union $L\bigcup M=\{s|s \text{ is in } L\text{ or }s \text{ is in }M\}$</li>
<li>Concatenation $LM=\{s|s \text{ is in } L\text{ and }s \text{ is in }M\}$</li>
<li>Kleene closure $L^\star=\bigcup_{i=0}^{\infty}L^i$</li>
<li>Positive closure $L^+=\bigcup_{i=1}^{\infty}L^i$</li>
</ul>
<p><strong>Regex</strong> over an alphabet $\Sigma$</p>
<ul>
<li><p><strong>BASIS</strong></p>
<ul>
<li>$\epsilon$ is a regex, $L(\epsilon)=\{\epsilon\}$</li>
<li>If $a$ is a symbol in $\Sigma$, then $a$ is a regex, $L(a)=\{a\}$</li>
</ul>
</li>
<li><p><strong>INDUCTION</strong>: Regex $r$ and $s$ denote the languages $L(r)$ and $L(s)$</p>
<script type="math/tex; mode=display">
\begin{align*}
&(r)|(s) &\rightarrow &\quad L(r)\bigcup L(s)\\
&(r)(s) &\rightarrow &\quad L(r)L(s)\\
&(r)^\star &\rightarrow &\quad (L(r))^\star\\
&(r) &\rightarrow &\quad L(r)
\end{align*}</script></li>
</ul>
<p><strong>Precedence</strong>: closure $^\star$ &gt; concatenation &gt; union $|$</p>
<p><strong>Associativity</strong>: left associative</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>LAW</th>
<th>DESCRIPTION</th>
</tr>
</thead>
<tbody>
<tr>
<td>$r\vert s=s\vert r$</td>
<td>$\vert $ is commutative</td>
</tr>
<tr>
<td>$r\vert (s\vert t)=(r\vert s)\vert t$</td>
<td>$\vert $ is associative</td>
</tr>
<tr>
<td>$r(st)=(rs)t$</td>
<td>Concatenation is associative</td>
</tr>
<tr>
<td>$r(s\vert t)=rs\vert rt;\ (s\vert t)r=sr\vert tr$</td>
<td>Concatenation distributes over $\vert $</td>
</tr>
<tr>
<td>$r=\epsilon r=r\epsilon$</td>
<td>$\epsilon$ is the identity for concatenation</td>
</tr>
<tr>
<td>$r^\star=(r\vert \epsilon)^\star$</td>
<td>$\epsilon$ is guaranteed in a closure</td>
</tr>
<tr>
<td>$r^\star=r^{\star\star}$</td>
<td>$^\star$ is idempotent</td>
</tr>
</tbody>
</table>
</div>
<p>e.g. Regex for C identifiers</p>
<p>$id\rightarrow letter_(letter_|digit)^\star$</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(A|B|...|Z|a|b|...|z|_)((A|B|...|Z|a|b|...|z|_)|(0|1|</span><br><span class="line">...|9))*</span><br></pre></td></tr></table></figure>
<p><strong>Regular Definitions</strong>: For notational convenience, we can give names to certain regexes and use those names in subsequent expressions.</p>
<p><strong>Notational extensions</strong></p>
<ul>
<li>$r^+=rr^\star,\ r^\star=r^+|\epsilon$</li>
<li>$r?=r|\epsilon$</li>
<li>$[a_1a_2…a_n]=a_1|a_2|…|a_n$, $[a-e]=a|b|c|d|e$</li>
</ul>
<h3 id="Recognition-of-Tokens-Transition-Diagrams"><a href="#Recognition-of-Tokens-Transition-Diagrams" class="headerlink" title="Recognition of Tokens (Transition Diagrams)"></a>Recognition of Tokens (Transition Diagrams)</h3><p><strong>whitespace token</strong>: ws→ (blank | tab | newline)$^+$</p>
<p>The lexical analyzer restarts from the next character when recognizing a whitespace token.</p>
<p><strong>Transition Diagrams</strong></p>
<p><img src="https://s2.loli.net/2023/09/18/5u4hoNQi9xWJHtz.png" alt="image.png"></p>
<p><strong>States</strong></p>
<ul>
<li>conditions that could occur during the process of scanning</li>
<li>start state: indicated by starting edge</li>
<li>accepting states(final): double circles </li>
</ul>
<p><strong>The Retract Action</strong></p>
<p>Retract the <code>forward</code> pointer when falling into $\star$ states. </p>
<p><strong>Edges</strong>: from one state to another</p>
<p><strong>Handling Reserved Words</strong></p>
<blockquote>
<p>Problem: the transition diagram that searches for identifiers can also recognize reserved words</p>
</blockquote>
<ul>
<li><p>Pre-install strategy</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span>(<span class="built_in">getToken</span>(),<span class="built_in">installID</span>())</span><br></pre></td></tr></table></figure>
</li>
<li><p>Multi-state transition diagrams strategy</p>
<p>Create a separate transition diagram with a <u>high priority</u> for each keyword</p>
</li>
</ul>
<p><strong>Building the Entire Lexical Analyzer</strong></p>
<ul>
<li>Try the transition diagram for each type of token sequentially</li>
<li>Run transition diagrams in parallel</li>
<li>Combining all transition diagrams into one</li>
</ul>
<h2 id="Lecture-3-Finite-Automata"><a href="#Lecture-3-Finite-Automata" class="headerlink" title="Lecture 3 - Finite Automata"></a>Lecture 3 - Finite Automata</h2><h3 id="Automata"><a href="#Automata" class="headerlink" title="Automata"></a>Automata</h3><p>Finite automata are graphs simply saying “yes” or “no” about each possible input string(pattern match).</p>
<ul>
<li><p>Nondeterministic finite automata</p>
<blockquote>
<p>A symbol can label several edges out of the same state (allowing multiple target states), and the empty string ! is a possible label.</p>
</blockquote>
</li>
<li><p>Deterministic finite automata</p>
<blockquote>
<p>For each state and for each symbol in the input alphabet, there is exactly one edge with that symbol leaving that state.</p>
</blockquote>
</li>
</ul>
<p><strong>Nondeterministic Finite Automata</strong>: 5-tuple</p>
<ol>
<li>A finite set of states $S$</li>
<li>A set of input symbols $\Sigma$, the <strong>input alphabet</strong>. We assume that the empty string $\epsilon$ is never a member of $\Sigma$ </li>
<li>A <strong>transition function</strong> that gives, for each state, and for each symbol in $\Sigma\cup\{\epsilon\}$ <u>a set of next states</u> </li>
<li>A <strong>start state</strong> (or initial state) $s_0$ from $S$ </li>
<li>A set of <strong>accepting states</strong> (or final states) $F$, a subset of $S$</li>
</ol>
<p><strong>Transition Table</strong></p>
<p><img src="https://s2.loli.net/2023/09/25/3sFkCmprPOjaqN7.png" alt="image.png" style="zoom:50%;" /></p>
<p><strong>Acceptance of Input Strings</strong></p>
<p>An NFA accepts an input string $x$ <strong>if and only if</strong>:</p>
<p>There is a path in the transition graph from the start state to one accepting state, such that the symbols along the path form $x$ ($\epsilon$ labels are ignored).</p>
<p>The language defined or accepted by an NFA: </p>
<p>The set of strings labelling some path from the start state to an accepting state.</p>
<p><strong>Deterministic Finite Automata</strong>: special NFA s.t.</p>
<ul>
<li>There are no moves on input $\epsilon$</li>
<li>For each state $s$ and input symbol $a$, there is exactly one edge out of $s$ labeled $a$ (i.e., exactly one target state)</li>
</ul>
<h3 id="From-Regex-to-Automata"><a href="#From-Regex-to-Automata" class="headerlink" title="From Regex to Automata"></a>From Regex to Automata</h3><p>Regex→NFA→DFA</p>
<p>Algorithms: Thompson’s construction + subset construction</p>
<h4 id="Subset-construction"><a href="#Subset-construction" class="headerlink" title="Subset construction"></a>Subset construction</h4><p>Each state of the constructed DFA corresponds to a set of NFA states</p>
<p>The algorithm simulates “in parallel” all possible moves an NFA can make on a given input string to map a set of NFA states to a DFA state.</p>
<p><strong>Operations</strong></p>
<ul>
<li><p>$\epsilon$-closure($s$)</p>
<p>Set of NFA states reachable from NFA state s on $\epsilon$- transitions alone.</p>
<p>(Computed by DFS/BFS)</p>
</li>
<li><p>$\epsilon$-closure($T$)</p>
<p>Set of NFA states reachable from some NFA state $s$ in set $T$ on $\epsilon$-transitions alone</p>
</li>
<li><p>move($T, a$)</p>
<p>Set of NFA states to which there is a transition on input symbol $a$ from some state $s$ in $T$ (i.e., the target states of those states in $T$ when seeing $a$)</p>
</li>
</ul>
<p><strong>Dstates &amp; Dtran</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">while(there is an unmarked state T in Dstates)</span><br><span class="line">&#123;</span><br><span class="line">	mark T;</span><br><span class="line">	for(each input symbol a)</span><br><span class="line">	&#123;</span><br><span class="line">		U=epsilon-closure(move(T,a));</span><br><span class="line">		if(U is not in Dstates)</span><br><span class="line">		&#123;</span><br><span class="line">			add U as an unmarked state to Dstates;</span><br><span class="line">		&#125;</span><br><span class="line">		Dtran[T,a]=U;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Thompson’s-Construction"><a href="#Thompson’s-Construction" class="headerlink" title="Thompson’s Construction"></a>Thompson’s Construction</h4><p>The algorithm works recursively by splitting a regex into subexpressions, from which the NFA will be constructed using the following rules:</p>
<ul>
<li><p>Two basis rules: handle subexpressions with no operators</p>
<p><img src="https://s2.loli.net/2023/09/25/pMlOHkGaq45ifB2.png" alt="image.png" style="zoom: 33%;" /></p>
</li>
<li><p>Three inductive rules: construct larger NFA’s from the smaller NFA’s for subexpressions</p>
<ul>
<li><p>Union</p>
<p><img src="https://s2.loli.net/2023/09/25/dGVNmClnbRIA8PJ.png" alt="image.png" style="zoom: 33%;" /></p>
</li>
<li><p>Concatenation</p>
<p><img src="https://s2.loli.net/2023/09/25/aLXCdiM1eEKwOZ9.png" alt="image.png" style="zoom:33%;" /></p>
</li>
<li><p>Kleene Closure</p>
<p><img src="https://s2.loli.net/2023/09/25/nDjpL8lB63obcd7.png" alt="image.png" style="zoom:33%;" /></p>
</li>
</ul>
</li>
</ul>
<h3 id="DFA’s-for-Lexical-Analyzers"><a href="#DFA’s-for-Lexical-Analyzers" class="headerlink" title="DFA’s for Lexical Analyzers"></a>DFA’s for Lexical Analyzers</h3><p><strong>Combining NFA’s</strong></p>
<ul>
<li><p>Why?</p>
<p>A single automaton to recognize lexemes matching any pattern (in the lex program)</p>
</li>
<li><p>How?</p>
<p>Introduce a new start state with $\epsilon$-transitions to each of the start states of the NFA’s for pattern $p_i$</p>
</li>
</ul>
<p>The languages of big NFA is the <strong>union</strong> of the languages of small NFA’s.</p>
<p>Different <strong>accepting states</strong> correspond to different <strong>patterns</strong>.</p>
<p><strong>DFA’s for Lexical Analyzers</strong></p>
<ul>
<li>Convert the NFA for all the patterns into an equivalent DFA</li>
<li>An accepting state of the DFA corresponds to a subset of the NFA states, in which at least one is an accepting NFA state<ul>
<li>If there are multiple accepting NFA states, this means that <strong>conflicts</strong> arise (the prefix of the input string matches multiple patterns)</li>
<li>Solution for conflicts: pattern priority</li>
</ul>
</li>
</ul>
<h2 id="Lecture-4-Syntax-Analysis"><a href="#Lecture-4-Syntax-Analysis" class="headerlink" title="Lecture 4 - Syntax Analysis"></a>Lecture 4 - Syntax Analysis</h2><h3 id="Introduction-Syntax-and-Parsers"><a href="#Introduction-Syntax-and-Parsers" class="headerlink" title="Introduction: Syntax and Parsers"></a>Introduction: Syntax and Parsers</h3><h4 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h4><p>The syntax can be specified by <strong>context-free grammars</strong></p>
<ul>
<li>Grammar gives syntactic specification of a programming language, defining its structure.</li>
<li>For certain grammars, we can automatically construct an efficient parser</li>
<li>A good grammar helps <strong>translate source programs</strong> into correct object code and <strong>detect errors</strong>.</li>
</ul>
<h4 id="Parsers’-Roles"><a href="#Parsers’-Roles" class="headerlink" title="Parsers’ Roles"></a>Parsers’ Roles</h4><ul>
<li>Obtain a string of tokens from the lexical analyzer</li>
<li>Verify that the string of token names can be generated by the grammar for the source language</li>
</ul>
<h4 id="Classification-of-Parsers"><a href="#Classification-of-Parsers" class="headerlink" title="Classification of Parsers"></a>Classification of Parsers</h4><ul>
<li>Universal parsers<ul>
<li>Some methods (e.g., Earley’s algorithm) can parse any grammar</li>
<li>too inefficient to be used in practice</li>
</ul>
</li>
<li>Top-down parsers<ul>
<li>Construct parse trees from the top (root) to the bottom (leaves)</li>
</ul>
</li>
<li>Bottom-up parsers<ul>
<li>Construct parse trees from the bottom (leaves) to the top (root)</li>
</ul>
</li>
</ul>
<h3 id="Context-Free-Grammars"><a href="#Context-Free-Grammars" class="headerlink" title="Context-Free Grammars"></a>Context-Free Grammars</h3><h4 id="Formal-definition-of-CFG"><a href="#Formal-definition-of-CFG" class="headerlink" title="Formal definition of CFG"></a>Formal definition of CFG</h4><p>4 components of a CFG:</p>
<ul>
<li><strong>Terminals</strong>: Basic symbols token names</li>
<li><strong>Nonterminals</strong>: Syntactic variables that denote sets of strings</li>
<li><strong>Start symbol(nonterminal)</strong>: The set of strings denoted by the start symbol is the language generated by the CFG</li>
<li><strong>Productions</strong>: Specify how the terminals and nonterminals can be combined to form strings<ul>
<li>Format: $\text{head}\rightarrow\text{body}$</li>
<li>head must be a nonterminal; body consists of zero or more terminals/nonterminals</li>
</ul>
</li>
</ul>
<h4 id="Derivation-and-parse-tree"><a href="#Derivation-and-parse-tree" class="headerlink" title="Derivation and parse tree"></a>Derivation and parse tree</h4><p><strong>Derivation</strong>: Starting with the start symbol, nonterminals are rewritten using productions until only terminals remain.</p>
<p><strong>Examples.</strong></p>
<p>CFG: $E\rightarrow -E\ \vert\ E+E\ \vert\ E\times E\ \vert\ (E)\ \vert\ \ \textbf{id}$</p>
<p><strong>Derivation Notations</strong></p>
<ul>
<li>$\Rightarrow$ means “derives in one step”</li>
<li>$\mathop{\Rightarrow}\limits^{\star}$ means “derives in zero or more steps”</li>
<li>$\mathop{\Rightarrow}\limits^{+}$ means “derives in one or more steps”</li>
</ul>
<p><strong>Terminologies</strong></p>
<ul>
<li>For the start symbol $S$ of a grammar $G$, $\alpha$ is a <strong>sentential form</strong> of $G$ if $S\mathop{\Rightarrow}\limits^{\star}\alpha$.</li>
<li>A sentential form without nonterminals is a <strong>sentence</strong>.</li>
<li>The <strong>language</strong> generated by a grammar is its set of <strong>sentences</strong>.</li>
</ul>
<p><strong>Leftmost/Rightmost Derivations</strong></p>
<p>The leftmost/rightmost nonterminal in each sentential form is always chosen to be replaced.</p>
<p><strong>Parse Trees</strong></p>
<ul>
<li>Root node: start symbol</li>
<li>Leaf node: terminal symbol</li>
<li>Interior node: nonterminal symbol, represents the application of a production</li>
</ul>
<p>The leaves, from left to right, constitute a sentential form of the grammar, which is called the <strong>yield/frontier</strong> of the tree.</p>
<p>Many-to-one: derivations→parse trees</p>
<p>One-to-one: leftmost/rightmost derivations→parse trees</p>
<h4 id="Ambiguity"><a href="#Ambiguity" class="headerlink" title="Ambiguity"></a>Ambiguity</h4><p>Given a grammar, if there are <strong>more than one parse tree for some sentence</strong>, it is ambiguous.</p>
<p>The grammar of a programming language needs to be unambiguous. Otherwise, there will be multiple ways to interpret a program</p>
<p>In some cases, it is convenient to use carefully chosen ambiguous grammars, together with disambiguating rules to discard undesirable parse trees</p>
<h4 id="CFG-vs-regexp"><a href="#CFG-vs-regexp" class="headerlink" title="CFG vs. regexp"></a>CFG vs. regexp</h4><p>CFGs are more expressive than regular expressions.</p>
<ol>
<li>$\forall L$ expressible by  a regex can also be expressed by a grammar.</li>
<li>$\exists L$ expressible by  a grammar can not be expressed by any regex.</li>
</ol>
<p><strong>Construct CFG from a Regex</strong></p>
<ul>
<li>State of NFA → nonterminal symbol</li>
<li>State transition on input $a$ → production $A_i\rightarrow a A_j$</li>
<li>State transition on input $\epsilon$ → production $A_i\rightarrow A_j$</li>
<li>Accepting state → $A_i\rightarrow \epsilon$</li>
<li>Start state → start symbol</li>
</ul>
<p><strong>A Context-free Language Fails Regex</strong></p>
<script type="math/tex; mode=display">
L=\{a^nb^n\vert n>0\}</script><p>CFG: $S\rightarrow aSb\vert ab$</p>
<p>$L$  cannot be described by regular expressions. No DFA accepts $L$.</p>
<p><strong>Proof by Contradiction</strong></p>
<ul>
<li>Suppose there is a DFA $D$ with $k$ states and accepts $L$.</li>
<li>For a string $a^{k+1}b^{k+1}$ of $L$, when processing $a^{k+1}$, $D$ must enter a state $s$ more than once.</li>
<li>Assume that $D$ enters state $s$ after reading the $i^\text{th}$ and $j^\text{th}$ $a$ ($i\ne j, i\le k+1,j\le k+1$).</li>
<li>$D$ also accepts $a^jb^j$, there exists a path labeled $b^j$ from $s$ to an accepting state.</li>
<li>The path labeled $a^i$ reaches $s$, then reaches an accepting state along path labeled $b^j$, so $D$ accepts $a^ib^j$. Contradiction.</li>
</ul>
<h3 id="Overview-of-Parsing-Techniques"><a href="#Overview-of-Parsing-Techniques" class="headerlink" title="Overview of Parsing Techniques"></a>Overview of Parsing Techniques</h3><p>Parsing: whether the string of token names can be generated by the grammar.</p>
<p><strong>Top-Down Parsing</strong></p>
<p>Constructing a parse tree for the input string, starting from the root and creating the nodes of the parse tree in preorder (depth-first).</p>
<ol>
<li><strong>Predict</strong>: At each step of parsing, determine the production to be applied for the leftmost nonterminal.</li>
<li><strong>Match</strong>: Match the terminals in the chosen production’s body with the input string.</li>
</ol>
<ul>
<li>Equivalent to finding a leftmost derivation.</li>
<li>At each step, the frontier of the tree is a left-sentential form.</li>
</ul>
<blockquote>
<p>Key decision: Which production to apply at each step?</p>
</blockquote>
<p><strong>Bottom-Up Parsing</strong></p>
<p>Constructing a parse tree for an input string beginning at the leaves (terminals) and working up towards the root (start symbol of the grammar)</p>
<ol>
<li><strong>Shift</strong>: Move an input symbol onto the stack</li>
<li><strong>Reduce</strong>: Replace a string at the stack top with a nonterminal that can produce the string (the reverse of a rewrite step in a derivation)</li>
</ol>
<ul>
<li>Equivalent to finding a rightmost derivation.</li>
<li>At each step, stack + remaining input is a right-sentential form.</li>
</ul>
<blockquote>
<p>Key decision: When to shift/reduce? Which production to apply when reducing?</p>
</blockquote>
<h3 id="Top-Down-Parsing"><a href="#Top-Down-Parsing" class="headerlink" title="Top-Down Parsing"></a>Top-Down Parsing</h3><h4 id="Recursive-Descent-Parsing"><a href="#Recursive-Descent-Parsing" class="headerlink" title="Recursive-Descent Parsing"></a>Recursive-Descent Parsing</h4><p>One procedure for each nonterminal, handling a substring of the input.</p>
<p><strong>Naive procedure</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">A</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Choose an A-production, A → X[<span class="number">1</span>-k];</span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">1</span> to k</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(X[i] is a nonterminal)</span><br><span class="line">        &#123;</span><br><span class="line">            call procedure X[i]();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(X[i] equals the current input symbol a)</span><br><span class="line">        &#123;</span><br><span class="line">            advance the input too the next symbol;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/* Failed to match using A-production A→X[1-k] */</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Backtracking</strong></p>
<p>General recursive-descent parsing may require repeated scans over the input (backtracking).</p>
<ul>
<li>Try each possible production in some order.</li>
<li>When failure occurs, return, reset the input pointer and try another A-production.</li>
</ul>
<h4 id="Looking-Ahead"><a href="#Looking-Ahead" class="headerlink" title="Looking Ahead"></a><strong>Looking Ahead</strong></h4><p>Left recursion in a CFG traps the recursive-descent parser into an infinite loop.</p>
<p>Looking ahead, checking the next character avoids bad choices.</p>
<p><strong>Computing $\text{FIRST}(X)$</strong></p>
<p>$\text{FIRST}(X)$ denotes the set of beginning terminals of strings derived from $X$.</p>
<ul>
<li>If $X$ is a terminal, $\text{FIRST}(X)=\{X\}$</li>
<li>If $X$ is a nonterminal and $X\rightarrow \epsilon$, then add $\epsilon$ to $\text{FIRST}(X)$.</li>
<li>If $X$ is a nonterminal and $X\rightarrow Y_1Y_2\cdots Y_k\ \ (k\ge1)$ is a production<ul>
<li>If for some $i$, $a\in \text{FIRST}(Y_i)$ and $\epsilon \in \text{FIRST}(Y_1),\cdots,\text{FIRST}(Y_{i-1})$, then add $a$ to $\text{FIRST}(X)$.</li>
<li>If $\epsilon\in \text{FIRST}(Y_1),\cdots,\text{FIRST}(Y_k)$, then add $\epsilon$ to $\text{FIRST}(X)$.</li>
</ul>
</li>
</ul>
<p><strong>Computing $\text{FIRST}(X_1X_2\cdots X_n)$</strong></p>
<ul>
<li>Add all non-$\epsilon$ symbols of $\text{FIRST}(X_1)$ to $\text{FIRST}(X_1X_2\cdots X_n)$.</li>
<li>If for some $i$, $\epsilon\in \text{FIRST}(X_1),\cdots,\text{FIRST}(X_{i-1})$, then add  all non-$\epsilon$ symbols of $\text{FIRST}(X_i)$ to $\text{FIRST}(X_1X_2\cdots X_n)$.</li>
<li>If $\forall i,\ \epsilon\in \text{FIRST}(X_i)$, then add $\epsilon$ to $\text{FIRST}(X_1X_2\cdots X_n)$.</li>
</ul>
<p><strong>Computing $\text{FOLLOW}$</strong></p>
<p>Whether to choose: $A\rightarrow \alpha,\ \epsilon\in\text{FIRST}(\alpha)$?</p>
<ul>
<li>For start symbol $S$, add right endmarker $$$ to $\text{FOLLOW}(S)$.</li>
<li>Apply the rules below, until all $\text{FOLLOW}$ sets do not change:<ul>
<li>For production $A\rightarrow \alpha B\beta$, add $\text{FIRST}(\beta)/\epsilon$ to $\text{FOLLOW}(B)$</li>
<li>For production $A\rightarrow \alpha B$ (or $\epsilon\in \text{FIRST}(\beta)$), then add $\text{FOLLOW}(A)$ to $\text{FOLLOW}(B)$.</li>
</ul>
</li>
</ul>
<blockquote>
<p>By definition, $\epsilon$ will not appear in any $\text{FOLLOW}$ set.</p>
</blockquote>
<p>If the next input symbol is in $\text{FIRST(body)}$, the production $\text{head}\rightarrow \text{body}$ may be a good choice.</p>
<p>If the next input symbol is in $\text{FOLLOW(head)}$, the production $\text{head}\rightarrow\epsilon$ may be a good choice.</p>
<h4 id="LL-1-Grammars"><a href="#LL-1-Grammars" class="headerlink" title="LL(1) Grammars"></a><strong>LL(1) Grammars</strong></h4><p>No backtracking recursive-descent parser can be constructed for LL(1)</p>
<ul>
<li>scanning the input from left to right.</li>
<li>producing a leftmost derivation (top-down parsing).</li>
<li>using one input symbol of lookahead each step to make parsing decision.</li>
</ul>
<p>A grammar $G$ is LL(1) IFF for any two distinct productions $A\rightarrow \alpha\vert\beta$:</p>
<ul>
<li>$\text{FIRST}(\alpha)\bigcap\text{FIRST}(\beta)=\emptyset$</li>
<li>If $\epsilon\in\text{FIRST}(\beta)$, then $\text{FIRST}(\alpha)\bigcap\text{FOLLOW}(A)=\emptyset$ and vice versa.</li>
</ul>
<blockquote>
<p>There is a unique choice of production at each step by looking ahead.</p>
</blockquote>
<h4 id="Parsing-Table"><a href="#Parsing-Table" class="headerlink" title="Parsing Table"></a>Parsing Table</h4><p>For a nonterminal $A$ and a symbol $a$ on its input stream, determines which production the parser should choose.</p>
<p>The parsing table of an LL(1) parser has no entries with multiple productions.</p>
<p>For each production $A\rightarrow\alpha$ of grammar $G$, do the following:</p>
<ol>
<li>For each terminal $a$ in $\text{FIRST}(\alpha)$, add $A\rightarrow\alpha$ to $M[A,a]$</li>
<li>If $\epsilon\in\text{FIRST}(\alpha)$, then for each terminal $b$ (including the right endmarker $) in $\text{FOLLOW}(A)$, add $A\rightarrow\alpha$ to $M[A,b]$</li>
<li>Set all empty entries in the table to <strong>error</strong>.</li>
</ol>
<h4 id="Non-Recursive-Predictive-Parsing"><a href="#Non-Recursive-Predictive-Parsing" class="headerlink" title="Non-Recursive Predictive Parsing"></a>Non-Recursive Predictive Parsing</h4><p>A non-recursive predictive parser can be built by explicitly maintaining a stack.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">let a be the first symbol of w;</span><br><span class="line">let X be the top stack symbol;</span><br><span class="line"><span class="keyword">while</span> ( X ≠ $ )</span><br><span class="line">&#123; <span class="comment">/* stack is not empty */</span></span><br><span class="line">    <span class="keyword">if</span> ( X = a ) pop the stack <span class="keyword">and</span> let a be the next symbol of w;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( X is a terminal) <span class="built_in">error</span>(); <span class="comment">/* X can only match a, cannot be another terminal */</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( M[X, a] is an error entry ) <span class="built_in">error</span>();</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( M[X, a] = X -&gt; Y[<span class="number">1.</span>..k])</span><br><span class="line">    &#123;</span><br><span class="line">        output the production X -&gt; Y[<span class="number">1.</span>..k];</span><br><span class="line">        pop the stack;</span><br><span class="line">        push Y[k..<span class="number">.1</span>] onto the stack, with Y[<span class="number">1</span>] on top; <span class="comment">/* order is critical */</span></span><br><span class="line">    &#125;</span><br><span class="line">    let X be the top stack symbol;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Bottom-Up-Parsing"><a href="#Bottom-Up-Parsing" class="headerlink" title="Bottom-Up Parsing"></a>Bottom-Up Parsing</h3><h4 id="Simple-LR-SLR"><a href="#Simple-LR-SLR" class="headerlink" title="Simple LR(SLR)"></a>Simple LR(SLR)</h4><h5 id="Shift-Reduce-Parsing"><a href="#Shift-Reduce-Parsing" class="headerlink" title="Shift-Reduce Parsing"></a>Shift-Reduce Parsing</h5><ol>
<li>Shift zero or more input symbols onto the stack, until it is ready to reduce a string $\beta$ on top of the stack</li>
<li>Reduce $\beta$ to the head of the appropriate production</li>
</ol>
<h5 id="LR-k-Parsers"><a href="#LR-k-Parsers" class="headerlink" title="LR(k) Parsers"></a>LR(k) Parsers</h5><ul>
<li>left-to-right scan of the input</li>
<li>construct a rightmost derivation in reverse</li>
<li>use $k$ input symbols of lookahead in making parsing decisions</li>
</ul>
<p>An LR parser makes shift-reduce decisions by maintaining <strong>states</strong> to keep track of what have been seen during parsing.</p>
<h5 id="LR-0-Items"><a href="#LR-0-Items" class="headerlink" title="LR(0) Items"></a>LR(0) Items</h5><p>An <strong>item</strong> is a production with a dot, indicating how much we have seen at a given time point in the parsing process.</p>
<p>The production $A\rightarrow \epsilon$ generates only $A\rightarrow \cdot$</p>
<p><strong>States</strong>: sets of LR(0) items</p>
<p><strong>Canonical LR(0) collection</strong>:</p>
<p>One collection of states, provides <u>the basis for constructing a DFA</u> to make parsing decisions.</p>
<h5 id="Augmented-Grammar"><a href="#Augmented-Grammar" class="headerlink" title="Augmented Grammar"></a>Augmented Grammar</h5><p>Add a new production $S^\prime\rightarrow S$ to introduce a new start symbol $S^\prime$.</p>
<script type="math/tex; mode=display">
L(G)=L(G^\prime)</script><p>Acceptance occurs IFF the parser is about to reduce by $S^\prime\rightarrow S$.</p>
<h5 id="Closure-of-Item-Sets"><a href="#Closure-of-Item-Sets" class="headerlink" title="Closure of Item Sets"></a>Closure of Item Sets</h5><p>Grammar $G$, set of items $I$</p>
<ol>
<li>Add every item in $I$ to $\text{CLOSURE} (I)$</li>
<li>If $A\rightarrow \alpha\cdot B\beta$ is in $\text{CLOSURE} (I)$ and $B\rightarrow \gamma$ is a production, then add the item $B\rightarrow\cdot \gamma$ to $\text{CLOSURE} (I)$. Repeat until no more new items can be added to $\text{CLOSURE} (I)$.</li>
</ol>
<h5 id="The-Function-GOTO"><a href="#The-Function-GOTO" class="headerlink" title="The Function GOTO"></a>The Function GOTO</h5><p>$\text{GOTO}(I,X)$ is defined to be the closure of the set of all items $[A\rightarrow \alpha X\cdot\beta]$, where $[A\rightarrow \alpha\cdot X\beta]$ is in $I$.</p>
<p><img src="https://s2.loli.net/2023/10/30/oQ9C7ZeFxlgnGVz.png" alt="image.png" style="zoom:50%;" /></p>
<h5 id="LR-0-Automaton"><a href="#LR-0-Automaton" class="headerlink" title="LR(0) Automaton"></a>LR(0) Automaton</h5><ul>
<li>states: item sets in canonical LR(0) collection</li>
<li>transitions: GOTO</li>
<li>start state: $\text{CLOSURE}(\{[S’\rightarrow \cdot S]\})$</li>
</ul>
<p><strong>Shift</strong> when the state has a transition on the incoming symbol.</p>
<p><strong>Reduce</strong> when there is no further move, push a new state into the stack corresponding to the reduced symbol.</p>
<h5 id="LR-Parser-Structure"><a href="#LR-Parser-Structure" class="headerlink" title="LR Parser Structure"></a>LR Parser Structure</h5><ul>
<li>input, output, stack, driver program, parsing table(ACTION+GOTO)</li>
<li>only the parsing table differs (depending on the parsing algorithm)</li>
<li>stack-top state + next input terminal → next action</li>
</ul>
<h5 id="ACTION-i-a"><a href="#ACTION-i-a" class="headerlink" title="ACTION$[i,a]$"></a>ACTION$[i,a]$</h5><ul>
<li>state $i$, terminal $a$</li>
<li>Shift $j$: shift input $a$ to the stack, use state $j$ to represent $a$.</li>
<li>Reduce $A\rightarrow \beta$: reduce stack-top $\beta$ to non-terminal $A$.</li>
<li>Accept: accept the input, finish parsing.</li>
<li>Error: syntax error detected.</li>
</ul>
<h5 id="LR-Parser-Configurations"><a href="#LR-Parser-Configurations" class="headerlink" title="LR Parser Configurations"></a>LR Parser Configurations</h5><p>Configuration: \<Stack contents, Remaining input\></p>
<p>By construction, each state (except $s_0$) in an LR parser corresponds to a set of items and a grammar symbol (the symbol that leads to the state transition)</p>
<p>Suppose $X_i$ is the grammar symbol for state $s_i$, then $X_0X_1\cdots X_ma_ia_{i+1}\cdots a_n$ is a right-sentential form (assume no errors).</p>
<p>ACTION$[s_m,a_i]$</p>
<ul>
<li>Shift $s$: $(s_0s_1\cdots s_ms,a_{i+1}\cdots a_n$)$</li>
<li>Reduce $A\rightarrow \beta$: $(s_0s_1\cdots s_{m-r}s,a_ia_{i+1}\cdots a_n$)$, where $r$ is the length of $\beta$, and $s=\text{GOTO}(s_{m-r},A)$</li>
</ul>
<h5 id="Constructing-SLR-Parsing-Tables"><a href="#Constructing-SLR-Parsing-Tables" class="headerlink" title="Constructing SLR-Parsing Tables"></a>Constructing SLR-Parsing Tables</h5><ol>
<li><p>Construct canonical LR(0) collection $\{I_0,\cdots,I_n\}$ for the augmented grammar $G^\prime$.</p>
</li>
<li><p>State $i$ is constructed from $I_i$. ACTION can be determined as follows:</p>
<p><img src="https://s2.loli.net/2023/10/30/Hzdupvr4iQgjnZ7.png" alt="image.png" style="zoom:50%;" /></p>
</li>
<li><p>The GOTO transitions for state $i$ are constructed for all nonterminals $A$ using the rule: If $\text{GOTO}(I_i,A)=I_j$, then $\text{GOTO}(i,A)=j$.</p>
</li>
<li><p>All entries not defined in steps 2 and 3 are set to “error”</p>
</li>
<li><p>Initial state is the one constructed from the item set containing $[S^\prime\rightarrow\cdot S]$</p>
</li>
</ol>
<p>If there is no conflict (i.e., multiple actions for a table entry), the grammar is <strong>SLR(1)</strong>.</p>
<h5 id="Weakness"><a href="#Weakness" class="headerlink" title="Weakness"></a>Weakness</h5><p>Stack-top reduction: $\beta\alpha\Rightarrow\beta A$ when $a\in\text{FOLLOW}(A)$, but <script type="math/tex">a\not\in\text{FOLLOW}(\beta A)</script>.</p>
<h4 id="Canonical-LR-CLR"><a href="#Canonical-LR-CLR" class="headerlink" title="Canonical LR(CLR)"></a>Canonical LR(CLR)</h4><h5 id="LR-1-Item-A-rightarrow-alpha-cdot-beta-a"><a href="#LR-1-Item-A-rightarrow-alpha-cdot-beta-a" class="headerlink" title="LR(1) Item: $[A\rightarrow \alpha\cdot\beta,a]$"></a>LR(1) Item: $[A\rightarrow \alpha\cdot\beta,a]$</h5><ul>
<li>$A\rightarrow \alpha\beta$ is a production, $a$ is a terminal or $$$.</li>
<li>1: length of the lookahead</li>
<li>The lookahead symbol only works if $\beta=\epsilon$.</li>
</ul>
<p>$[A\rightarrow\alpha\cdot,a]$ calls for a reduction by $A\rightarrow\alpha$ only if the next input symbol is $a$.</p>
<p>When calculating CLOSURE, generate a new item $[B\rightarrow \cdot\gamma,b]$ from $[A\rightarrow\alpha\cdot B\beta,a]$ if $b\in\text{FIRST}(\beta a)$.</p>
<p>\&lt;$\cdots\alpha\gamma,b\cdots$> → \&lt;$\cdots\alpha B,b\cdots$> → \&lt;$\cdots\alpha Bb,\cdots$></p>
<blockquote>
<p>$\beta=\epsilon, b=a ;\beta\not= \epsilon, b\in \text{FIRST}(\beta)\equiv b\in\text{FIRST}(\beta a)$</p>
</blockquote>
<h4 id="Look-ahead-LR-LALR"><a href="#Look-ahead-LR-LALR" class="headerlink" title="Look-ahead LR (LALR)"></a>Look-ahead LR (LALR)</h4><p>Merge sets of LR(1) items with the same <strong>core</strong>.</p>
<p>The core of an LR(1) item set is the set of the first components, a set of LR(0) items.</p>
<p>Merging states may cause reduce/reduce conflicts:</p>
<p><img src="https://s2.loli.net/2023/11/06/uoc1pBe6k59AlbW.png" alt="image.png" style="zoom:50%;" /></p>
<p>Merging states in LR(1) parsing table; If there is no reduce-reduce conflict, the grammar is LALR(1), otherwise not LALR(1).</p>
<h4 id="Comparisons-Among-LR-Parsers"><a href="#Comparisons-Among-LR-Parsers" class="headerlink" title="Comparisons Among LR Parsers"></a>Comparisons Among LR Parsers</h4><p>Languages/Grammars supported:$\text{CLR&gt;LALR&gt;SLR}$</p>
<p>number of states in the parsing table: $\text{CLR&gt;LALR=SLR}$</p>
<p>Driver programs: $\text{CLR=LALR=SLR}$</p>
<h2 id="Lecture-5-Syntax-Directed-Translation"><a href="#Lecture-5-Syntax-Directed-Translation" class="headerlink" title="Lecture 5 - Syntax-Directed Translation"></a>Lecture 5 - Syntax-Directed Translation</h2><h3 id="Syntax-Directed-Definitions"><a href="#Syntax-Directed-Definitions" class="headerlink" title="Syntax-Directed Definitions"></a>Syntax-Directed Definitions</h3><p><strong>Syntax-Directed Definitions</strong>: attributes + semantic rules</p>
<p><strong>Synthesized Attributes</strong>: value at a parse-tree node $N$ is only determined from attribute values at the children of $N$ and at $N$ itself</p>
<ul>
<li>can be evaluated during bottom-up traversal of a parse tree</li>
</ul>
<p><strong>Inherited attributes</strong> have their value at a parse-tree node determined from attribute values at the node <strong>itself</strong>, its <strong>parent</strong>, and its <strong>siblings</strong> in the parse tree</p>
<ul>
<li>Non-terminals in a parse tree may not correspond to proper language constructs</li>
</ul>
<p><img src="https://s2.loli.net/2023/11/13/BYo6XWehN9zCcI8.png" alt="image.png" style="zoom:50%;" /></p>
<h3 id="Evaluation-Orders-for-SDD’s"><a href="#Evaluation-Orders-for-SDD’s" class="headerlink" title="Evaluation Orders for SDD’s"></a>Evaluation Orders for SDD’s</h3><p>Dependency: $N.a = f(\{M_i.a_i\})$</p>
<p><strong>Dependency Graph</strong>: defines partial relations(order of computation) between attributes</p>
<ul>
<li>vertex: attribute instance</li>
<li>directed edge $a_1\rightarrow a_2$: $a_1$ is needed to compute $a_2$ </li>
<li>cycle: cyclic dependency, not computable</li>
</ul>
<p>Then compute the attributes in topo-sort order.</p>
<p>Hard to tell if an arbitrary SDD is computable (parse trees contain no cycles).</p>
<h4 id="S-Attributed-SDD"><a href="#S-Attributed-SDD" class="headerlink" title="S-Attributed SDD"></a>S-Attributed SDD</h4><p>Every attribute is <a href="#Syntax-Directed Definitions">synthesized</a>, always computable.</p>
<p>Edges are always from child to parent, any bottom-up order is valid, e.g., postorder traversal during bottom-up parsing.</p>
<h4 id="L-Attributed-SDD"><a href="#L-Attributed-SDD" class="headerlink" title="L-Attributed SDD"></a>L-Attributed SDD</h4><p>Every production $A\rightarrow X_1\dots X_n$, for each $j=1\dots n$, each inherited attribute of $X_j$ only depends on:</p>
<ul>
<li>the attributes of $X_1,\dots,X_{j-1}$</li>
<li>the inherited attributes of $A$</li>
</ul>
<p>Or each attribute is synthesized, therefore S-Attributed SDD $\subseteq$ L-Attributed SDD.</p>
<p>Edges are always from left to right, or from parent to child, computable.</p>
<ul>
<li>evaluate inherited attributes from parent node</li>
<li>evaluate child nodes from left to right</li>
<li>evaluate synthesized attributes from child nodes.</li>
</ul>
<h3 id="Syntax-Directed-Translation-Schemes"><a href="#Syntax-Directed-Translation-Schemes" class="headerlink" title="Syntax-Directed Translation Schemes"></a>Syntax-Directed Translation Schemes</h3><p>CFG with <strong>semantic actions</strong> embedded <strong>within production bodies</strong> </p>
<ul>
<li>Differ from the semantic rules in SDD’s </li>
<li>Semantic actions can appear anywhere within a production body</li>
</ul>
<script type="math/tex; mode=display">
B\rightarrow X\{a\} Y</script><p>If terminal $X$ is recognized, or all the terminals derived from nonterminal $X$ is recognized, action $a$ is done.</p>
<ul>
<li>bottom-up: perform $a$ as $X$ appears on the top of the parsing stack</li>
<li>top-down: perform $a$ before attempting to expand $Y$ (if $Y$ is a nonterminal) or check for $Y$ on the input (if $Y$ is a terminal)</li>
</ul>
<h4 id="SDT’s-Implementable-During-Parsing"><a href="#SDT’s-Implementable-During-Parsing" class="headerlink" title="SDT’s Implementable During Parsing"></a>SDT’s Implementable During Parsing</h4><ul>
<li>marker nonterminals $M\rightarrow \epsilon$ to replace embedded actions</li>
<li>grammar parse-able, then SDT can be implemented during parsing</li>
</ul>
<h2 id="Lecture-6-Intermediate-Code-Generation"><a href="#Lecture-6-Intermediate-Code-Generation" class="headerlink" title="Lecture 6 - Intermediate-Code Generation"></a>Lecture 6 - Intermediate-Code Generation</h2><p>Front-end: Parser, Static Checker, Intermediate Code Generator</p>
<p>Back-end: Code Generator</p>
<h3 id="Intermediate-Representation"><a href="#Intermediate-Representation" class="headerlink" title="Intermediate Representation"></a>Intermediate Representation</h3><p>$M$ languages, $N$ machines, with intermediate representations, $M+N$ compilers.</p>
<p>High-level IR like syntax trees are close to the source language</p>
<ul>
<li>machine-independent tasks</li>
</ul>
<p>Low-level IR are close to the target machines</p>
<ul>
<li>machine-dependent tasks</li>
</ul>
<p>On DAG, subexp appearing multiple times → subtree with multiple parents(node reuse)</p>
<h3 id="Three-Address-Code"><a href="#Three-Address-Code" class="headerlink" title="Three-Address Code"></a>Three-Address Code</h3><script type="math/tex; mode=display">
\text{x} = \text{y op z}</script><p>Only <strong>one</strong> operator on the rhs.</p>
<p>Operands(addresses) can be:</p>
<ul>
<li>Names</li>
<li>Constants</li>
<li>Temporary names</li>
</ul>
<h4 id="Instructions"><a href="#Instructions" class="headerlink" title="Instructions"></a>Instructions</h4><ol>
<li><p>Assignment</p>
<p>$\text{x} = \text{y op z}$</p>
<p>$\text{x} = \text{op y}$</p>
</li>
<li><p>Copy</p>
<p>$\text{x = y}$</p>
</li>
<li><p>Unconditional jump</p>
<p>$\text{goto L}$</p>
</li>
<li><p>Conditional jump</p>
<p>$\text{if <cond> goto L}$</p>
</li>
<li><p>Procedure calls/returns</p>
<p>$\text{param x}_{1\dots n}$</p>
<p>procedure call: $\text{call p, n}$</p>
<p>function call: $\text{y = call p, n}$</p>
<p>$\text{return y}$</p>
</li>
<li><p>Indexed copy</p>
<p>$\text{x = y[i]}$</p>
<p>$\text{x[i] = y}$</p>
</li>
<li><p>Address and pointer assignment</p>
<p>$\text{x = \&amp;y}$ (<code>x.rval</code> ← <code>y.lval</code>)</p>
<p>$\text{x = *y}$ (<code>x.rval</code> ← content stored at location indicated by <code>y.rval</code>)</p>
<p>$\text{*x = y}$ (content store at location indicated by <code>x.rval</code> ← <code>y.rval</code>)</p>
</li>
</ol>
<h4 id="Quadruples"><a href="#Quadruples" class="headerlink" title="Quadruples"></a>Quadruples</h4><script type="math/tex; mode=display">
\text{op}\quad \text{arg}_1\quad \text{arg}_2\quad \text{result}</script><p>Simple, straight forward.</p>
<p>Temporary names in <code>result</code>  field are space-consuming(symbol table entries).</p>
<h4 id="Triples"><a href="#Triples" class="headerlink" title="Triples"></a>Triples</h4><script type="math/tex; mode=display">
\text{op}\quad \text{arg}_1\quad \text{arg}_2</script><p>Refer to the results by positions, without generating temporary names.</p>
<p>Compiling optimization may <strong>swap instructions</strong>, leading to wrong results in triples.</p>
<h4 id="Indirect-Triples"><a href="#Indirect-Triples" class="headerlink" title="Indirect Triples"></a>Indirect Triples</h4><p>Consist of a list of pointers to triples.</p>
<p>An optimization can move an instruction by reordering the instruction list.</p>
<p><img src="https://s2.loli.net/2023/11/20/8D9WbjlcOyYTNVG.png" alt="image.png" style="zoom:50%;" /></p>
<h4 id="Static-Single-Assignment-Form"><a href="#Static-Single-Assignment-Form" class="headerlink" title="Static Single-Assignment Form"></a>Static Single-Assignment Form</h4><p>Each name receives a single assignment</p>
<p>combine definitions in different branches using $\phi$-function</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(flag)</span><br><span class="line">    x[<span class="number">1</span>] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    x[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">x[<span class="number">3</span>] = phi(x[<span class="number">1</span>],x[<span class="number">2</span>]);</span><br><span class="line">y = x[<span class="number">3</span>] * a;</span><br></pre></td></tr></table></figure>
<h3 id="Type-and-Declarations"><a href="#Type-and-Declarations" class="headerlink" title="Type and Declarations"></a>Type and Declarations</h3><h4 id="Types-and-Type-Checking"><a href="#Types-and-Type-Checking" class="headerlink" title="Types and Type Checking"></a>Types and Type Checking</h4><p>Type info usages</p>
<ul>
<li>Find faults</li>
<li>Determine memory needed at runtime</li>
<li>Calculate addresses of array elements</li>
<li>Type conversions</li>
<li>Choose arithmetic operator</li>
</ul>
<p>Type checking: types of operands match the type expectation.</p>
<h4 id="Type-Expressions"><a href="#Type-Expressions" class="headerlink" title="Type Expressions"></a>Type Expressions</h4><ul>
<li>basic type: boolean, char, integer, float, void…</li>
<li>type name: name of a class</li>
<li><p>type constructor</p>
<ul>
<li>array(number, type expression)</li>
<li>record</li>
<li>function(type, type)→ return type</li>
</ul>
</li>
<li><p><strong>Name Equivalence</strong></p>
<p>names in type expressions are not replaced by the exact type expressions they define</p>
</li>
<li><p><strong>Structural Equivalence</strong></p>
<p>replace the names by the type expressions and recursively check the substituted trees</p>
</li>
</ul>
<h3 id="Translation-of-Expressions"><a href="#Translation-of-Expressions" class="headerlink" title="Translation of Expressions"></a>Translation of Expressions</h3><h4 id="SDD-for-Expression-Translation"><a href="#SDD-for-Expression-Translation" class="headerlink" title="SDD for Expression Translation"></a>SDD for Expression Translation</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">S</span><br><span class="line">| id = E;</span><br><span class="line">&#123;</span><br><span class="line">    S.code = E.code ||</span><br><span class="line">        gen(top.get(id.lexeme) <span class="string">&#x27;=&#x27;</span> E.addr);</span><br><span class="line">&#125;</span><br><span class="line">E</span><br><span class="line">| E1 + E2</span><br><span class="line">&#123;</span><br><span class="line">    E.addr = new Temp();</span><br><span class="line">    E.code = E1.code || E2.code || </span><br><span class="line">        gen(E.addr <span class="string">&#x27;=&#x27;</span> E1.addr <span class="string">&#x27;+&#x27;</span> E2.addr);</span><br><span class="line">&#125;</span><br><span class="line">| - E1</span><br><span class="line">&#123;</span><br><span class="line">    E.addr = new Temp();</span><br><span class="line">    E.code = E1.code || E2.code || </span><br><span class="line">        gen(E.addr <span class="string">&#x27;=&#x27;</span> <span class="string">&#x27;minus&#x27;</span> E1.addr);</span><br><span class="line">&#125;</span><br><span class="line">| (E1)</span><br><span class="line">&#123;</span><br><span class="line">    E.addr = E1.addr;</span><br><span class="line">    E.code = E1.code;</span><br><span class="line">&#125;</span><br><span class="line">| id</span><br><span class="line">&#123;</span><br><span class="line">    E.addr = top.get(id.lexeme);</span><br><span class="line">    E.code = <span class="string">&#x27;&#x27;;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
<p>Generate instructions when seeing operations, then concatenate instructions</p>
<ul>
<li>For <strong>id</strong>, check the symbol table and save its address</li>
<li>Use temporary name to hold intermediate values</li>
</ul>
<p><strong>Problem</strong></p>
<p><code>code</code> attributes may be too long. Redundant parts waste memory!</p>
<h4 id="Incremental-Translation-Scheme"><a href="#Incremental-Translation-Scheme" class="headerlink" title="Incremental Translation Scheme"></a>Incremental Translation Scheme</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">S</span><br><span class="line">| id = E;</span><br><span class="line">&#123;</span><br><span class="line">    gen(top.get(id.lexeme) <span class="string">&#x27;=&#x27;</span> E.addr);</span><br><span class="line">&#125;</span><br><span class="line">E</span><br><span class="line">| E1 + E2</span><br><span class="line">&#123;</span><br><span class="line">    E.addr = new Temp();</span><br><span class="line">    gen(E.addr <span class="string">&#x27;=&#x27;</span> E1.addr <span class="string">&#x27;+&#x27;</span> E2.addr);</span><br><span class="line">&#125;</span><br><span class="line">| - E1</span><br><span class="line">&#123;</span><br><span class="line">    E.addr = new Temp();</span><br><span class="line">    gen(E.addr <span class="string">&#x27;=&#x27;</span> <span class="string">&#x27;minus&#x27;</span> E1.addr);</span><br><span class="line">&#125;</span><br><span class="line">| (E1)</span><br><span class="line">&#123;</span><br><span class="line">    E.addr = E1.addr;</span><br><span class="line">&#125;</span><br><span class="line">| id</span><br><span class="line">&#123;</span><br><span class="line">    E.addr = top.get(id.lexeme);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>gen</code> appends the new 3-addr instruction to the sequence of instructions.</p>
<p>This postfix SDT implemented in bottom-up parsing(semantic actions are executed upon reduction) guarantees that subexpressions are handled first.</p>
<h3 id="Control-Flow"><a href="#Control-Flow" class="headerlink" title="Control Flow"></a>Control Flow</h3><h4 id="Short-Circuit-Behavior"><a href="#Short-Circuit-Behavior" class="headerlink" title="Short Circuit Behavior"></a>Short Circuit Behavior</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ( x &lt; y || x &gt; z &amp;&amp; x != w )</span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    if x &lt; y goto L2</span></span><br><span class="line"><span class="comment">    ifFalse x &gt; z goto L1</span></span><br><span class="line"><span class="comment">    ifFalse x != w goto L1</span></span><br><span class="line"><span class="comment">L2: x = 0</span></span><br><span class="line"><span class="comment">L1: </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h4 id="Flow-of-Control-Statements"><a href="#Flow-of-Control-Statements" class="headerlink" title="Flow-of-Control Statements"></a>Flow-of-Control Statements</h4><p><strong>Grammar</strong></p>
<ul>
<li>$S\rightarrow \textbf{if} (B)\ S_1$</li>
<li>$S\rightarrow \textbf{if} (B)\ S_1\ \textbf{else}\ S_2$</li>
<li>$S\rightarrow \textbf{while} (B)\ S_1$</li>
</ul>
<p><strong>Inherited attributes</strong></p>
<ul>
<li>$B.true$: the label to which control flows if $B$ is true.</li>
<li>$B.false$: the label to which control flows if $B$ is false.</li>
<li>$S.next$: the label for the instruction immediately after the code for $S$.</li>
</ul>
<ol>
<li><p>if</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">B.code  -&gt;	B.<span class="literal">true</span>/<span class="literal">false</span></span><br><span class="line">B.<span class="literal">true</span>:		S1.code</span><br><span class="line">B.<span class="literal">false</span>:	...</span><br></pre></td></tr></table></figure>
</li>
<li><p>if-else</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">B.code  -&gt;	B.<span class="literal">true</span>/<span class="literal">false</span></span><br><span class="line">B.<span class="literal">true</span>:		S1.code</span><br><span class="line">			<span class="keyword">goto</span> S.next</span><br><span class="line">B.<span class="literal">false</span>: 	S2.code</span><br><span class="line">S.next:		...</span><br></pre></td></tr></table></figure>
</li>
<li><p>while</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">begin:</span><br><span class="line">B.code  -&gt;	B.<span class="literal">true</span>/<span class="literal">false</span></span><br><span class="line">B.<span class="literal">true</span>:		S1.code</span><br><span class="line">			<span class="keyword">goto</span> begin</span><br><span class="line">B.<span class="literal">false</span>: 	...</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="Three-Address-Code-for-Booleans"><a href="#Three-Address-Code-for-Booleans" class="headerlink" title="Three-Address Code for Booleans"></a>Three-Address Code for Booleans</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">B</span><br><span class="line">| E1 rel E2</span><br><span class="line">&#123;</span><br><span class="line">    E.code = E1.code || E2.code</span><br><span class="line">        || gen(<span class="string">&#x27;if&#x27;</span> E1.addr rel.op E2.addr <span class="string">&#x27;goto&#x27;</span> B.<span class="literal">true</span>)</span><br><span class="line">        || gen(<span class="string">&#x27;goto&#x27;</span> B.<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">| <span class="literal">true</span></span><br><span class="line">&#123;</span><br><span class="line">    B.code = gen(<span class="string">&#x27;goto&#x27;</span> B.<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">| <span class="literal">false</span></span><br><span class="line">&#123;</span><br><span class="line">    B.code = gen(<span class="string">&#x27;goto&#x27;</span> B.<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">B</span><br><span class="line">| B1 || B2</span><br><span class="line">&#123;</span><br><span class="line">    B1.<span class="literal">true</span> = B.<span class="literal">true</span>;</span><br><span class="line">    B1.<span class="literal">false</span> = newlabel();</span><br><span class="line">    B2.<span class="literal">true</span> = B.<span class="literal">true</span>;</span><br><span class="line">    B2.<span class="literal">false</span> = B.<span class="literal">false</span>;</span><br><span class="line">    B.code = B1.code || label(B1.<span class="literal">false</span>) || B2.code</span><br><span class="line">&#125;</span><br><span class="line">| B1 &amp;&amp; B2</span><br><span class="line">&#123;</span><br><span class="line">    B1.<span class="literal">true</span> = newlabel();</span><br><span class="line">    B1.<span class="literal">false</span> = B.<span class="literal">false</span>;</span><br><span class="line">    B2.<span class="literal">true</span> = B.<span class="literal">true</span>;</span><br><span class="line">    B2.<span class="literal">false</span> = B.<span class="literal">false</span>;</span><br><span class="line">    B.code = B1.code || label(B1.<span class="literal">false</span>) || B2.code</span><br><span class="line">&#125;</span><br><span class="line">| !B1</span><br><span class="line">&#123;</span><br><span class="line">    B1.<span class="literal">true</span> = B.<span class="literal">false</span>;</span><br><span class="line">    B1.<span class="literal">false</span> = B.<span class="literal">true</span>;</span><br><span class="line">    B.code = B1.code;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Compiler</tag>
      </tags>
  </entry>
  <entry>
    <title>CS205 Assignment Pandora Box</title>
    <url>/2023/11/02/CS205_Pandora_Box/</url>
    <content><![CDATA[<h3 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h3><p><img src="https://s2.loli.net/2023/11/03/c9SLXKhob4CVzwU.png" alt="_RKU5WY0KCJ8K_XMQ41U85G.png" style="zoom: 33%;" /></p>
<center><i><b><span style="color:#eb234b;">「奇迹ってのはタダじゃないんだ。希望を祈ればそれと同じ分だけの绝望が撒き散らされる。」</span></b></i></center>

<center><i><b><span style="color:#eb234b;">「そうやって差し引きを0にして 世の中のバランスは成り立ってるんだよ。」</span></b></i></center>

<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><blockquote>
<p>This question is designed to examine your mastery of pointers using C for memory management. You can also use this question as an initial exploration of exception handling for your final project :)</p>
</blockquote>
<p>Still frustrated that you can only put the same type of data in an STL vector? Missing Python’s lists that can store any type of data? Now, try implementing a Pandora’s Box that can store anything of any type in C!</p>
<p><span style="color: rgb(51, 51, 51);">Ofcourse, GuTao is not so boring that letting everyone who is new to C write a complete Pandora’s Box from scratch, that would be too difficult. So GuTao decided to give you the blueprint of the Pandora’s Box, y</span>our task is just to implementseveral key operations to manage and interact with the <code>PandoraBox</code>structure.</p>
<p>The <code>PandoraBox</code> should provide the flexibility to append, write, and read data of different types, all stored within the same container.</p>
<p>In consideration of robustness, data written to the <code>PandoraBox</code> should be correctly handled even when its size doesn’t match the item size, including handling data padding and negative values.</p>
<p>The following operations should be supported by your <code>PandoraBox</code> :</p>
<ol>
<li><code>create</code>: Create an empty <code>PandoraBox</code> with specified item counts and their respective sizes.</li>
<li><code>append</code>: Extend the memory of the <code>PandoraBox</code> to append an item.</li>
<li><code>write</code>: Write data into a specific item within the <code>PandoraBox</code> .</li>
<li><code>read</code>: Copy the content of a particular item from the <code>PandoraBox</code> into newly allocated memory.</li>
<li><code>destroy</code>: Properly deallocate the memory associated with the <code>PandoraBox</code> and its data to prevent memory leaks.</li>
<li><code>printc</code>: Print bytes as characters in a given range, with proper handling of negative values.</li>
<li><code>printx</code>: Print bytes as a single hexadecimal value in a given range.</li>
<li><code>hex2byte</code>: Convert the given string to hexadecimal, and save it into the given address.</li>
</ol>
<p>Ofcourse, GuTao is not so boring that letting everyone who is new to C write a complete Pandora’s Box from scratch, that would be too difficult. So GuTao decided to give you the blueprint of the Pandora’s Box, and you only need to implement a few simple functions.</p>
<h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p><del>Actually you don’t need to worry about this part because the main function is given by GuTao.</del></p>
<p>The first line contains an integer $T$, the number of operations.</p>
<p>Then the following $T$ lines are operations.</p>
<ul>
<li><code>C n a[0] a[1] ... a[n-1]</code>: create a Panbox with $n$ items, the sizes of items are $a[0]…a[n-1]$, split by spaces(All indices in this problem start from 0).</li>
<li><code>A l s</code>: append an item to the Panbox, where $l$ represents the length of a subsequent string, and $s$ represents the hexadecimal string, starting with “0x” and [a-f] in lowercase. For example, <code>A 9 0x514cafe</code>.</li>
<li><code>W i l s</code>: write the item with index $i$ with the value represented in the following hexadecimal string $s$ of length $l$.</li>
<li><code>R i o</code>: read the content of the item with index $i$. If $o$ is 1, then print the item in format of characters, otherwise in format of a single hexadecimal.</li>
<li><code>D</code>: Open the Pandora’s box and free everything, including HOPE.</li>
<li><code>Q</code>: Display the information of the current Panbox.</li>
</ul>
<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p><del>Actually you don’t need to worry about this part because the main function is given by GuTao.</del></p>
<ul>
<li>For <code>R</code> instructions, print the content of item[i] in the format given by $o$.</li>
<li>For <code>Q</code> instructions, if the Panbox pointer is NULL, output NULL in a single line; otherwise the number of the items in the Panbox in a single line, then print the size of every item in a new line.</li>
<li>For <code>D</code> instructions, print every item in character format, and in reverse order(FILO), then free the memory.</li>
</ul>
<h3 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input #1"></a>Sample Input #1</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">12</span><br><span class="line">C 1 4</span><br><span class="line">W 0 10 0x45504f48</span><br><span class="line">A 18 0x6e6f697469626d41</span><br><span class="line">A 24 0x6e6f6974697465706d6f43</span><br><span class="line">A 12 0x6465657247</span><br><span class="line">A 10 0x79766e45</span><br><span class="line">A 18 0x7973756f6c61654a</span><br><span class="line">A 14 0x646572746148</span><br><span class="line">A 20 0x6563697473756a6e49</span><br><span class="line">A 20 0x797265686361657254</span><br><span class="line">A 22 0x68746c6165682d6c6c49</span><br><span class="line">D</span><br></pre></td></tr></table></figure>
<h3 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output #1"></a>Sample Output #1</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">I l l - h e a l t h </span><br><span class="line">T r e a c h e r y </span><br><span class="line">I n j u s t i c e </span><br><span class="line">H a t r e d </span><br><span class="line">J e a l o u s y </span><br><span class="line">E n v y </span><br><span class="line">G r e e d </span><br><span class="line">C o m p e t i t i o n </span><br><span class="line">A m b i t i o n </span><br><span class="line">H O P E </span><br></pre></td></tr></table></figure>
<h3 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h3><p>To make this problem more interesting, <code>memcpy</code> and <code>memset</code>  of <code>&lt;string.h&gt;</code> are banned.</p>
<p>Try to implement them by your self!</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> *<span class="title function_">mycpy</span><span class="params">(<span class="type">void</span> *dst, <span class="type">const</span> <span class="type">void</span> *src, <span class="type">size_t</span> n)</span>;</span><br><span class="line"><span class="type">void</span> *<span class="title function_">myset</span><span class="params">(<span class="type">void</span> *dst, <span class="type">int</span> c, <span class="type">size_t</span> n)</span>;</span><br></pre></td></tr></table></figure>
<p>Also, this problem has NO Special Judge :)</p>
<h3 id="Template"><a href="#Template" class="headerlink" title="Template"></a>Template</h3><details>
    <summary>template code</summary>
    <figure class="highlight c"><div class="table-container"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">PandoraBox</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">    <span class="type">int</span> item_count; <span class="comment">// Number of items stored in the PandoraBox.</span></span><br><span class="line">    <span class="type">int</span> *item_size; <span class="comment">// Array of item sizes in bytes.</span></span><br><span class="line">    <span class="type">void</span> *data;     <span class="comment">// A type-agnostic pointer to store data.</span></span><br><span class="line">} Panbox;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">A PandoraBox capable of storing various data types within a continuous memory space.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">- item_count: Number of items stored in this box.</span></span><br><span class="line"><span class="comment">- item_size: An array of integers; item_size[i] represents the size (in bytes) of the i-th item in the box.</span></span><br><span class="line"><span class="comment">- data: A type-agnostic pointer, enabling interpretation of different data types by reading segments with varying lengths.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*=+=+=+=+=+=+=+=+=+=+=Your code starts from here=+=+=+=+=+=+=+=+=+=+=*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">mycpy</span><span class="params">(<span class="type">void</span> *dst, <span class="type">const</span> <span class="type">void</span> *src, <span class="type">size_t</span> size)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Function: See memcpy in &lt;string.h&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Notes:</span></span><br><span class="line"><span class="comment">- It is not a must to implement this function, but with it you can implement the following functions more easily.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">myset</span><span class="params">(<span class="type">void</span> *dst, <span class="type">int</span> n, <span class="type">size_t</span> size)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Function: See memset in &lt;string.h&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Notes:</span></span><br><span class="line"><span class="comment">- It is not a must to implement this function, but with it you can implement the following functions more easily.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">Panbox *<span class="title function_">create</span><span class="params">(<span class="type">int</span> item_count, <span class="type">int</span> item_size[])</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Function: Create an empty PandoraBox with specified item counts and their respective sizes.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Parameters:</span></span><br><span class="line"><span class="comment">- item_count: The number of items to be stored in the PandoraBox.</span></span><br><span class="line"><span class="comment">- item_size: An array specifying the size (in bytes) of each item.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Returns:</span></span><br><span class="line"><span class="comment">A pointer to the created PandoraBox.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Note:</span></span><br><span class="line"><span class="comment">- You CAN create a Panbox with no initial items, i.e., item_count=0 and item_size=NULL.</span></span><br><span class="line"><span class="comment">- However, negative item_count is not supported, and item_size should not be NULL when item_count is non-zero.</span></span><br><span class="line"><span class="comment">- The size of any item should be positive.</span></span><br><span class="line"><span class="comment">- Make sure that the memory newly allocated is filled with 0s.</span></span><br><span class="line"><span class="comment">- You should return NULL immediately if any failure happens.</span></span><br><span class="line"><span class="comment">- Good news: GuTao guarantees that [item_size, item_size+item_count-1] is allocated in advance, unless item_size is NULL.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">append</span><span class="params">(Panbox *panbox, <span class="type">void</span> *value, <span class="type">int</span> width)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Function: Extend the memory of the PandoraBox to append an item.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Parameters:</span></span><br><span class="line"><span class="comment">- panbox: A pointer to the PandoraBox.</span></span><br><span class="line"><span class="comment">- value: A pointer to the data to be added to the PandoraBox.</span></span><br><span class="line"><span class="comment">- width: The size of the data in value (in bytes).</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Note:</span></span><br><span class="line"><span class="comment">- You should not append this item if any failure happens.</span></span><br><span class="line"><span class="comment">- Good news: GuTao guarantees that [value, value+width-1] is allocated in advance, unless value is NULL.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">write</span><span class="params">(Panbox *panbox, <span class="type">int</span> item_id, <span class="type">void</span> *value, <span class="type">int</span> width)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Function: COPY the data stored in 'value' into the segment of the item with index item_id in the PandoraBox.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Parameters:</span></span><br><span class="line"><span class="comment">- panbox: A pointer to the PandoraBox.</span></span><br><span class="line"><span class="comment">- item_id: The index of the item in the PandoraBox where data will be written.</span></span><br><span class="line"><span class="comment">- value: A pointer to the data that needs to be written to the PandoraBox.</span></span><br><span class="line"><span class="comment">- width: The size of the data in value (in bytes).</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Notes:</span></span><br><span class="line"><span class="comment">- If 'item_id' is out of valid bounds, the data won't be written.</span></span><br><span class="line"><span class="comment">- If the item size cannot hold all data in value, the data won't be written.</span></span><br><span class="line"><span class="comment">- If the width of value is smaller than the item size, the data will be placed in the lower address and padded with the highest bit.</span></span><br><span class="line"><span class="comment">- Example: inserting a 1-byte value into a 2-byte item: (0x7f -&gt; 0x007f), (0xf7 -&gt; 0xfff7).</span></span><br><span class="line"><span class="comment">- The item_size should not change in this function.</span></span><br><span class="line"><span class="comment">- You should not write the item if any failure happens.</span></span><br><span class="line"><span class="comment">- Good news: GuTao guarantees that [value, value+width-1] is allocated in advance, unless value is NULL.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">read</span><span class="params">(Panbox *panbox, <span class="type">int</span> item_id)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Function: COPY the item with index item_id from the PandoraBox into a newly allocated memory, and return a pointer to this memory.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Parameters:</span></span><br><span class="line"><span class="comment">- panbox: A pointer to the PandoraBox.</span></span><br><span class="line"><span class="comment">- item_id: The index of the item in the PandoraBox that should be read.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Returns:</span></span><br><span class="line"><span class="comment">A pointer to the newly allocated memory containing a copy of the specified item.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Notes:</span></span><br><span class="line"><span class="comment">- You should return NULL immediately if any failure happens.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">destroy</span><span class="params">(Panbox *panbox)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Function: Deallocate the memory associated with the PandoraBox and its data.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Parameters:</span></span><br><span class="line"><span class="comment">- panbox: A pointer to the PandoraBox that should be destroyed.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Notes:</span></span><br><span class="line"><span class="comment">- This function should be used when the PandoraBox is no longer needed to prevent memory leak.</span></span><br><span class="line"><span class="comment">- You should check before freeing a pointer.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printc</span><span class="params">(<span class="type">void</span> *value, <span class="type">int</span> width)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Function: Print every 1 byte (char) in [value, value+width-1] as a character, split by a space.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Notes:</span></span><br><span class="line"><span class="comment">- Good news: GuTao guarantees that [value, value+width-1] is allocated in advance, unless value is NULL.</span></span><br><span class="line"><span class="comment">- If the value of the byte is in [0, 32] or equals to 127(Del), do not print anything(they are special characters).</span></span><br><span class="line"><span class="comment">- e.g., for an empty box with all 0, the destroy of this box will invoke printc(), but should not print anything.</span></span><br><span class="line"><span class="comment">- If the value of the byte is negative, print '-' instead.</span></span><br><span class="line"><span class="comment">- You should return immediately if any failure happens.</span></span><br><span class="line"><span class="comment">- Please print a `\n` before returning, unless you print nothing in this function.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printx</span><span class="params">(<span class="type">void</span> *value, <span class="type">int</span> width)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Function: Print the value in [value, value+width-1] as a single hexadecimal, in format of 0x12345678.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Notes:</span></span><br><span class="line"><span class="comment">- Good news: GuTao guarantees that [value, value+width-1] is allocated in advance, unless value is NULL.</span></span><br><span class="line"><span class="comment">- You should return immediately if any failure happens.</span></span><br><span class="line"><span class="comment">- If the highest byte is less than 0x10, please output a leading 0, e.g., 0x0514.</span></span><br><span class="line"><span class="comment">- Leading zeros are OK, if *(value) = 0x000f, width = 2, then print 0x000f. (print even number of characters)</span></span><br><span class="line"><span class="comment">- If the item is full of 0s, please still print it. E.g., 0x0000.</span></span><br><span class="line"><span class="comment">- Please print a `\n` before returning.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">hex2byte</span><span class="params">(<span class="type">void</span> *dst, <span class="type">char</span> *hex)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Function: For the given hex string "0x12345678", write 0x12345678 into dst.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Notes:</span></span><br><span class="line"><span class="comment">- The length of hex might be ODD, make sure to put all data into dst. For example, "0xfff"(12 bits) should be stored using 2 bytes as 0x0fff(different from write(), just add a padding 0 here).</span></span><br><span class="line"><span class="comment">- You should return immediately if any failure happens.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*=+=+=+=+=+=+=+=+=+=+=Your code ends here=+=+=+=+=+=+=+=+=+=+=*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">show_info</span><span class="params">(Panbox *p)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, p-&gt;item_count);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; p-&gt;item_count; i++)</span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>, p-&gt;item_size[i]);</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"NULL\n"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Function: Display the basic information of given PandoraBox</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Implemented by GuTao.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">Panbox *p = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    {</span><br><span class="line">        <span class="type">char</span> op;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">" %c"</span>, &amp;op);</span><br><span class="line">        <span class="keyword">switch</span> (op)</span><br><span class="line">        {</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'C'</span>: {</span><br><span class="line">            <span class="type">int</span> item_count;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;item_count);</span><br><span class="line">            <span class="type">int</span> *item_size = (<span class="type">int</span> *)<span class="built_in">malloc</span>(item_count * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; item_count; i++)</span><br><span class="line">            {</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;item_size[i]);</span><br><span class="line">            }</span><br><span class="line">            p = create(item_count, item_size);</span><br><span class="line">            <span class="built_in">free</span>(item_size);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'D'</span>: {</span><br><span class="line">            <span class="keyword">if</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = p-&gt;item_count - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">                {</span><br><span class="line">                    <span class="type">void</span> *data = read(p, i);</span><br><span class="line">                    <span class="keyword">if</span> (data != <span class="literal">NULL</span>)</span><br><span class="line">                    {</span><br><span class="line">                        printc(data, p-&gt;item_size[i]);</span><br><span class="line">                        <span class="built_in">free</span>(data);</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            destroy(p);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'A'</span>: {</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;len);</span><br><span class="line">            <span class="type">char</span> *hex_str = (<span class="type">char</span> *)<span class="built_in">malloc</span>(len + <span class="number">1</span>);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>, hex_str);</span><br><span class="line">            <span class="type">int</span> num_of_byte = (<span class="built_in">strlen</span>(hex_str) - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">            <span class="type">void</span> *data = (<span class="type">void</span> *)<span class="built_in">malloc</span>(num_of_byte);</span><br><span class="line">            hex2byte(data, hex_str);</span><br><span class="line">            append(p, data, num_of_byte);</span><br><span class="line">            <span class="built_in">free</span>(hex_str);</span><br><span class="line">            <span class="built_in">free</span>(data);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'W'</span>: {</span><br><span class="line">            <span class="type">int</span> item_id;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;item_id);</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;len);</span><br><span class="line">            <span class="type">char</span> *hex_str = (<span class="type">char</span> *)<span class="built_in">malloc</span>(len + <span class="number">1</span>);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>, hex_str);</span><br><span class="line">            <span class="type">int</span> num_of_byte = (<span class="built_in">strlen</span>(hex_str) - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">            <span class="type">void</span> *data = (<span class="type">void</span> *)<span class="built_in">malloc</span>(num_of_byte);</span><br><span class="line">            hex2byte(data, hex_str);</span><br><span class="line">            write(p, item_id, data, num_of_byte);</span><br><span class="line">            <span class="built_in">free</span>(hex_str);</span><br><span class="line">            <span class="built_in">free</span>(data);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'R'</span>: {</span><br><span class="line">            <span class="type">int</span> item_id;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;item_id);</span><br><span class="line">            <span class="type">int</span> is_printc;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;is_printc);</span><br><span class="line">            <span class="type">void</span> *data = read(p, item_id);</span><br><span class="line">            <span class="keyword">if</span> (data != <span class="literal">NULL</span>)</span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">if</span> (is_printc)</span><br><span class="line">                {</span><br><span class="line">                    printc(data, p-&gt;item_size[item_id]);</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                {</span><br><span class="line">                    printx(data, p-&gt;item_size[item_id]);</span><br><span class="line">                }</span><br><span class="line">                <span class="built_in">free</span>(data);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'Q'</span>: {</span><br><span class="line">            show_info(p);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">default</span>: {</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Main function implemented by GuTao, you cannot rewrite one for yourself.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">- Just for you to understand how the functions you implement would be invoked.</span></span><br><span class="line"><span class="comment">- Not exact the main function to test on OJ, this one does not check your error handling.</span></span><br><span class="line"><span class="comment">- You can test your functions on your PC with your own main().</span></span><br><span class="line"><span class="comment">- You may want to hack with your own main function, but this won't help you AC :)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></div></figure>
</details>

<h3 id="Test-cases"><a href="#Test-cases" class="headerlink" title="Test cases"></a>Test cases</h3><ol>
<li>NULL pointer handling for each function, create and destroy empty box.</li>
<li>Create, write items using data of exact lengths, read items, printc, destroy</li>
<li>Create, write items using data of exact lengths, read items, printc/x, destroy</li>
<li>Create, write items using data of random lengths, read items, printc, destroy, negative char</li>
<li>Create, write items using data of random lengths, read items, printc/x, destroy, negative char</li>
<li>Create, write items with invalid indices, append items, read items with invalid indices, printc, destroy</li>
<li>Create, write items with invalid indices, append items, read items with invalid indices, printc/x, destroy</li>
<li>Create, append items, write items, read items, printc/x, destroy, with full robustness</li>
<li>Memory leak check: (create, append items, destroy) *n</li>
<li>Large amount of create, append items, write items, read items, printc/x, destroy, with full robustness</li>
</ol>
<h3 id="Standard-Solution"><a href="#Standard-Solution" class="headerlink" title="Standard Solution"></a>Standard Solution</h3><details>
    <summary>std by GuTao</summary>
    <figure class="highlight c"><div class="table-container"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Author: GuTao</span></span><br><span class="line"><span class="comment">Date:   2023-10-24</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Standard code for Assignment 2-1, CS205 C/C++ Program Design, 2023 Fall.</span></span><br><span class="line"><span class="comment">Although it is robust enough to pass this problem, there *must* be some bugs in this code.</span></span><br><span class="line"><span class="comment">Feel free to point them out in the QQ group!</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Sincere thanks to each of the you who worked hard challenging this question!</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">You may not get full marks on this problem, but at least you have a basic idea of how memory management and exception</span></span><br><span class="line"><span class="comment">handling works! Hope you enjoyed the process of exploring new ideas and debugging when challenging this problem.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Memory management is one of the eternal topics of learning C and C++, I hope that after this problem, you can always</span></span><br><span class="line"><span class="comment">pay attention to memory management and exception management in your future C/C++ development, whether it's an OJ problem</span></span><br><span class="line"><span class="comment">or a project.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Forgive me for the high level of robustness requirement for this assignment, after all, implementing a Pyhton-like list</span></span><br><span class="line"><span class="comment">in C is never a piece of cake, as the joke goes: A customer came to your bar, and ordered egg fried rice. I also hope</span></span><br><span class="line"><span class="comment">that you will do a good job of memory management and exception handling in your final project, which will be used as one</span></span><br><span class="line"><span class="comment">of the criteria for project evaluation.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Farewell, until we meet again at the final project :)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">GuTao</span></span><br><span class="line"><span class="comment">Nov. 19, 2023</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> memset main</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> memcpy main</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">PandoraBox</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">    <span class="type">int</span> item_count; <span class="comment">// Number of items stored in the PandoraBox.</span></span><br><span class="line">    <span class="type">int</span> *item_size; <span class="comment">// Array of item sizes in bytes.</span></span><br><span class="line">    <span class="type">void</span> *data;     <span class="comment">// A type-agnostic pointer to store data.</span></span><br><span class="line">} Panbox;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">A PandoraBox capable of storing various data types within a continuous memory space.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">- item_count: Number of items stored in this box.</span></span><br><span class="line"><span class="comment">- item_size: An array of integers; item_size[i] represents the size (in bytes) of the i-th item in the box.</span></span><br><span class="line"><span class="comment">- data: A type-agnostic pointer, enabling interpretation of different data types by reading segments with varying</span></span><br><span class="line"><span class="comment">lengths.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">memory_checker</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IFRET(cond, ret)                                                                                               \</span></span><br><span class="line"><span class="meta">    do                                                                                                                 \</span></span><br><span class="line"><span class="meta">    {                                                                                                                  \</span></span><br><span class="line"><span class="meta">        <span class="keyword">if</span> (cond)                                                                                                      \</span></span><br><span class="line"><span class="meta">        {                                                                                                              \</span></span><br><span class="line"><span class="meta">            return ret;                                                                                                \</span></span><br><span class="line"><span class="meta">        }                                                                                                              \</span></span><br><span class="line"><span class="meta">    } while (0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VIFRET(cond)                                                                                                   \</span></span><br><span class="line"><span class="meta">    do                                                                                                                 \</span></span><br><span class="line"><span class="meta">    {                                                                                                                  \</span></span><br><span class="line"><span class="meta">        <span class="keyword">if</span> (cond)                                                                                                      \</span></span><br><span class="line"><span class="meta">        {                                                                                                              \</span></span><br><span class="line"><span class="meta">            return;                                                                                                    \</span></span><br><span class="line"><span class="meta">        }                                                                                                              \</span></span><br><span class="line"><span class="meta">    } while (0)</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">mycpy</span><span class="params">(<span class="type">void</span> *dst, <span class="type">const</span> <span class="type">void</span> *src, <span class="type">size_t</span> size)</span></span><br><span class="line">{</span><br><span class="line"></span><br><span class="line">    IFRET(dst == <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    IFRET(src == <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="type">char</span> *psrc, *pdst;</span><br><span class="line">    <span class="keyword">if</span> ((src &lt; dst) &amp;&amp; (<span class="type">char</span> *)src + size &gt; (<span class="type">char</span> *)dst)</span><br><span class="line">    {</span><br><span class="line">        psrc = (<span class="type">char</span> *)src + size - <span class="number">1</span>;</span><br><span class="line">        pdst = (<span class="type">char</span> *)dst + size - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (size--)</span><br><span class="line">        {</span><br><span class="line">            *pdst-- = *psrc--;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">        psrc = (<span class="type">char</span> *)src;</span><br><span class="line">        pdst = (<span class="type">char</span> *)dst;</span><br><span class="line">        <span class="keyword">while</span> (size--)</span><br><span class="line">        {</span><br><span class="line">            *pdst++ = *psrc++;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> pdst;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Function: See memcpy in &lt;string.h&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Notes:</span></span><br><span class="line"><span class="comment">- It is not a must to implement this function, but with it you can implement the following functions more easily.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">myset</span><span class="params">(<span class="type">void</span> *dst, <span class="type">int</span> n, <span class="type">size_t</span> size)</span></span><br><span class="line">{</span><br><span class="line">    IFRET((dst == <span class="literal">NULL</span>), <span class="literal">NULL</span>);</span><br><span class="line">    <span class="type">char</span> *pdst = (<span class="type">char</span> *)dst;</span><br><span class="line">    <span class="keyword">while</span> (size--)</span><br><span class="line">    {</span><br><span class="line">        *pdst++ = n;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> dst;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Function: See memset in &lt;string.h&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Notes:</span></span><br><span class="line"><span class="comment">- It is not a must to implement this function, but with it you can implement the following functions more easily.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">Panbox *<span class="title function_">create</span><span class="params">(<span class="type">int</span> item_count, <span class="type">int</span> item_size[])</span></span><br><span class="line">{</span><br><span class="line">    IFRET(item_count &lt; <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">    IFRET(item_count &gt; <span class="number">0</span> &amp;&amp; item_size == <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    Panbox *p = (Panbox *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Panbox));</span><br><span class="line">    IFRET(p == <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    p-&gt;item_count = item_count;</span><br><span class="line">    p-&gt;item_size = (<span class="type">int</span> *)<span class="built_in">malloc</span>(item_count * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="keyword">if</span> (p-&gt;item_size == <span class="literal">NULL</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">free</span>(p);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="type">size_t</span> data_size = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; item_count; i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span> (item_size[i] &lt;= <span class="number">0</span>)</span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">free</span>(p-&gt;item_size);</span><br><span class="line">            <span class="built_in">free</span>(p);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        }</span><br><span class="line">        p-&gt;item_size[i] = item_size[i];</span><br><span class="line">        data_size += item_size[i];</span><br><span class="line">    }</span><br><span class="line">    p-&gt;data = (<span class="type">void</span> *)<span class="built_in">malloc</span>(data_size);</span><br><span class="line">    myset(p-&gt;data, <span class="number">0</span>, data_size);</span><br><span class="line">    <span class="keyword">if</span> (p-&gt;data == <span class="literal">NULL</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">free</span>(p-&gt;item_size);</span><br><span class="line">        <span class="built_in">free</span>(p);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Function: Create an empty PandoraBox with specified item counts and their respective sizes.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Parameters:</span></span><br><span class="line"><span class="comment">- item_count: The number of items to be stored in the PandoraBox.</span></span><br><span class="line"><span class="comment">- item_size: An array specifying the size (in bytes) of each item.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Returns:</span></span><br><span class="line"><span class="comment">A pointer to the created PandoraBox.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Note:</span></span><br><span class="line"><span class="comment">- You CAN create a Panbox with no initial items, i.e., item_count=0.</span></span><br><span class="line"><span class="comment">- However, negative item_count is not supported, and item_size should not be NULL when item_count is non-zero.</span></span><br><span class="line"><span class="comment">- The size of any item should be positive.</span></span><br><span class="line"><span class="comment">- Make sure that the memory newly allocated is filled with 0s.</span></span><br><span class="line"><span class="comment">- You should return NULL immediately if any failure happens.</span></span><br><span class="line"><span class="comment">- Good news: GuTao guarantees that [item_size, item_size+item_count-1] is allocated in advance, unless item_size is</span></span><br><span class="line"><span class="comment">NULL.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">append</span><span class="params">(Panbox *panbox, <span class="type">const</span> <span class="type">void</span> *value, <span class="type">int</span> width)</span></span><br><span class="line">{</span><br><span class="line">    VIFRET(panbox == <span class="literal">NULL</span>);</span><br><span class="line">    VIFRET(panbox-&gt;data == <span class="literal">NULL</span>);</span><br><span class="line">    VIFRET(panbox-&gt;item_size == <span class="literal">NULL</span>);</span><br><span class="line">    VIFRET(panbox-&gt;item_count &lt; <span class="number">0</span>);</span><br><span class="line">    VIFRET(value == <span class="literal">NULL</span>);</span><br><span class="line">    VIFRET(width &lt;= <span class="number">0</span>);</span><br><span class="line">    <span class="type">size_t</span> data_size = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; panbox-&gt;item_count; i++)</span><br><span class="line">    {</span><br><span class="line">        data_size += panbox-&gt;item_size[i];</span><br><span class="line">    }</span><br><span class="line">    <span class="type">int</span> *new_size = (<span class="type">int</span> *)<span class="built_in">realloc</span>(panbox-&gt;item_size, <span class="keyword">sizeof</span>(<span class="type">int</span>) * (panbox-&gt;item_count + <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">if</span> (new_size == <span class="literal">NULL</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="comment">// item_size allocation failed</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">        <span class="type">void</span> *new_data = (<span class="type">void</span> *)<span class="built_in">realloc</span>(panbox-&gt;data, data_size + width);</span><br><span class="line">        <span class="keyword">if</span> (new_data == <span class="literal">NULL</span>)</span><br><span class="line">        {</span><br><span class="line">            <span class="comment">// data allocation failed, undo item_size extension</span></span><br><span class="line">            <span class="type">int</span> *tmp_size;</span><br><span class="line">            <span class="keyword">do</span></span><br><span class="line">            {</span><br><span class="line">                tmp_size = (<span class="type">int</span> *)<span class="built_in">realloc</span>(new_size, <span class="keyword">sizeof</span>(<span class="type">int</span>) * (panbox-&gt;item_count));</span><br><span class="line">            } <span class="keyword">while</span> (tmp_size == <span class="literal">NULL</span>);</span><br><span class="line">            panbox-&gt;item_size = tmp_size;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        {</span><br><span class="line">            <span class="comment">// data allocation sucess</span></span><br><span class="line">            panbox-&gt;data = new_data;</span><br><span class="line">            panbox-&gt;item_count += <span class="number">1</span>;</span><br><span class="line">            panbox-&gt;item_size = new_size;</span><br><span class="line">            panbox-&gt;item_size[panbox-&gt;item_count - <span class="number">1</span>] = width;</span><br><span class="line">            mycpy(((<span class="type">char</span> *)panbox-&gt;data) + data_size, value, width);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Function: Extend the memory of the PandoraBox to append an item.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Parameters:</span></span><br><span class="line"><span class="comment">- panbox: A pointer to the PandoraBox.</span></span><br><span class="line"><span class="comment">- value: A pointer to the data to be added to the PandoraBox.</span></span><br><span class="line"><span class="comment">- width: The size of the data in value (in bytes).</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Note:</span></span><br><span class="line"><span class="comment">- You should not append this item if any failure happens.</span></span><br><span class="line"><span class="comment">- Good news: GuTao guarantees that [value, value+width-1] is allocated in advance, unless value is NULL.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">write</span><span class="params">(Panbox *panbox, <span class="type">int</span> item_id, <span class="type">void</span> *value, <span class="type">int</span> width)</span></span><br><span class="line">{</span><br><span class="line">    VIFRET(panbox == <span class="literal">NULL</span>);</span><br><span class="line">    VIFRET(value == <span class="literal">NULL</span>);</span><br><span class="line">    VIFRET(width &lt;= <span class="number">0</span>);</span><br><span class="line">    VIFRET(item_id &lt; <span class="number">0</span> || item_id &gt;= panbox-&gt;item_count);</span><br><span class="line">    VIFRET(panbox-&gt;item_size[item_id] &lt; width);</span><br><span class="line">    <span class="type">size_t</span> data_size = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; item_id; i++)</span><br><span class="line">    {</span><br><span class="line">        data_size += panbox-&gt;item_size[i];</span><br><span class="line">    }</span><br><span class="line">    mycpy(((<span class="type">char</span> *)panbox-&gt;data) + data_size, value, width);</span><br><span class="line">    <span class="keyword">if</span> (width &lt; panbox-&gt;item_size[item_id])</span><br><span class="line">    {</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> c = ((*((<span class="type">unsigned</span> <span class="type">char</span> *)value + width - <span class="number">1</span>)) &gt; <span class="number">0x7f</span>) ? <span class="number">0xff</span> : <span class="number">0x00</span>;</span><br><span class="line">        myset(((<span class="type">char</span> *)panbox-&gt;data) + data_size + width, c, panbox-&gt;item_size[item_id] - width);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Function: COPY the data stored in 'value' into the segment of the item with index item_id in the PandoraBox.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Parameters:</span></span><br><span class="line"><span class="comment">- panbox: A pointer to the PandoraBox.</span></span><br><span class="line"><span class="comment">- item_id: The index of the item in the PandoraBox where data will be written.</span></span><br><span class="line"><span class="comment">- value: A pointer to the data that needs to be written to the PandoraBox.</span></span><br><span class="line"><span class="comment">- width: The size of the data in value (in bytes).</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Notes:</span></span><br><span class="line"><span class="comment">- If 'item_id' is out of valid bounds, the data won't be written.</span></span><br><span class="line"><span class="comment">- If the item size cannot hold all data in value, the data won't be written.</span></span><br><span class="line"><span class="comment">- If the width of value is smaller than the item size, the data will be placed in the lower address and padded with the</span></span><br><span class="line"><span class="comment">highest bit.</span></span><br><span class="line"><span class="comment">- Example: inserting a 1-byte value into a 2-byte item: (0x7f -&gt; 0x007f), (0xf7 -&gt; 0xfff7).</span></span><br><span class="line"><span class="comment">- The item_size should not change in this function.</span></span><br><span class="line"><span class="comment">- You should not write the item if any failure happens.</span></span><br><span class="line"><span class="comment">- Good news: GuTao guarantees that [value, value+width-1] is allocated in advance, unless value is NULL.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">read</span><span class="params">(Panbox *panbox, <span class="type">int</span> item_id)</span></span><br><span class="line">{</span><br><span class="line">    IFRET(panbox == <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    IFRET(item_id &lt; <span class="number">0</span> || item_id &gt;= panbox-&gt;item_count, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="type">void</span> *data = (<span class="type">void</span> *)<span class="built_in">malloc</span>(panbox-&gt;item_size[item_id]);</span><br><span class="line">    <span class="keyword">if</span> (data != <span class="literal">NULL</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="type">char</span> *p = panbox-&gt;data;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; item_id; i++)</span><br><span class="line">        {</span><br><span class="line">            p = p + panbox-&gt;item_size[i];</span><br><span class="line">        }</span><br><span class="line">        mycpy(data, p, panbox-&gt;item_size[item_id]);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Function: COPY the item with index item_id from the PandoraBox into a newly allocated memory, and return a pointer to</span></span><br><span class="line"><span class="comment">this memory.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Parameters:</span></span><br><span class="line"><span class="comment">- panbox: A pointer to the PandoraBox.</span></span><br><span class="line"><span class="comment">- item_id: The index of the item in the PandoraBox that should be read.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Returns:</span></span><br><span class="line"><span class="comment">A pointer to the newly allocated memory containing a copy of the specified item.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Notes:</span></span><br><span class="line"><span class="comment">- You should return NULL immediately if any failure happens.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">destroy</span><span class="params">(Panbox *panbox)</span></span><br><span class="line">{</span><br><span class="line">    VIFRET(panbox == <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">free</span>(panbox-&gt;data);</span><br><span class="line">    panbox-&gt;data = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">free</span>(panbox-&gt;item_size);</span><br><span class="line">    panbox-&gt;item_size = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">free</span>(panbox);</span><br><span class="line">    panbox = <span class="literal">NULL</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Function: Deallocate the memory associated with the PandoraBox and its data.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Parameters:</span></span><br><span class="line"><span class="comment">- panbox: A pointer to the PandoraBox that should be destroyed.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Notes:</span></span><br><span class="line"><span class="comment">- This function should be used when the PandoraBox is no longer needed to prevent memory leak.</span></span><br><span class="line"><span class="comment">- You should check before freeing a pointer.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printc</span><span class="params">(<span class="type">void</span> *value, <span class="type">int</span> width)</span></span><br><span class="line">{</span><br><span class="line">    VIFRET(value == <span class="literal">NULL</span>);</span><br><span class="line">    VIFRET(width &lt;= <span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> printed = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; width; i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> c = ((<span class="type">unsigned</span> <span class="type">char</span> *)value)[i];</span><br><span class="line">        <span class="keyword">if</span> (c &gt;= <span class="number">33</span> &amp;&amp; c != <span class="number">127</span>)</span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%c "</span>, (c &gt; <span class="number">127</span>) ? <span class="string">'-'</span> : c);</span><br><span class="line">            printed = <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (printed)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Function: Print every 1 byte (char) in [value, value+width-1] as a character, split by a space.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Notes:</span></span><br><span class="line"><span class="comment">- Good news: GuTao guarantees that [value, value+width-1] is allocated in advance, unless value is NULL.</span></span><br><span class="line"><span class="comment">- If the value of the byte is in [0, 32] or equals to 127(Del), do not print anything(they are special characters).</span></span><br><span class="line"><span class="comment">- e.g., for an empty box with all 0, the destroy of this box will invoke printc(), but should not print anything.</span></span><br><span class="line"><span class="comment">- If the value of the byte is negative, print '-' instead.</span></span><br><span class="line"><span class="comment">- You should return immediately if any failure happens.</span></span><br><span class="line"><span class="comment">- Please print a `\n` before returning, unless you print nothing in this function.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printx</span><span class="params">(<span class="type">void</span> *value, <span class="type">int</span> width)</span></span><br><span class="line">{</span><br><span class="line">    VIFRET(value == <span class="literal">NULL</span>);</span><br><span class="line">    VIFRET(width &lt;= <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"0x"</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = width - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    {</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> c = ((<span class="type">unsigned</span> <span class="type">char</span> *)value)[i];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%02x"</span>, c);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Function: Print the value in [value, value+width-1] as a single hexadecimal, in format of 0x12345678.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Notes:</span></span><br><span class="line"><span class="comment">- Good news: GuTao guarantees that [value, value+width-1] is allocated in advance, unless value is NULL.</span></span><br><span class="line"><span class="comment">- You should return immediately if any failure happens.</span></span><br><span class="line"><span class="comment">- If the highest byte is less than 0x10, please output a leading 0, e.g., 0x0514.</span></span><br><span class="line"><span class="comment">- Leading zeros are OK, if *(value) = 0x000f, width = 2, then print 0x000f. (print even number of characters)</span></span><br><span class="line"><span class="comment">- If the item is full of 0s, please still print it. E.g., 0x0000.</span></span><br><span class="line"><span class="comment">- Please print a `\n` before returning, unless failure happens in this function.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">hex2int</span><span class="params">(<span class="type">char</span> c)</span></span><br><span class="line">{</span><br><span class="line">    IFRET(<span class="string">'0'</span> &lt;= c &amp;&amp; c &lt;= <span class="string">'9'</span>, c - <span class="string">'0'</span>);</span><br><span class="line">    IFRET(<span class="string">'a'</span> &lt;= c &amp;&amp; c &lt;= <span class="string">'f'</span>, c - <span class="string">'a'</span> + <span class="number">10</span>);</span><br><span class="line">    IFRET(<span class="string">'A'</span> &lt;= c &amp;&amp; c &lt;= <span class="string">'F'</span>, c - <span class="string">'A'</span> + <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">hex2byte</span><span class="params">(<span class="type">void</span> *dst, <span class="type">char</span> *hex)</span></span><br><span class="line">{</span><br><span class="line">    VIFRET(dst == <span class="literal">NULL</span>);</span><br><span class="line">    VIFRET(hex == <span class="literal">NULL</span>);</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *ptr = (<span class="type">unsigned</span> <span class="type">char</span> *)dst;</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">strlen</span>(hex);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i -= <span class="number">2</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="type">char</span> lo = hex[i];</span><br><span class="line">        <span class="type">char</span> hi = hex[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (lo == <span class="string">'x'</span>)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (hi == <span class="string">'x'</span>)</span><br><span class="line">        {</span><br><span class="line">            *(ptr) = hex2int(lo);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        {</span><br><span class="line">            *(ptr) = (hex2int(hi) &lt;&lt; <span class="number">4</span>) + hex2int(lo);</span><br><span class="line">        }</span><br><span class="line">        ptr++;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Function: For the given hex string "0x12345678", write 0x12345678 into dst.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Notes:</span></span><br><span class="line"><span class="comment">- The length of hex might be ODD, make sure to put all data into dst. For example, "0xfff"(12 bits) should be stored</span></span><br><span class="line"><span class="comment">using 2 bytes as 0x0fff(different from write(), just add a padding 0 here).</span></span><br><span class="line"><span class="comment">- You should return immediately if any failure happens.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">show_info</span><span class="params">(Panbox *p)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, p-&gt;item_count);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; p-&gt;item_count; i++)</span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>, p-&gt;item_size[i]);</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"NULL\n"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">Panbox *p = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">    <span class="comment">// freopen("./testcases/gift.in", "r", stdin);</span></span><br><span class="line">    <span class="comment">// freopen("./testcases/gift.out", "w", stdout);</span></span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    {</span><br><span class="line">        <span class="type">char</span> op;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">" %c"</span>, &amp;op);</span><br><span class="line">        <span class="keyword">switch</span> (op)</span><br><span class="line">        {</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'C'</span>: {</span><br><span class="line">            <span class="type">int</span> item_count;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;item_count);</span><br><span class="line">            <span class="type">int</span> *item_size = (<span class="type">int</span> *)<span class="built_in">malloc</span>(item_count * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; item_count; i++)</span><br><span class="line">            {</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;item_size[i]);</span><br><span class="line">            }</span><br><span class="line">            p = create(item_count, item_size);</span><br><span class="line">            <span class="built_in">free</span>(item_size);</span><br><span class="line">            item_size = <span class="literal">NULL</span>;</span><br><span class="line">            <span class="comment">// show_info(p);</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'D'</span>: {</span><br><span class="line">            <span class="keyword">if</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = p-&gt;item_count - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">                {</span><br><span class="line">                    <span class="type">void</span> *data = read(p, i);</span><br><span class="line">                    <span class="keyword">if</span> (data != <span class="literal">NULL</span>)</span><br><span class="line">                    {</span><br><span class="line">                        <span class="comment">// printf("%d th item:", i);</span></span><br><span class="line">                        printc(data, p-&gt;item_size[i]);</span><br><span class="line">                    }</span><br><span class="line">                    <span class="built_in">free</span>(data);</span><br><span class="line">                    data = <span class="literal">NULL</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            destroy(p);</span><br><span class="line">            p = <span class="literal">NULL</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'A'</span>: {</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;len);</span><br><span class="line">            <span class="type">char</span> *hex_str = (<span class="type">char</span> *)<span class="built_in">malloc</span>(len + <span class="number">1</span>);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>, hex_str);</span><br><span class="line">            <span class="type">int</span> num_of_byte = (<span class="built_in">strlen</span>(hex_str) - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">            <span class="type">void</span> *data = (<span class="type">void</span> *)<span class="built_in">malloc</span>(num_of_byte * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">            hex2byte(data, hex_str);</span><br><span class="line">            append(p, data, num_of_byte);</span><br><span class="line">            <span class="built_in">free</span>(hex_str);</span><br><span class="line">            hex_str = <span class="literal">NULL</span>;</span><br><span class="line">            <span class="built_in">free</span>(data);</span><br><span class="line">            data = <span class="literal">NULL</span>;</span><br><span class="line">            <span class="comment">// show_info(p);</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'W'</span>: {</span><br><span class="line">            <span class="type">int</span> item_id;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;item_id);</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;len);</span><br><span class="line">            <span class="type">char</span> *hex_str = (<span class="type">char</span> *)<span class="built_in">malloc</span>(len + <span class="number">1</span>);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>, hex_str);</span><br><span class="line">            <span class="type">int</span> num_of_byte = (<span class="built_in">strlen</span>(hex_str) - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">            <span class="type">void</span> *data = (<span class="type">void</span> *)<span class="built_in">malloc</span>(num_of_byte * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">            hex2byte(data, hex_str);</span><br><span class="line">            write(p, item_id, data, num_of_byte);</span><br><span class="line">            <span class="built_in">free</span>(hex_str);</span><br><span class="line">            hex_str = <span class="literal">NULL</span>;</span><br><span class="line">            <span class="built_in">free</span>(data);</span><br><span class="line">            data = <span class="literal">NULL</span>;</span><br><span class="line">            <span class="comment">// show_info(p);</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'R'</span>: {</span><br><span class="line">            <span class="type">int</span> item_id;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;item_id);</span><br><span class="line">            <span class="type">int</span> is_printc;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;is_printc);</span><br><span class="line">            <span class="type">void</span> *data = read(p, item_id);</span><br><span class="line">            <span class="keyword">if</span> (data != <span class="literal">NULL</span>)</span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">if</span> (is_printc)</span><br><span class="line">                {</span><br><span class="line">                    printc(data, p-&gt;item_size[item_id]);</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                {</span><br><span class="line">                    printx(data, p-&gt;item_size[item_id]);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="built_in">free</span>(data);</span><br><span class="line">            data = <span class="literal">NULL</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'Q'</span>: {</span><br><span class="line">            show_info(p);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'M'</span>: {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"check result: %d\n"</span>, memory_checker());</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">default</span>: {</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    fclose(<span class="built_in">stdin</span>);</span><br><span class="line">    fclose(<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">memory_checker</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">int</span> is[<span class="number">3</span>] = {<span class="number">10</span>, <span class="number">20</span>, <span class="number">0</span>};</span><br><span class="line">    <span class="type">char</span> val[<span class="number">5</span>] = {<span class="string">'G'</span>, <span class="string">'u'</span>, <span class="string">'T'</span>, <span class="string">'a'</span>, <span class="string">'o'</span>};</span><br><span class="line">    Panbox *u = <span class="literal">NULL</span>;</span><br><span class="line">    destroy(u);</span><br><span class="line">    u = create(<span class="number">-1</span>, is); <span class="comment">// negative item_count, non-null item_size, should fail</span></span><br><span class="line">    IFRET(u != <span class="literal">NULL</span>, <span class="number">1</span>);</span><br><span class="line">    u = create(<span class="number">1</span>, <span class="literal">NULL</span>); <span class="comment">// positive item_count, null item_size, should fail</span></span><br><span class="line">    IFRET(u != <span class="literal">NULL</span>, <span class="number">2</span>);</span><br><span class="line">    u = create(<span class="number">0</span>, <span class="literal">NULL</span>); <span class="comment">// empty box, should success</span></span><br><span class="line">    IFRET(u == <span class="literal">NULL</span>, <span class="number">3</span>);</span><br><span class="line">    destroy(u);        <span class="comment">// Normal destroy</span></span><br><span class="line">    u = create(<span class="number">3</span>, is); <span class="comment">// item_size[2] = 0, fail</span></span><br><span class="line">    IFRET(u != <span class="literal">NULL</span>, <span class="number">4</span>);</span><br><span class="line">    u = create(<span class="number">2</span>, is); <span class="comment">// Normal create, should success</span></span><br><span class="line">    IFRET(u == <span class="literal">NULL</span>, <span class="number">5</span>);</span><br><span class="line">    show_info(u);         <span class="comment">// 2 \n 10 20</span></span><br><span class="line">    append(<span class="literal">NULL</span>, val, <span class="number">5</span>); <span class="comment">// fail</span></span><br><span class="line">    append(u, <span class="literal">NULL</span>, <span class="number">5</span>);   <span class="comment">// fail</span></span><br><span class="line">    show_info(u);         <span class="comment">// 2 \n 10 20</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++)</span><br><span class="line">    {</span><br><span class="line">        append(u, val, <span class="number">5</span>); <span class="comment">// success</span></span><br><span class="line">    }</span><br><span class="line">    show_info(u);                   <span class="comment">// 1002 \n 10 20 5 ... 5</span></span><br><span class="line">    write(<span class="literal">NULL</span>, <span class="number">0</span>, val, <span class="number">5</span>);         <span class="comment">// fail</span></span><br><span class="line">    write(u, <span class="number">-1</span>, val, <span class="number">5</span>);           <span class="comment">// fail</span></span><br><span class="line">    write(u, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="number">5</span>);           <span class="comment">// fail</span></span><br><span class="line">    write(u, <span class="number">0</span>, val, <span class="number">5</span>);            <span class="comment">// success</span></span><br><span class="line">    show_info(u);                   <span class="comment">// 1002 \n 10 20 5 ... 5</span></span><br><span class="line">    <span class="type">void</span> *read_out = read(<span class="literal">NULL</span>, <span class="number">0</span>); <span class="comment">// fail</span></span><br><span class="line">    IFRET(read_out != <span class="literal">NULL</span>, <span class="number">6</span>);</span><br><span class="line">    read_out = read(u, <span class="number">-1</span>); <span class="comment">// fail</span></span><br><span class="line">    IFRET(read_out != <span class="literal">NULL</span>, <span class="number">7</span>);</span><br><span class="line">    read_out = read(u, <span class="number">2</span>); <span class="comment">// success</span></span><br><span class="line">    IFRET(read_out == <span class="literal">NULL</span>, <span class="number">8</span>);</span><br><span class="line">    <span class="built_in">free</span>(read_out);        <span class="comment">// p-&gt;data should not be freed</span></span><br><span class="line">    read_out = read(u, <span class="number">0</span>); <span class="comment">// success</span></span><br><span class="line">    printc(<span class="literal">NULL</span>, <span class="number">1</span>);       <span class="comment">// fail, no output</span></span><br><span class="line">    printc(read_out, <span class="number">0</span>);   <span class="comment">// fail, no output</span></span><br><span class="line">    printc(read_out, <span class="number">5</span>);   <span class="comment">// G u T a o</span></span><br><span class="line">    printx(<span class="literal">NULL</span>, <span class="number">1</span>);       <span class="comment">// fail, no output</span></span><br><span class="line">    printx(read_out, <span class="number">0</span>);   <span class="comment">// fail, no output</span></span><br><span class="line">    printx(read_out, <span class="number">5</span>);   <span class="comment">// 0x6f61547547</span></span><br><span class="line">    <span class="built_in">free</span>(read_out);</span><br><span class="line">    read_out = <span class="literal">NULL</span>;</span><br><span class="line">    destroy(u);</span><br><span class="line">    u = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></div></figure>
</details>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>CS329 Machine Learning Quiz 1</title>
    <url>/2023/10/31/CS329_Quiz_1/</url>
    <content><![CDATA[<h2 id="CS329-Machine-Learning-H-Quiz-1"><a href="#CS329-Machine-Learning-H-Quiz-1" class="headerlink" title="CS329 Machine Learning(H) Quiz 1"></a>CS329 Machine Learning(H) Quiz 1</h2><p>樊斯特 12111624</p>
<h3 id="Question-1"><a href="#Question-1" class="headerlink" title="Question 1"></a>Question 1</h3><p>Given $x=u+v$, $u\sim\mathcal N(m_0,\Sigma_0)$,$v\sim\mathcal N(0,Q)$, $D=[x_1,\cdots,x_N]$</p>
<ol>
<li>$p(u\vert D,m_0,\Sigma_0,Q)$</li>
<li>$p(x\vert D,m_0,\Sigma_0,Q)$</li>
<li>evidence $p(D\vert m_0,\Sigma_0,Q)$</li>
</ol>
<h3 id="Solution-1-1"><a href="#Solution-1-1" class="headerlink" title="Solution 1.1"></a>Solution 1.1</h3><p>prior: $x\sim\mathcal N(m_0,\Sigma_0+Q)$</p>
<p>$p(u | D, m_0, \Sigma_0, Q) \propto p(D | m_0, \Sigma_0, Q) \cdot p(u | m_0, \Sigma_0).$</p>
<p>$p(D | m_0, \Sigma_0, Q)=\frac{1}{(2\pi (\Sigma_0+Q))^{N/2}}\exp\left\{-\frac{1}{2(\Sigma_0+Q)}\sum\limits_{n=1}^N (x_n-m_0)^2\right\}$</p>
<p>$p(u\vert m_0,\Sigma_0)=\frac{1}{(2\pi \Sigma_0)^{1/2}}\exp\left\{-\frac{1}{2\Sigma_0} (u-m_0)^2\right\}$</p>
<p>Hence Posterior Distribution $p(u | D, m_0, \Sigma_0, Q) \sim \mathcal N(m_u, \Sigma_u),$</p>
<p>where:</p>
<ul>
<li>$\Sigma_u^{-1} = NQ^{-1}+\Sigma_0^{-1}$</li>
<li>$\Sigma_u^{-1}m_u=Q^{-1}\sum\limits_{n=1}^Nx_n+\Sigma_0^{-1}m_0$</li>
</ul>
<h3 id="Solution-1-2"><a href="#Solution-1-2" class="headerlink" title="Solution 1.2"></a>Solution 1.2</h3><p>$x=u+v$</p>
<p>$p(x\vert D,m_0,\Sigma_0,Q)=\mathcal N(m_u,\Sigma_u+Q)$</p>
<h3 id="Solution-1-3"><a href="#Solution-1-3" class="headerlink" title="Solution 1.3"></a>Solution 1.3</h3><script type="math/tex; mode=display">
\begin{align*}
p(D\vert m_0,\Sigma_0,Q)&=\int p(D\vert u,Q)p(u\vert m_0,\Sigma_0) du\\
&=\frac{1}{(2\pi)^{N/2}\vert\Sigma_0\vert^{\frac 1 2}}\int \exp\left\{-\frac 1 2 \sum\limits_{n=1}^N(x_n-u)^\text TQ^{-1}(x_n-u)-\frac 1 2 \sum\limits_{n=1}^N(u-m_0)^\text T\Sigma_0^{-1}(u-m_0)\right\} du\\
&=\frac{1}{(2\pi)^{N/2}\vert\Sigma_0\vert^{\frac 1 2}}\int \exp\left\{\right\}
\end{align*}</script><h3 id="Question-2"><a href="#Question-2" class="headerlink" title="Question 2"></a>Question 2</h3><p>Given $y=Ax+v$, $x\sim\mathcal N(m_0,\Sigma_0)$,$v\sim\mathcal N(0,Q)$, $D=[y_1,\cdots,y_N]$</p>
<ol>
<li>$p(x\vert D,m_0,\Sigma_0,Q)$</li>
<li>$p(y\vert D,m_0,\Sigma_0,Q)$</li>
<li>evidence $p(D\vert m_0,\Sigma_0,Q)$</li>
</ol>
<h3 id="Solution-2-1"><a href="#Solution-2-1" class="headerlink" title="Solution 2.1"></a>Solution 2.1</h3><p>$p(x | D, m_0, \Sigma_0, Q) \propto p(D | m_0, \Sigma_0, Q) \cdot p(x | m_0, \Sigma_0).$</p>
<p>$p(D | m_0, \Sigma_0, Q) = \prod\limits_{n=1}^N p(x_n)=p(D | m_0, \Sigma_0, Q)= \frac{1}{(2\pi\Sigma_0)^{N/2}}\prod\limits_{n=1}^N   \exp\left\{-\frac{1}{2\Sigma_0}(x_n - m_0)^2\right\}.$</p>
<p>$p(x | m_0, \Sigma_0)=\mathcal N(m_0,\Sigma_0)$</p>
<p>Hence Posterior Distribution $p(x | D, m_0, \Sigma_0, Q) \sim \mathcal N(m_x, \Sigma_x),$</p>
<p>where:</p>
<ul>
<li><p>$\Sigma_x = \left(\Sigma_0^{-1} + NA^TQ^{-1}A\right)^{-1}$</p>
</li>
<li><p>$\Sigma_x^{-1}m_x=\sum\limits_{n=1}^NA^TQ^{-1}y_n+\Sigma_0^{-1}m_0$</p>
</li>
</ul>
<h3 id="Solution-2-2"><a href="#Solution-2-2" class="headerlink" title="Solution 2.2"></a>Solution 2.2</h3><p>$y=Ax+v$.</p>
<p>$p(y | D, m_0, \Sigma_0, Q) =\mathcal N(Am_x, A\Sigma_xA^T + Q)$</p>
<h3 id="Solution-2-3"><a href="#Solution-2-3" class="headerlink" title="Solution 2.3"></a>Solution 2.3</h3><h3 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h3><h4 id="Learning"><a href="#Learning" class="headerlink" title="Learning"></a>Learning</h4><script type="math/tex; mode=display">
p(\theta\vert\mathcal D)\propto p(\mathcal D\vert\theta)\cdot p(\theta)</script><h4 id="Prediction"><a href="#Prediction" class="headerlink" title="Prediction"></a>Prediction</h4><script type="math/tex; mode=display">
p(t\vert x,\mathcal D)=\int p(t\vert x,\mathcal \theta) \cdot p(\theta\vert\mathcal D) \text d \theta</script><h4 id="Evidence"><a href="#Evidence" class="headerlink" title="Evidence"></a>Evidence</h4><script type="math/tex; mode=display">
p(\mathcal D)=\int p(\mathcal D\vert\theta)\cdot p(\theta) \text d\theta</script><h2 id="Review-on-Nov-14"><a href="#Review-on-Nov-14" class="headerlink" title="Review on Nov. 14"></a>Review on Nov. 14</h2><p>$x\sim p(x\vert \mu,\Sigma)$, $x = [x_0,\dots,x_N]$, $\mu\sim p(\mu\vert m_0,\Sigma_0)$</p>
<p>posterior $p(\mu\vert x,m_0,\Sigma_0)\propto p(x\vert \mu) p(\mu)$</p>
<script type="math/tex; mode=display">
-\frac 1 2 (\mu-m_\text{MAP})^\text T \Sigma_\text{MAP}^{-1}(\mu-m_\text{MAP}) = -\sum\limits_{i=1}^N\frac 1 2 (x_i-\mu)^\text T \Sigma_\text{ML}^{-1}(x_i-\mu) - \frac 1 2 (\mu-m_0)^\text T \Sigma_0^{-1}(\mu-m_0)</script>]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
        <tag>Artificial Intelligence</tag>
      </tags>
  </entry>
  <entry>
    <title>CS329 Machine Learning Quiz 2</title>
    <url>/2023/11/14/CS329_Quiz_2/</url>
    <content><![CDATA[<h2 id="CS329-Machine-Learning-H-Quiz-2"><a href="#CS329-Machine-Learning-H-Quiz-2" class="headerlink" title="CS329 Machine Learning(H) Quiz 2"></a>CS329 Machine Learning(H) Quiz 2</h2><p>樊斯特 12111624</p>
<h3 id="Before-Quiz"><a href="#Before-Quiz" class="headerlink" title="Before Quiz"></a>Before Quiz</h3><script type="math/tex; mode=display">
\begin{align*}
&-(a_0-1)\ln\pi - (b_0-1)\ln(1-\pi) \quad &\text{prior of }\pi\\
&+\frac 1 2(\mu_1-m_{10})^\text T \Sigma_{10}^{-1}(\mu_1-m_{10}) \quad &\text{prior of }\mu_1\\
&+\frac 1 2(\mu_2-m_{20})^\text T \Sigma_{20}^{-1}(\mu_2-m_{20})\quad &\text{prior of }\mu_2\\
&+\sum\limits_{n=1}^N[t_n\ln\left(\pi\mathcal N (x\vert\mu_1,\Sigma_1)\right)+(1-t_n)\ln((1-\pi)\mathcal N (x\vert\mu_2,\Sigma_2))]\quad&\text{Likelihood}
\end{align*}</script><hr>
<h3 id="Question-1-Generative-Gaussian-Mixture"><a href="#Question-1-Generative-Gaussian-Mixture" class="headerlink" title="Question 1 Generative Gaussian Mixture"></a>Question 1 Generative Gaussian Mixture</h3><h4 id="Question-1-1"><a href="#Question-1-1" class="headerlink" title="Question 1.1"></a>Question 1.1</h4><p>$p(x)=\pi\mathcal N(x\vert\mu_1,\Sigma_1)+(1-\pi)\mathcal N(x\vert\mu_2,\Sigma_2)$</p>
<p>Given $\mathbf x=[x_1,\dots,x_N]$, $\mathbf t=[t_1,\dots,t_N]$</p>
<p>What’s the ML estimation of $\mu_1,\Sigma_1,\mu_2,\Sigma_2,\pi$?</p>
<h4 id="Solution-1-1"><a href="#Solution-1-1" class="headerlink" title="Solution 1.1"></a>Solution 1.1</h4><p>Derive log-likelihood function w.r.t. $\pi$,</p>
<script type="math/tex; mode=display">
\frac{\partial}{\partial \pi}L=\frac{\partial}{\partial \pi}\sum\limits_{n=1}^N \{t_n\ln\pi+(1-t_n)\ln(1-\pi)\}=\frac{N_1}{\pi}+\frac{N_2}{\pi-1}=0</script><p>Derive log-likelihood function w.r.t. $\mu_i$,</p>
<script type="math/tex; mode=display">
\begin{align*}
\frac{\partial}{\partial \mu_1}L &= \frac{\partial}{\partial \mu_1} \sum\limits_{n=1}^N t_n\ln\mathcal N(x_n\vert,\mu_1,\Sigma_1)\\
&=\frac{\partial}{\partial \mu_1} -\frac 1 2 \sum\limits_{n=1}^N t_n(x_n-\mu_1)^\text T \Sigma_1^{-1}(x_n-\mu_1)\\
&=0\\
\frac{\partial}{\partial \mu_2}L &= \frac{\partial}{\partial \mu_2} \sum\limits_{n=1}^N (1-t_n)\ln\mathcal N(x_n\vert,\mu_2,\Sigma_2)\\
&=\frac{\partial}{\partial \mu_2} -\frac 1 2 \sum\limits_{n=1}^N (1-t_n)(x_n-\mu_2)^\text T \Sigma_1^{-1}(x_n-\mu_2)\\
&=0
\end{align*}</script><p>Derive log-likelihood function w.r.t. $\Sigma_i$,</p>
<script type="math/tex; mode=display">
\begin{align*}
\frac{\partial}{\partial \Sigma_1} L &= \frac{\partial}{\partial \Sigma_1} \left(-\frac 1 2 \sum\limits_{n=1}^N t_n\ln |\Sigma_1|-\frac1 2 \sum\limits_{n=1}^N t_n(x_n-\mu_1)^\text T \Sigma_1^{-1}(x_n-\mu_1)\right)=0\\
\frac{\partial}{\partial \Sigma_2} L &= \frac{\partial}{\partial \Sigma_2} \left(-\frac 1 2 \sum\limits_{n=1}^N (1-t_n)\ln |\Sigma_2|-\frac1 2 \sum\limits_{n=1}^N (1-t_n)(x_n-\mu_2)^\text T \Sigma_2^{-1}(x_n-\mu_2)\right)=0
\end{align*}</script><p>Hence we have</p>
<script type="math/tex; mode=display">
\begin{align*}
\pi_\text{ML} &= \frac 1 N \sum\limits_{n=1}^N t_n =\frac{N_1}{N}=\frac{N_1}{N_1+N_2}\\
\mu_{1\text{ML}} &= \frac 1 {N_1}\sum\limits_{n=1}^Nt_n x_n\\
\mu_{2\text{ML}} &= \frac 1 {N_2}\sum\limits_{n=1}^N(1-t_n) x_n\\
\Sigma_{1\text{ML}} &=\frac 1 {N_1}\sum\limits_{x_n\in\mathcal C_1} (x_n-\mu_{1\text{ML}})(x_n-\mu_{1\text{ML}})^\text T\\
\Sigma_{2\text{ML}} &=\frac 1 {N_2}\sum\limits_{x_n\in\mathcal C_2} (x_n-\mu_{2\text{ML}})(x_n-\mu_{2\text{ML}})^\text T
\end{align*}</script><p>where</p>
<ul>
<li>$N_1$ is the number of data points in class 1,</li>
<li>$N_2$ is the number of data points in class 2.</li>
</ul>
<h4 id="Question-1-2"><a href="#Question-1-2" class="headerlink" title="Question 1.2"></a>Question 1.2</h4><p>$\pi\sim beta(a_0,b_0), p(\mu_i) = \mathcal N(m_{i0},\Sigma_{i0}), i=1,2$</p>
<p>Given $\mathbf x=[x_1,\dots,x_N]$, $\mathbf t=[t_1,\dots,t_N]$</p>
<p>What’s the MAP estimation of $\mu_1,\Sigma_1,\mu_2,\Sigma_2,\pi$?</p>
<h4 id="Solution-1-2"><a href="#Solution-1-2" class="headerlink" title="Solution 1.2"></a>Solution 1.2</h4><p>Posterior of $\pi$:</p>
<script type="math/tex; mode=display">
\begin{align*}
p(\pi|\mathbf{t}) &\propto p(\mathbf{t}|\pi) \cdot p(\pi)\\
&= \pi^{N_1} \cdot (1 - \pi)^{N_2} \cdot \pi^{a_0-1} \cdot (1-\pi)^{b_0-1}\\
&= \pi^{N_1 + a_0 - 1} \cdot (1 - \pi)^{N_2 + b_0 - 1}
\end{align*}</script><p>By using the property of product of Gaussian distributions, we obtain the MAP estimation of $\mu_i$ and $\Sigma_i$</p>
<script type="math/tex; mode=display">
\begin{align*}
\pi_\text{MAP} &= \frac{N_1+a_{0}-1}{N+a_0+b_0-2}=\frac{N_1+a_0-1}{N_1+N_2+a_0+b_0-2}\\
\Sigma_{1\text{MAP}} &=({\Sigma_{1\text{ML}}}^{-1}+{\Sigma_{10}}^{-1})^{-1}\\
\Sigma_{2\text{MAP}} &=({\Sigma_{2\text{ML}}}^{-1}+{\Sigma_{20}}^{-1})^{-1}\\
\mu_{1\text{MAP}} &= \Sigma_{1\text{MAP}}({\Sigma_{1\text{ML}}}^{-1}\mu_{1\text{ML}}+{\Sigma_{10}}^{-1}m_{10})\\
\mu_{2\text{MAP}} &= \Sigma_{2\text{MAP}}({\Sigma_{2\text{ML}}}^{-1}\mu_{2\text{ML}}+{\Sigma_{20}}^{-1}m_{20})\\
\end{align*}</script><h4 id="Question-1-3"><a href="#Question-1-3" class="headerlink" title="Question 1.3"></a>Question 1.3</h4><p>What’s $p(\mathcal C_1\vert x)$ for ML and MAP models respectively?</p>
<h4 id="Solution-1-3"><a href="#Solution-1-3" class="headerlink" title="Solution 1.3"></a>Solution 1.3</h4><p>By Bayes’ Theorem,</p>
<script type="math/tex; mode=display">
\begin{align*}
p_\text{ML}(\mathcal C_1\vert x)&=\frac{p_\text{ML}(x,\mathcal C_1)}{p_\text{ML}(x)}=\frac{\pi_\text{ML}\mathcal N(x\vert\mu_\text{1ML},\Sigma_\text{1ML})}{\pi_\text{ML}\mathcal N(x\vert\mu_\text{1ML},\Sigma_\text{1ML})+(1-\pi_\text{ML})\mathcal N(x\vert\mu_\text{2ML},\Sigma_\text{2ML})}\\
p_\text{MAP}(\mathcal C_1\vert x)&=\frac{p_\text{MAP}(x,\mathcal C_1)}{p_\text{MAP}(x)}=\frac{\pi_\text{MAP}\mathcal N(x\vert\mu_\text{1MAP},\Sigma_\text{1MAP})}{\pi_\text{MAP}\mathcal N(x\vert\mu_\text{1MAP},\Sigma_\text{1MAP})+(1-\pi_\text{MAP})\mathcal N(x\vert\mu_\text{2MAP},\Sigma_\text{2MAP})}
\end{align*}</script><hr>
<h3 id="Question-2-Discriminative-Logistic-Regression"><a href="#Question-2-Discriminative-Logistic-Regression" class="headerlink" title="Question 2 Discriminative Logistic Regression"></a>Question 2 Discriminative Logistic Regression</h3><h4 id="Question-2-1"><a href="#Question-2-1" class="headerlink" title="Question 2.1"></a>Question 2.1</h4><p>$y=\sigma(w^\text T\phi(x))$</p>
<p>Given $\mathbf x=[x_1,\dots,x_N]$, $\mathbf t=[t_1,\dots,t_N]$</p>
<p>What’s the ML estimation of $q(w)$?</p>
<h4 id="Solution-2-1"><a href="#Solution-2-1" class="headerlink" title="Solution 2.1"></a>Solution 2.1</h4><p>By Gauss-Newton iteration: $w^\text{new}=w^\text{old}-H^{-1}\nabla E(w)$, we obtain $w_\text{ML}$,</p>
<p>where</p>
<script type="math/tex; mode=display">
\begin{align*}
E(w) &= -\sum\limits_{n=1}^N  [t_n\ln y_n + (1-t_n)\ln(1-y_n)]\\
\nabla E(w) &= \sum\limits_{n=1}^N (y_n-t_n)\phi(x_n)\\
\text{step size}\quad H &= \nabla^2 E(w) = \sum\limits_{n=1}^N y_n(1-y_n)\phi(x_n)\phi(x_n)^\text T
\end{align*}</script><p>Hence</p>
<script type="math/tex; mode=display">
q(w) = \mathcal N(w\vert w_\text{ML}, H^{-1})</script><h4 id="Question-2-2"><a href="#Question-2-2" class="headerlink" title="Question 2.2"></a>Question 2.2</h4><p>$y=\sigma(w^\text T\phi(x))$, $p(w)\sim\mathcal N(m_0,\Sigma_0)$</p>
<p>Given $\mathbf x=[x_1,\dots,x_N]$, $\mathbf t=[t_1,\dots,t_N]$</p>
<p>What’s the MAP estimation of $q(w)$?</p>
<h4 id="Solution-2-2"><a href="#Solution-2-2" class="headerlink" title="Solution 2.2"></a>Solution 2.2</h4><p>By Gauss-Newton iteration: $w^\text{new}=w^\text{old}-H^{-1}\nabla E(w)$, we obtain $w_\text{ML}$,</p>
<p>where</p>
<script type="math/tex; mode=display">
\begin{align*}
E(w) &= \frac{1}{2} (w-m_0)^\text T\Sigma_0^{-1}(w-m_0)-\sum\limits_{n=1}^N  [t_n\ln y_n + (1-t_n)\ln(1-y_n)]\\
\nabla E(w) &=\Sigma_0^{-1}(w-m_0)+ \sum\limits_{n=1}^N (y_n-t_n)\phi(x_n)\\
\text{step size}\quad H &= \nabla^2 E(w) = \Sigma_0^{-1}+\sum\limits_{n=1}^N y_n(1-y_n)\phi(x_n)\phi(x_n)^\text T
\end{align*}</script><p>Hence </p>
<script type="math/tex; mode=display">
q(w) = \mathcal N(w\vert w_\text{MAP}, H^{-1})</script><h4 id="Question-2-3"><a href="#Question-2-3" class="headerlink" title="Question 2.3"></a>Question 2.3</h4><p>What’s $p(t\vert y(w,x))$ for ML and MAP estimation, respectively?</p>
<h4 id="Solution-2-3"><a href="#Solution-2-3" class="headerlink" title="Solution 2.3"></a>Solution 2.3</h4><p>Probability of $t=1$ w.r.t. ML and MAP estimations</p>
<script type="math/tex; mode=display">
\begin{align*}
p_\text{ML}(t=1\vert y(w_\text{ML},x)) &= \sigma(w_\text{ML}^\text T\phi(x)) = \frac{1}{1+\exp(-w_\text{ML}^\text T\phi(x))}\\
p_\text{MAP}(t=1\vert y(w_\text{MAP},x)) &= \sigma(w_\text{MAP}^\text T\phi(x))= \frac{1}{1+\exp(-w_\text{MAP}^\text T\phi(x))}\\
\end{align*}</script>]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
        <tag>Artificial Intelligence</tag>
      </tags>
  </entry>
  <entry>
    <title>CS205 C/C++ Project Audio Convertor</title>
    <url>/2023/11/25/CS205_Audio_Convertor/</url>
    <content><![CDATA[<p>Designer: <a href="https://github.com/Artanisax">Artanisax</a> and <a href="https://github.com/GuTaoZi">Gu Tao</a>.</p>
<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>In this project, you need to implement a library in C/C++ that supports encoding conversion from .pcm raw audio files to <code>.wav</code> files and then to simple <code>.flac</code> files, as well as decoding wav and flac format files. Also you need to implement a <strong>Command Line Interface (CLI)</strong> to demonstrate your project.</p>
<h2 id="Audio-Formats"><a href="#Audio-Formats" class="headerlink" title="Audio Formats"></a>Audio Formats</h2><h3 id="PCM"><a href="#PCM" class="headerlink" title="PCM"></a><a href="https://en.wikipedia.org/wiki/Pulse-code_modulation">PCM</a></h3><p>A <a href="https://en.wikipedia.org/wiki/Raw_audio_format">raw audio file</a> is any file containing un-containerized and uncompressed audio. The data is stored as <strong>raw pulse-code modulation (PCM)</strong> values <strong>without any metadata header information</strong> (such as sampling rate, bit depth, endian, or number of channels).</p>
<h3 id="WAV"><a href="#WAV" class="headerlink" title="WAV"></a><a href="https://en.wikipedia.org/wiki/WAV">WAV</a></h3><p>WAV, known for WAVE (Waveform Audio File Format), is a subset of Microsoft’s Resource Interchange File Format (RIFF) specification for storing digital audio files. The format doesn’t apply any compression to the bitstream and stores the audio recordings with different sampling rates and bitrates. This format is of <strong>little-endian</strong>!</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">                           RIFF Header                         </span><br><span class="line">+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+</span><br><span class="line">| 0                          15 | 16                       31 |</span><br><span class="line">|=============================================================|</span><br><span class="line">|                    RIFF header identifier                   |</span><br><span class="line">|-------------------------------------------------------------|</span><br><span class="line">|                          Total Size                         |</span><br><span class="line">|-------------------------------------------------------------|</span><br><span class="line">|                          File type                          |</span><br><span class="line">+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+</span><br><span class="line"></span><br><span class="line">                          Format Chunk                         </span><br><span class="line">+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+</span><br><span class="line">| 0                          15 | 16                       31 |</span><br><span class="line">|=============================================================|</span><br><span class="line">|                    Format chunk identifier                  |</span><br><span class="line">|-------------------------------------------------------------|</span><br><span class="line">|                         Chunk Size                          |</span><br><span class="line">|-------------------------------------------------------------|</span><br><span class="line">|         audio format         |      number of channels      |</span><br><span class="line">|-------------------------------------------------------------|</span><br><span class="line">|                         Sample Rate                         |</span><br><span class="line">|-------------------------------------------------------------|</span><br><span class="line">|                          Byte Rate                          |</span><br><span class="line">|-------------------------------------------------------------|</span><br><span class="line">|          Block Align         |        Bits Per Sample       | </span><br><span class="line">+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+</span><br><span class="line"></span><br><span class="line">                           Data Chunk                          </span><br><span class="line">+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+</span><br><span class="line">| 0                          15 | 16                       31 |</span><br><span class="line">|=============================================================|</span><br><span class="line">|                     Data chunk identifier                   |</span><br><span class="line">|-------------------------------------------------------------|</span><br><span class="line">|                          Data Size                          |</span><br><span class="line">|-------------------------------------------------------------|</span><br><span class="line">|                         Sample Data                         |  </span><br><span class="line">+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+</span><br></pre></td></tr></table></figure>
<h3 id="FLAC"><a href="#FLAC" class="headerlink" title="FLAC"></a><a href="https://en.wikipedia.org/wiki/FLAC">FLAC</a></h3><p><strong>FLAC</strong> stands for <strong>Free Lossless Audio Codec</strong>, an audio format similar to MP3, but lossless, meaning that audio is compressed in FLAC without any loss in quality.</p>
<p>FLAC stands out as the fastest and most widely supported lossless audio codec, and the only one that at once is non-proprietary, is unencumbered by patents, has an open-source reference implementation, has a well documented format and API, and has several other independent implementations. This format is of <strong>big-endian</strong>!</p>
<p>More information like the FLAC format specification can be found on the <a href="https://xiph.org/flac/documentation.html">official documentation of FLAC</a>.</p>
<h2 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h2><p>The tasks below are listed in ascending order of difficulty to implement, and we recommend that you implement them in this order.</p>
<h3 id="Metadata-Display-amp-Edit-15-pts"><a href="#Metadata-Display-amp-Edit-15-pts" class="headerlink" title="Metadata Display &amp; Edit (15 pts)"></a>Metadata Display &amp; Edit (15 pts)</h3><p>In this part, you need to impement an executable file to display and edit the metadata of FLAC files. Given a <code>.flac</code> file, your program should be able to decode and display the information of metadata blocks of <strong>type 0 (STREAMINFO)</strong> and <strong>type 4 (VORBIS_COMMENT)</strong>.</p>
<p>A <code>.flac</code> file is given as the official testcase for this task.</p>
<h3 id="Encoder-RAW-→-WAV-→-FLAC-30-pts"><a href="#Encoder-RAW-→-WAV-→-FLAC-30-pts" class="headerlink" title="Encoder: RAW → WAV → FLAC (30 pts)"></a>Encoder: RAW → WAV → FLAC (30 pts)</h3><p>In this part, you need to implement a convertor from <code>.raw</code> to <code>.wav</code> (10 pts), and then to <code>.flac</code> (20 pts).</p>
<p>The first subtask is to convert a raw audio file to a <code>.wav</code> file. Since the raw audio file does not contain information like sample rate, bits per sample (depth), number of channel etc., when converting <code>.raw</code> to <code>.wav</code>, an additional JSON file is needed to provide extra information for the header. In official test cases, a <code>.json</code> file is given along with each <code>.raw</code> file.</p>
<p>The second subtask is to convert a <code>.wav</code> file into a <code>.flac</code> file. For basic requirement, the depth will only be <strong>16Bit int</strong> or <strong>24Bit int</strong>, and you only need to encode every subblock into a subframe using <strong><a href="https://xiph.org/flac/format.html#subframe_verbatim">verbatim predictor</a></strong> with channel assignment of <strong><a href="https://xiph.org/flac/format.html#frame_header">2 channels: left</a></strong>, with <strong><a href="https://xiph.org/flac/format.html#metadata_block_streaminfo">STREAMINFO</a></strong> and <strong><a href="https://xiph.org/flac/format.html#metadata_block_vorbis_comment">VORBIS_COMMENT</a></strong> metadata.</p>
<p>An important evaluation metric in this task is whether the audio files converted by your library can be played with commonly used media players.</p>
<p>A <code>.raw</code> file with <code>.json</code> is given as the official testcase for this task.</p>
<h3 id="Decoder-FLAC-→-WAV-→-RAW-30-pts"><a href="#Decoder-FLAC-→-WAV-→-RAW-30-pts" class="headerlink" title="Decoder: FLAC → WAV → RAW (30 pts)"></a>Decoder: FLAC → WAV → RAW (30 pts)</h3><p>For the third task, you are required to implement a decoder for your library, to convert a <code>.flac</code> file into <code>.wav</code> format (20 pts), and then to <code>.raw</code> format (10 pts).</p>
<p>Same as above, you only need to handle simple <code>.flac</code> files with <strong>STREAMINFO</strong> and <strong>VORBIS_COMMENT</strong> metadata and <strong>verbatim subframes</strong>.</p>
<p>You can choose the <code>.flac</code> file generated in the second task as the input (testcase) for this task, and check if the <code>.wav</code> and <code>.raw</code> files are the same as the input ones of the encoder.</p>
<p>No official testcase is given for this task.</p>
<h3 id="Possible-Bonus-Ideas-infty-pts"><a href="#Possible-Bonus-Ideas-infty-pts" class="headerlink" title="Possible Bonus Ideas ($\infty$ pts)"></a>Possible Bonus Ideas ($\infty$ pts)</h3><p>Here we offer some ideas about the possible bonus functions, with estimated difficulties. You are also encouraged to explore your own bonus ideas.</p>
<p>The tasks below are listed in ascending order of difficulty to implement.</p>
<ul>
<li><p>😊 <strong>Excellent Project Management:</strong><br>How to manage a project during development can be very easy, or very hard. Try to manage your project structure well, keep a changelog for revision control, write a user-friendly document, cooperate via GitHub, GitLab, Gitee, …</p>
<p>This should have been a basic requirement, but we set it as bonus to encourage you to learn how to manage a cooperating project well, which is an important skill that you can benefit from in future project development.</p>
<blockquote>
<p>Stop using QQ/Wechat to synchronize your project!<br>That’s too brutal!</p>
</blockquote>
</li>
<li><p>😊 <strong>More Metadata Block Types:</strong><br>Support (analyze, display and edit) additional metadata block types, like PADDING, SEEKTABLE, PICTURE etc.</p>
<ul>
<li><p>If a <strong>COMMENT</strong> block is followed by a <strong>PADDING</strong> block, the additional comments to be appended should overwright part of the <strong>PADDING</strong> block first rather than insert directly.</p>
</li>
<li><p>If an existing <strong>SEEKTABLE</strong> block (one .flac file has atmost one <strong>SEEKTABLE</strong> block) has placeholder seekpoints, the added ones are supposed to replace the placeholders. And if it’s followed by a <strong>PADDING</strong> block, do the same as the direction above.</p>
</li>
</ul>
</li>
<li><p>😊 <strong>Extreme Robustness:</strong><br>Although robustness is one of the basic requirements to obtain basic points, you can get bonus points if your library is excellent in terms of exception handling and memory management!</p>
<p>MD5 signiture and CRC check should also be covered in your decoder for this bonus.</p>
<p>However, to get this bonus part, you need to rethink what kind of robustness can be qualified as <strong>“extreme”</strong>.</p>
<blockquote>
<p>Oops! Why segmentation fault again!</p>
</blockquote>
</li>
<li><p>🤔 <strong>Interchannel Decorrelation</strong><br>Though the basic requirement for channel assignment is to store the left channel and the right channel seperately, there are more ways to deal with 2-channel audios, which can be helpful for compression. So try to support at least one of these <a href="https://xiph.org/flac/format.html#interchannel">speciall stereo assignments</a> (from $1000$ to $1010$) with your convertor.</p>
<ul>
<li>To implement this function, you may need to modify both the encoder and decoder, to adapt to different channel assignment.</li>
</ul>
</li>
<li><p>🤔 <strong>More Subframe Types</strong><br>Support additional subblock encoding patterns like <strong>SUBFRAME_CONSTANT</strong>, <strong>SUBFRAME_FIXED</strong>, <strong>SUBFRAME_LPC</strong>. You will learn the magic of lossless data compression during this bonus.</p>
<ul>
<li>When implementing this part, you are doing <strong>real lossless compression</strong>, the .flac file generated will reduce in size.</li>
<li>CONSTANT is recommended, the other two may need some pre-knowledge of signal processing.</li>
</ul>
<blockquote>
<p>My dad taught me that in Hawaii.</p>
</blockquote>
</li>
<li><p>🤔 <strong>GUI</strong><br>Implement a pretty GUI for your convertor! However, you should still focus on the main part of this project: your library.</p>
<blockquote>
<p>Gold needs to shine, too.</p>
</blockquote>
</li>
<li><p>😇 <strong>All-round Decoder</strong><br><a href="https://github.com/ietf-wg-cellar/flac-test-files">FLAC decoder testbench</a> provides a collection of FLAC files that can be used to test various FLAC decoder abilities. Improve your decoder to pass as many testcases as possible <a href="https://github.com/ietf-wg-cellar/flac-test-files/tree/main/subset">here</a>, the more robust your library is, the more bonus points you get.</p>
<blockquote>
<p>It’s a hexagonal warrior.</p>
</blockquote>
</li>
<li><p>😇 <strong>More Audio Formats</strong></p>
<p>Modify your library to make it work for more audio formats. A recommended challenge for those who are familiar with the audio file encoding formats.</p>
<blockquote>
<p>No pain, no gain.</p>
</blockquote>
</li>
<li><p><strong>Anything You Regard as “Bonus”</strong></p>
<p>Your team is encouraged to come up with your own ideas, we will grade your bonus according to your workload and implementation.</p>
</li>
</ul>
<p>Please describe your bonus clearly in your report, so that inspectors can fully understand and grade your bonus ideas.</p>
<h3 id="Self-Prepared-Testcases-5-pts"><a href="#Self-Prepared-Testcases-5-pts" class="headerlink" title="Self-Prepared Testcases (5 pts)"></a>Self-Prepared Testcases (5 pts)</h3><p>You are required to prepare at least 1 testcase for each basic function.</p>
<p>For your bonus part, you should prepare at least 1 testcase for each bonus function, otherwise the bonus is invalid.</p>
<p>Good news: any valid testcases that check the full usability of your library will obtain all of the 5 points.</p>
<h3 id="Report-10-pts"><a href="#Report-10-pts" class="headerlink" title="Report (10 pts)"></a>Report (10 pts)</h3><p>The report should be in <strong>PDF</strong> format, easy to understand and provide a clear description of the project, especially the <strong>highlights</strong>. <u>Notice that your report should contain everything that a good README has.</u></p>
<p>The report should also includes a detailed description of each team member’s contribution, and contribution rated as</p>
<ul>
<li>A (significant contribution)</li>
<li>B (moderate contribution)</li>
<li>C (little contribution)</li>
<li>D (free rider).</li>
</ul>
<p>Reports that meaninglessly pile up pages will result in lower scores. Please be as concise and brief as possible and just show the highlights. Please avoid pasting too much code in your report. Any non-technical detail should be discarded, that’s a waste of time for both your team and the inspectors.</p>
<p>You are encouraged to use IEEE, ACM, or any other elegant templates, however this will not affect your score, just to ease the veins of inspectors.</p>
<h2 id="Grading-Policy"><a href="#Grading-Policy" class="headerlink" title="Grading Policy"></a>Grading Policy</h2><p>The maximum of this project is 110 points, consists of:</p>
<ul>
<li>basic functions (75)</li>
<li>report (10)</li>
<li>self-prepared testcases (5)</li>
<li>bonus functions (20 + overflow to make up for basic requirements)</li>
</ul>
<ol>
<li><p>Your library need to support basic functions, including metadata display and editing, encoding and decoding, and pass all official testcases.<br> After implementing the basic part, the <strong>upper bound</strong> of your basic score will reach 65, failure to pass the basic usability test will make your upper bound less than 65.</p>
</li>
<li><p>If your bonus part gains over 20 points, the overflow part can fill the basic part loss.</p>
</li>
<li><p>Be careful of the memory management and exception handling! Your library should be robust enough for basic use. Bad memory management will reduce your score.</p>
</li>
<li><p>Attention should be paid to code style. Adequate time is given for code to be written correctly and with good style. Deductions on the score will be made for poor code style. Code style guides, such as the <a href="http://google.github.io/styleguide/cppguide.html">Google C++ Style Guide</a>, can be used as a reference.</p>
</li>
</ol>
<h2 id="Rules"><a href="#Rules" class="headerlink" title="Rules"></a>Rules</h2><ol>
<li><p>To make this project more interesting, you are not allowed to use libFLAC, libFLAC++, ffmpeg, or any other library making it TOO easy to implement your convertor. Since your workload will be evaluated for grading.</p>
</li>
<li><p>The project files must be submitted before the deadline. Any submission after the deadline (even by 1 second) will result in a score of 0. The deadline is 23:59, on the Sunday of week 18.</p>
</li>
</ol>
<h2 id="Utilities"><a href="#Utilities" class="headerlink" title="Utilities"></a>Utilities</h2><p>Heres some useful tools to help you understand the formats and file streams. Notice that you may <strong>NOT</strong> invoke them in your own source code.</p>
<ul>
<li><p><a href="https://xiph.org/flac/documentation_tools.html">FLAC</a><br>The official command-line tools, which contains two sub programs. <code>flac</code> is an encoder as well as a decoder, while <code>metaflac</code> is a metadata editor. Your project may imitate the CLI of this official tool.</p>
<p>We highly recommend you to check the format of .flac files using <code>flac -a</code> rather than reading the file in hexadecimal when debugging.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flac input.wav      # encode WAVE into FLAC</span><br><span class="line">flac -d input.flac  # decode FLAC into WAVE</span><br><span class="line">flac -a input.flac  # analyze audio frames</span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2023/11/26/lZD8UhqR17aQeSk.png" alt=""></p>
</li>
<li><p><a href="https://sourceforge.net/projects/sox/">Sound eXchange</a><br>SoX is the Swiss Army Knife of sound processing utilities. It can convert audio files to other popular audio file types and also apply sound effects and filters during the conversion.</p>
<p>You may check if your convertor generates the same result as SoX does.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sox -i input.wav        # show WAVE header info</span><br><span class="line">sox input.wav -t raw output.raw  # decode WAVE into RAW</span><br><span class="line">sox -t raw -c 2 -e signed-integer -b 16 -r 44100 name.raw name.wav</span><br><span class="line">  # add headers for RAW and then encode them into WAVE</span><br></pre></td></tr></table></figure>
</li>
<li><p><a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.hexeditor">Hex Editor</a><br>A custom editor extension for Visual Studio Code which provides a hex editor for viewing and manipulating files in their raw hexadecimal representation.</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2></li>
</ul>
<p><a href="https://en.wikipedia.org/wiki/WAV">Wikipedia: Waveform Audio File Format</a></p>
<p><a href="https://en.wikipedia.org/wiki/FLAC">Wikipedia: Free Lossless Audio Codec</a></p>
<p><a href="https://xiph.org/flac/index.html">FLAC Official Webpage</a></p>
<p><a href="https://github.com/xiph/flac">GitHub: xiph/flac</a></p>
<p><a href="https://github.com/ietf-wg-cellar/flac-test-files">FLAC decoder testbench</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>CS329 Machine Learning Quiz 3</title>
    <url>/2023/11/28/CS329_Quiz_3/</url>
    <content><![CDATA[<h2 id="CS329-Machine-Learning-H-Quiz-3"><a href="#CS329-Machine-Learning-H-Quiz-3" class="headerlink" title="CS329 Machine Learning(H) Quiz 3"></a>CS329 Machine Learning(H) Quiz 3</h2><p>樊斯特 12111624</p>
<h3 id="Before-Quiz"><a href="#Before-Quiz" class="headerlink" title="Before Quiz"></a>Before Quiz</h3><ol>
<li><p>Learning </p>
<p>$p(\theta\vert\mathcal D)$</p>
<ul>
<li>$p(\mathcal D\vert \theta)p(\theta)$ closed-form solution</li>
<li>$L(\theta)$<ul>
<li>$b=\nabla_\theta L(\theta)$</li>
<li>$H=\nabla^2_\theta L(\theta)$</li>
</ul>
</li>
</ul>
<p>$\theta^+\leftarrow \theta - H^{-1}b$</p>
<p>$p(\theta\vert\mathcal D)= \mathcal N(\theta_\text{MAP},H_\text{MAP}^{-1})$</p>
</li>
<li><p>Prediction</p>
<script type="math/tex; mode=display">
p(t_{N+1}\vert x_{N+1},\mathcal D) = \int p(t_{N+1},\theta\vert x_{N+1},\mathcal D) \text d \theta = \int p(t_{N+1}\vert x_{N+1},\theta)p(\theta\vert\mathcal D)\text d \theta</script><ul>
<li><p>$t_{N+1} = y(x_{N+1},\theta)+v$, $v\sim \mathcal N(0,\beta^{-1})$</p>
<p>$p(t_{N+1}\vert x_{N+1},\mathcal D) =\mathcal N(y(x_{N+1},\theta_\text{MAP})+\bar q_\text{MAP}^\text{T}H^{-1}_\text{MAP}\bar q_\text{MAP})$</p>
</li>
<li><p>$y(x_{N+1},\theta)=\delta?(\Phi^\text T(x_{N+1})\theta)$</p>
<p>$p(t_{N+1}\vert x_{N+1},\mathcal D) =p(t_{N+1}\vert x_{N+1},\mathcal \theta_\text{MAP}) =(y(x_{N+1},\theta_\text{MAP}))^{t_{N+1}}(1-y(x_{N+1},\theta_\text{MAP}))^{1-t_{N+1}}$</p>
</li>
</ul>
</li>
<li><p>Evaluation</p>
<script type="math/tex; mode=display">
\begin{align*}
p(\mathcal D) &= \int p(\mathcal D\vert\theta)p(\theta)\text d \theta\\
-\ln p(\mathcal D) &=\int- \ln p(\mathcal D\vert \theta)-\ln p(\theta)\text d\theta
\\ &= -\ln p(\mathcal D\vert \theta_\text{MAP})-\ln p(\theta_\text{MAP})+\int\frac 1 2 (\theta-\theta_\text{MAP})^\text T H^{-1}_\text{MAP}(\theta-\theta_\text{MAP})\text d\theta\\
&=-\ln p(\mathcal D\vert \theta_\text{MAP})-\ln p(\theta_\text{MAP})-\frac M 2 \ln(2\pi)+\frac M 2 \ln\vert H_\text{MAP} \vert
\end{align*}</script></li>
</ol>
<hr>
<h3 id="Question-1-Neural-Networks-without-Prior"><a href="#Question-1-Neural-Networks-without-Prior" class="headerlink" title="Question 1 Neural Networks without Prior"></a>Question 1 Neural Networks without Prior</h3><p><img src="https://s2.loli.net/2023/11/28/b7tYKeFscGjp6Dw.png" alt="image.png" style="zoom:50%;" /></p>
<h4 id="Question-1-1"><a href="#Question-1-1" class="headerlink" title="Question 1.1"></a>Question 1.1</h4><p>What are the gradients of $\frac{\partial y_k}{\partial w_{kj}}$, $\frac{\partial y_k}{\partial w_{ji}}$ for regression and classification, respectively?</p>
<h4 id="Solution-1-1"><a href="#Solution-1-1" class="headerlink" title="Solution 1.1"></a>Solution 1.1</h4><ol>
<li><p>Regression</p>
<script type="math/tex; mode=display">
\begin{align*}
y_k&=a_k\\
\frac{\partial y_k}{\partial w_{kj}}&=\frac{\partial a_k}{\partial w_{kj}}=z_j\\
z_j&=h(a_j), \frac{\partial a_j}{\partial w_{ji}}=z_i\\
\frac{\partial y_k}{\partial w_{ji}}&=\frac{\partial a_k}{\partial z_j}\frac{\partial z_j}{\partial a_j}\frac{\partial a_j}{\partial w_{ij}}=w_{kj} h'(a_j)z_i
\end{align*}</script></li>
<li><p>Classification</p>
<script type="math/tex; mode=display">
\begin{align*}
y_k&=\sigma(a_k)\\
\frac{\partial y_k}{\partial w_{kj}}&=\frac{\partial y_k}{\partial a_k}\frac{\partial a_k}{\partial w_{kj}}=\sigma'(a_k)z_j=y_k(1-y_k)z_j\\
z_j&=h(a_j), \frac{\partial a_j}{\partial w_{ji}}=z_i\\
\frac{\partial y_k}{\partial w_{ji}}&=\frac{\partial y_k}{\partial a_k}\frac{\partial a_k}{\partial z_j}\frac{\partial z_j}{\partial a_j}\frac{\partial a_j}{\partial w_{ij}}=y_k(1-y_k)w_{kj} h'(a_j)z_i
\end{align*}</script></li>
</ol>
<h4 id="Question-1-2"><a href="#Question-1-2" class="headerlink" title="Question 1.2"></a>Question 1.2</h4><p>What are the gradients of $\frac{\partial E_n}{\partial w_{kj}}$, $\frac{\partial E_n}{\partial w_{ji}}$ for regression and classification, respectively?</p>
<h4 id="Solution-1-2"><a href="#Solution-1-2" class="headerlink" title="Solution 1.2"></a>Solution 1.2</h4><script type="math/tex; mode=display">
\begin{align*}
\delta_k &\equiv y_k-t_k \\
\delta_j &\equiv \sum\limits_{k=1}^K\frac{\partial E_n}{\partial a_k}\frac{\partial a_k}{\partial a_j} =  h'(a_j) \sum\limits_{k=1}^K w_{kj}\delta_k \\
\end{align*}</script><ol>
<li><p>Regression</p>
<script type="math/tex; mode=display">
\begin{align*}
E_n &= \frac 1 2 \sum\limits_{k=1}^K (y_k-t_k)^2\\
\frac{\partial E_n}{\partial w_{kj}} &=\frac{\partial E_n}{\partial y_k}\frac{\partial y_k}{\partial w_{kj}} =(y_k-t_k)z_j =\delta_kz_j\\
\frac{\partial E_n}{\partial w_{ji}} &= \frac{\partial E_n}{\partial a_j}\frac{\partial a_j}{\partial w_{kj}} =h'(a_j)\sum\limits_{k=1}^N w_{kj}\delta_k z_i =\delta_jz_i
\end{align*}</script></li>
<li><p>Classification</p>
<script type="math/tex; mode=display">
\begin{align*}
E_n &= -\sum\limits_{k=1}^K t_k\ln y_k + (1-t_k)\ln (1-y_k)\\
\frac{\partial E_n}{\partial w_{kj}} &=\frac{\partial E_n}{\partial y_k}\frac{\partial y_k}{\partial a_k}\frac{\partial a_k}{\partial w_{kj}} = (y_k-t_k)z_j = \delta_kz_j\\
\frac{\partial E_n}{\partial w_{ji}} &= \frac{\partial E_n}{\partial a_j}\frac{\partial a_j}{\partial w_{kj}} = h'(a_j)\sum\limits_{k=1}^N w_{kj}\delta_k z_i = \delta_jz_i
\end{align*}</script></li>
</ol>
<h4 id="Question-1-3"><a href="#Question-1-3" class="headerlink" title="Question 1.3"></a>Question 1.3</h4><p>What’s the gradients of $\frac{\partial y_k}{\partial z_i}$ for regression and classification, respectively?</p>
<h4 id="Solution-1-3"><a href="#Solution-1-3" class="headerlink" title="Solution 1.3"></a>Solution 1.3</h4><ol>
<li><p>Regression</p>
<script type="math/tex; mode=display">
\begin{align*}
\frac{\partial y_k}{\partial z_i} = \frac{\partial y_k}{\partial a_k}\frac{\partial a_k}{\partial z_j}\frac{\partial z_j}{\partial a_j}\frac{\partial a_j}{\partial z_i} = w_{kj}h'(a_j)w_{ji}
\end{align*}</script></li>
<li><p>Classification</p>
<script type="math/tex; mode=display">
\begin{align*}
\frac{\partial y_k}{\partial z_i} = \frac{\partial y_k}{\partial a_k}\frac{\partial a_k}{\partial z_j}\frac{\partial z_j}{\partial a_j}\frac{\partial a_j}{\partial z_i} = y_k(1-y_k)w_{kj}h'(a_j)w_{ji}
\end{align*}</script></li>
</ol>
<h3 id="Question-2-Neural-Networks-with-Prior"><a href="#Question-2-Neural-Networks-with-Prior" class="headerlink" title="Question 2 Neural Networks with Prior"></a>Question 2 Neural Networks with Prior</h3><p>If the prior of $w\sim \mathcal N(m_0,\Sigma_0^{-1})$ for both regression and classification, then</p>
<h4 id="Question-2-1"><a href="#Question-2-1" class="headerlink" title="Question 2.1"></a>Question 2.1</h4><p>What are the MAP solutions of $w,p(w\vert\mathcal D)$ for both cases?</p>
<h4 id="Solution-2-1"><a href="#Solution-2-1" class="headerlink" title="Solution 2.1"></a>Solution 2.1</h4><p>By iterating $w^\text {new}=w^\text {old}-A^{-1}\nabla E(w)$, we obtain $w_\text{MAP}$.</p>
<ol>
<li><p>Regression</p>
<script type="math/tex; mode=display">
\begin{align*}
E(w) &= -\ln p(w\vert \mathbf t) = \frac\alpha 2 w^\text Tw +\frac\beta 2 \sum\limits_{n=1}^N [y(x_n,w)-t_n]^2 + C\\
\nabla E(w) &=\alpha w + \beta \sum\limits_{n=1}^N (y_n-t_n)\mathbf g_n\\
\mathbf g &= \nabla_{w} y(\mathbf x,w)\vert_{w=w_\text{MAP}}\\
A&=\nabla^2 E(w) = \alpha\mathbf I + \beta \mathbf H
\end{align*}</script></li>
<li><p>Classification</p>
<script type="math/tex; mode=display">
\begin{align*}
E(w) &= -\ln p(w\vert \mathbf t) = \frac\alpha 2 w^\text Tw -\sum\limits_{n=1}^N [t_n\ln y_n + (1-t_n)\ln(1-y_n)]\\
\nabla E(w) &=\alpha w + \sum\limits_{n=1}^N (y_n-t_n)\mathbf g_n\\
\mathbf g &= \nabla_{w} y(\mathbf x,w)\vert_{w=w_\text{MAP}}\\
A&=\nabla^2 E(w) = \alpha\mathbf I + \mathbf H
\end{align*}</script></li>
</ol>
<p>where $\mathbf H$ is the Hessian matrix of the sum of error function.</p>
<p>Hence we have $p(w_\text{MAP}\vert \mathcal D) = \mathcal N(w\vert w_\text{MAP},A^{-1})$.</p>
<h4 id="Question-2-2"><a href="#Question-2-2" class="headerlink" title="Question 2.2"></a>Question 2.2</h4><p>What are the predictive distributions of a new data input $x_{N+1}$ and label $t_{N+1}$ for both cases?</p>
<h4 id="Solution-2-2"><a href="#Solution-2-2" class="headerlink" title="Solution 2.2"></a>Solution 2.2</h4><ol>
<li><p>Regression</p>
<script type="math/tex; mode=display">
p(t_{N+1}\vert x_{N+1}, \mathcal{D}) = \mathcal N(y(x,w_\text{MAP}),\beta^{-1}+g^\text T Ag)</script><script type="math/tex; mode=display">
p(t_{N+1}\vert x_{N+1},\mathcal D) =\mathcal N(y(x_{N+1},\theta_\text{MAP})+\bar q_\text{MAP}^\text{T}H^{-1}_\text{MAP}\bar q_\text{MAP})</script></li>
</ol>
<ol>
<li><p>Classification</p>
<script type="math/tex; mode=display">
p(t_{N+1} \vert{x_{N+1}}, \mathcal{D})=\sigma\left(\kappa\left(\sigma_{a}^{2}\right) a_{M A P}\right)</script></li>
</ol>
<script type="math/tex; mode=display">
p(t_{N+1}\vert x_{N+1},\mathcal D) =p(t_{N+1}\vert x_{N+1},\mathcal \theta_\text{MAP}) =(y(x_{N+1},\theta_\text{MAP}))^{t_{N+1}}(1-y(x_{N+1},\theta_\text{MAP}))^{1-t_{N+1}}</script>]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
        <tag>Artificial Intelligence</tag>
      </tags>
  </entry>
</search>
